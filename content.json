{"meta":{"title":"ViVi's craft","subtitle":"只用来写技术相关的文章，记一些平时很少用很容易忘记的东西。能用实际项目来掌握的技术还懒得写，于是很少更新。想看更新频繁,内容日常的博客，请移步：<a style=\"color:#FFFFFF;\" herf=\"https://chenvivi.wordpress.com\">https://chenvivi.wordpress.com</a>","description":null,"author":"ViVi","url":"http://blog.valorachen.club"},"pages":[{"title":"吃我安利","date":"2018-11-15T08:25:05.092Z","updated":"2017-03-12T15:32:57.554Z","comments":true,"path":"reading/index.html","permalink":"http://blog.valorachen.club/reading/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-15T08:25:05.102Z","updated":"2018-06-25T03:14:23.837Z","comments":false,"path":"tags/index.html","permalink":"http://blog.valorachen.club/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-15T08:25:05.104Z","updated":"2018-06-25T03:20:43.829Z","comments":false,"path":"categories/index.html","permalink":"http://blog.valorachen.club/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"测试","slug":"测试","date":"2019-01-16T09:30:28.000Z","updated":"2019-01-16T09:36:51.404Z","comments":true,"path":"2019/01/16/测试/","link":"","permalink":"http://blog.valorachen.club/2019/01/16/测试/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"现有Android框架研究","slug":"现有Android框架研究","date":"2018-10-16T06:09:11.000Z","updated":"2018-10-18T11:00:54.238Z","comments":true,"path":"2018/10/16/现有Android框架研究/","link":"","permalink":"http://blog.valorachen.club/2018/10/16/现有Android框架研究/","excerpt":"","text":"第一天 (2018/10/15)简述基本上大家都知道 Google 有 android-architecture，看了看简介发现是一种教程性质的东西并不是具体框架。然后我自己知道有 iosched，每年 Google 大会的新内容都会在里边呈现。还有一个 Android-CleanArchitecture，然而项目都还是基于 Android Studio 2.0 的无法直接运行，于是先看了 iosched 详细过程首先运行，发现首页上有开始使用字样，于是去搜这个字段，发现了唯一使用这个字段的 layout 文件叫做fragment_onboarding，然后查看哪些地方使用了这个 layout 文件，找到了FragmentOnboardingBinding，DataBinderMapperImpl DataBinderMapperImpl中有一个不熟悉的数据结构SparseIntArray，中存储了这个 layout 的 id 12345678static &#123; INTERNAL_LAYOUT_ID_LOOKUP.put(com.google.samples.apps.iosched.R.layout.dialog_remove_reservation, LAYOUT_DIALOGREMOVERESERVATION);... INTERNAL_LAYOUT_ID_LOOKUP.put(com.google.samples.apps.iosched.R.layout.fragment_map, LAYOUT_FRAGMENTMAP); INTERNAL_LAYOUT_ID_LOOKUP.put(com.google.samples.apps.iosched.R.layout.fragment_onboarding, LAYOUT_FRAGMENTONBOARDING);...&#125; DataBinderMapperImpl 还有一个方法，通过 layout id 来获取了 另一个奇怪的对象，假设这里 layoutId 的值是 LAYOUT_FRAGMENTONBOARDING，那么会返回一个 FragmentOnboardingBindingImpl。于是我全局搜索LAYOUT_FRAGMENTONBOARDING，居然没有发现外部调用的地方，惊了 12345678910111213141516171819@Override public ViewDataBinding getDataBinder(DataBindingComponent component, View view, int layoutId) &#123; int localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId); if(localizedLayoutId &gt; 0) &#123; final Object tag = view.getTag(); if(tag == null) &#123; throw new RuntimeException(&quot;view must have a tag&quot;); &#125; switch(localizedLayoutId) &#123; case LAYOUT_FRAGMENTONBOARDING: &#123; if (&quot;layout/fragment_onboarding_0&quot;.equals(tag)) &#123; return new FragmentOnboardingBindingImpl(component, view); &#125; throw new IllegalArgumentException(&quot;The tag for fragment_onboarding is invalid. Received: &quot; + tag); &#125; &#125; &#125; return null;&#125; 我找了半天，发现这是 build 目录下的东西，吐血而亡 那么还是根据 Manifest 启动 Activity 找，启动 Activity 叫 LauncherActivity，它的父类和它本身看起来并没有渲染视图，看上去是判断一下是否进入首次启动页，用了观察者模式，不知道具体在怎么操作 1234567891011121314151617class LauncherActivity : DaggerAppCompatActivity() &#123; @Inject lateinit var viewModelFactory: ViewModelProvider.Factory override fun onCreate(savedInstanceState: Bundle?) &#123; super.onCreate(savedInstanceState) val viewModel: LaunchViewModel = viewModelProvider(viewModelFactory) viewModel.launchDestination.observe(this, EventObserver &#123; destination -&gt; when (destination) &#123; MAIN_ACTIVITY -&gt; startActivity(Intent(this, MainActivity::class.java)) ONBOARDING -&gt; startActivity(Intent(this, OnboardingActivity::class.java)) &#125;.checkAllMatched finish() &#125;) &#125;&#125; 先不管这个，看名字就知道首次启动页是 OnboardingActivity，里边只是简单的设置一下全屏显示，然后把复杂的东西交给了 OnboardingFragment处理，然后具体的三个可滑动页面是由WelcomeFragment，CustomizeScheduleFragment，CountdownFragment来展示。这里一直没有找到OnboardingFragment渲染的 layout 文件，但我相信它是fragment_onboarding，但我没能看懂 onCreateView 中返回的东西 1234567891011121314151617181920212223242526272829@SuppressLint(&quot;ClickableViewAccessibility&quot;) override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View? &#123; onboardingViewModel = viewModelProvider(viewModelFactory) binding = FragmentOnboardingBinding.inflate(inflater, container, false).apply &#123; viewModel = onboardingViewModel setLifecycleOwner(this@OnboardingFragment) pager.adapter = OnboardingAdapter(childFragmentManager) pagerPager = ViewPagerPager(pager) // If user touches pager then stop auto advance pager.setOnTouchListener &#123; _, _ -&gt; handler.removeCallbacks(advancePager) false &#125; &#125; onboardingViewModel.navigateToMainActivity.observe(this, EventObserver &#123; requireActivity().run &#123; startActivity(Intent(this, MainActivity::class.java)) finish() &#125; &#125;) return binding.root &#125; 在fragment_onboarding中可以看到，点击开始使用按钮的时候，执行了什么方法 123456789101112&lt;Button android:id=&quot;@+id/get_started&quot; style=&quot;@style/Widget.IOSched.RaisedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:onClick=&quot;@&#123;() -&gt; viewModel.getStartedClick()&#125;&quot; android:text=&quot;@string/onboarding_get_started&quot; app:layout_constraintBottom_toTopOf=&quot;@id/page_indicator&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toBottomOf=&quot;@id/guide_actions&quot; app:layout_constraintVertical_chainStyle=&quot;spread_inside&quot; /&gt; 查找 OnboardingFragment 中的ViewModel，对应的是 OnboardingViewModel，点击按钮时就是这里的getStartedClick被执行了 123456789101112class OnboardingViewModel @Inject constructor( private val onboardingCompleteActionUseCase: OnboardingCompleteActionUseCase) : ViewModel() &#123; private val _navigateToMainActivity = MutableLiveData&lt;Event&lt;Unit&gt;&gt;() val navigateToMainActivity: LiveData&lt;Event&lt;Unit&gt;&gt; = _navigateToMainActivity fun getStartedClick() &#123; onboardingCompleteActionUseCase(true) _navigateToMainActivity.postValue(Event(Unit)) &#125;&#125; getStartedClick方法中的第一句还好理解，onboardingCompleteActionUseCase(true)这个操作也就是用 SharedPreference记录一下是否已经启动过首次启动页，方便下次启动 App 时进行判断而已，看 OnboardingCompleteActionUseCase就大概能猜到 1234567open class OnboardingCompleteActionUseCase @Inject constructor( private val preferenceStorage: PreferenceStorage) : UseCase&lt;Boolean, Unit&gt;() &#123; override fun execute(completed: Boolean) &#123; preferenceStorage.onboardingCompleted = completed &#125;&#125; 至于第二句_navigateToMainActivity.postValue(Event(Unit))，好像是用了个观察者模式来监听，这里是发送事件的地方，不知道它具体怎么发送的，先不管。然后退回去看 OnboardingFragment ，在里边找到了接收事件的部分，可以看到是在这里执行了打开 MainActivity和关闭当前 Activity 的操作 123456onboardingViewModel.navigateToMainActivity.observe(this, EventObserver &#123; requireActivity().run &#123; startActivity(Intent(this, MainActivity::class.java)) finish() &#125; &#125;) 现在 MainActivity打开了，先不要管它，因为上面弹出了一个提示对话框，先看看这个是从哪里来的。同样的方法，全局搜索自定义日程安排，找到了它对应的 layout 文件 dialog_schedule_hints，然后再次全局搜索，找到了使用这个 layout 文件的类叫做 ScheduleUiHintsDialogFragment，里边的逻辑看起来很简单，点击知道了就执行 dismiss() 而已，但是他继承了一个叫做 CustomDimDialogFragment的类，然后这个类又继承了AppCompatDialogFragment，然后这个类又继承了DialogFragment。到此，继承树才走向 DialogFragment。这个继承链一路走过来，有很多目前不想细看的操作，值得注意的是，继承类的包名都带有androidx，然后我就知道有 androidx 和 jetpack 了。先不管这些东西怎么用，先回到ScheduleUiHintsDialogFragment，既然这个对话框弹出来了，那么看看它是在哪里实例化的，然后发现了ScheduleFragment中的方法 1234private fun openScheduleUiHintsDialog() &#123; val dialog = ScheduleUiHintsDialogFragment() dialog.show(requireActivity().supportFragmentManager, DIALOG_SCHEDULE_HINTS) &#125; 这个方法只在 ScheduleFragment的 onCreateView 中被这样调用。不仅如此，可以看到 onCreateView 中有大量像这样类似于观察者模式的东西 12345scheduleViewModel.scheduleUiHintsShown.observe(this, EventObserver &#123; if (!it) &#123; openScheduleUiHintsDialog() &#125; &#125;) 先不纠结ScheduleFragment的具体细节，回到 MainActivity，这里必然实例化了包括ScheduleFragment的三个 fragment 123456789101112131415161718192021222324252627282930313233343536override fun onCreate(savedInstanceState: Bundle?) &#123; super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // This VM instance is shared between activity and fragments, as it&apos;s scoped to MainActivity val scheduleViewModel: ScheduleViewModel = viewModelProvider(viewModelFactory) navigation.setOnNavigationItemSelectedListener &#123; when (it.itemId) &#123; R.id.navigation_schedule -&gt; consume &#123; replaceFragment(ScheduleFragment()) &#125; R.id.navigation_map -&gt; consume &#123; // Scroll to current event next time the schedule is opened. scheduleViewModel.userHasInteracted = false replaceFragment(MapFragment()) &#125; R.id.navigation_info -&gt; consume &#123; // Scroll to current event next time the schedule is opened. scheduleViewModel.userHasInteracted = false replaceFragment(InfoFragment()) &#125; else -&gt; false &#125; &#125; // Add a listener to prevent reselects from being treated as selects. navigation.setOnNavigationItemReselectedListener &#123;&#125; if (savedInstanceState == null) &#123; // Show Schedule on first creation navigation.selectedItemId = R.id.navigation_schedule &#125; else &#123; // Find the current fragment currentFragment = supportFragmentManager.findFragmentById(FRAGMENT_ID) as? MainNavigationFragment ?: throw IllegalStateException(&quot;Activity recreated, but no fragment found!&quot;) &#125; &#125; 等等，我发现这个程序在快速切换 tab 的时候居然会崩溃。天呐，作为 2018 I/O 大会的项目，居然崩溃，而且是可复现操作，惊了！看了下 log 发现并没有定位到可直接修改的代码，先不去管这个错是怎么报出来的，去 PlayStore 上下载这个App再测一遍，结果无论手速多快都没有复现 bug。再次编译并测试，很快就复现这个 bug了，可能是由于我的编译环境导致的吧，或者是 Github 上的代码并不直接对应 PlayStore 上的发行版，目前只初步想到这两种可能性。这是一个需要引起关注的点，但目前先不深究这个 123456789101112131415161718192021222310-15 17:31:07.166 27771-27771/com.google.samples.apps.iosched E/libc: Access denied finding property &quot;vendor.perf.iop_v3.enable.debug&quot; --------- beginning of crash10-15 17:31:07.175 27771-27848/com.google.samples.apps.iosched E/AndroidRuntime: FATAL EXCEPTION: Thread-8 Process: com.google.samples.apps.iosched, PID: 27771 java.lang.NoClassDefFoundError: Failed resolution of: Lorg/apache/http/ProtocolVersion; at ew.b(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):3) at ev.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):3) at ex.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):14) at com.google.maps.api.android.lib6.drd.al.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):6) at dz.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):21) at dz.run(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):8) Caused by: java.lang.ClassNotFoundException: Didn&apos;t find class &quot;org.apache.http.ProtocolVersion&quot; on path: DexPathList[[zip file &quot;/data/user_de/0/com.google.android.gms/app_chimera/m/00000021/MapsDynamite.apk&quot;],nativeLibraryDirectories=[/data/user_de/0/com.google.android.gms/app_chimera/m/00000021/MapsDynamite.apk!/lib/arm64-v8a, /system/lib64]] at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:169) at java.lang.ClassLoader.loadClass(ClassLoader.java:379) at ac.loadClass(:com.google.android.gms.dynamite_dynamiteloader@14366081@14.3.66 (100400-213742215):4) at java.lang.ClassLoader.loadClass(ClassLoader.java:312) at ew.b(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):3) at ev.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):3) at ex.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):14) at com.google.maps.api.android.lib6.drd.al.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):6) at dz.a(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):21) at dz.run(:com.google.android.gms.dynamite_mapsdynamite@14366081@14.3.66 (100400-213742215):8) 果然还是好奇手贱，去 Issue 里搜了一下 ProtocolVersion，居然有人有同样的 issue，去用如此惊人的手速点击这几个 tab 的，脑回路都有问题，居然如我一般的脑回路不正常的人类。托他的福找到了答案，经实测完美解决问题。看了一下这个项目的 target 确实是28，那么为什么不尝试一下 pr 呢？看了下这个 issue 是九月份提出来的，而那个提 issue 的 homie 并没有想到去 pr，所以 chance 就在我这里了。这个 pr 要是成功了我能吹一辈子啊~看了下最近的 pr 通过率一半都不到，也不会报太大希望，但这个问题貌似是必须要修复的 bug 应该是没有什么问题吧，再翻了翻发现每个 pr 上都有一个标识 ，cla:yes或者 cla:no，这个是 googlebot自动生成的，不知道是什么高级东西。而且仔细看 pr 发现了为 Google 贡献代码还要先同意一个条款。还好我发现了，不然又白等，现在 我的 pr 已经提了，好久没刷 Github 动态了，关注着先吧 今天看的代码也就一丢丢而且很多都没深究，这半天时间就过去了，感觉应该先把几个用到的框架了解一下然后再接着深入，听说 Jetpack 包含了 androidx，Dragger2也没深入了解过，android-ktx 又是个什么东西，这个项目的 ORM 是用的哪一款还没看呢 刚才看了一下 pr，googlebot 的审核已经过了，他们貌似在用一个高级东西做二次审核，不知道是个什么高级东西，看 log 知道是在执行 gradle test 命令，还可以这么搞自动审核真是高级，访问了一下这个东西的 官网 感觉一脸懵逼。哎，感觉自己不知道的好东西多了去了 结论目前我没有看到我想要的东西。新框架最大的目标是减少重复工作量，可这个代码量看起来不减反增了 第二天(2018/10/16)简述目测如果不看 Jetpack，就无法再继续阅读 iosched 了，JetPack 是 2018 I/O 大会提出的东西，也就是说这是超级新的技术 详细过程去官网看 quick start | 野生中文文档，短小精悍到一脸懵逼，还好有 demo 源码，Manifest 中只有一个 Activity。天惹噜，这么干净的东西居然也能执行一个页面跳转逻辑，这些东西一定被隐藏在 layout 文件中了 1234567class StartActivity : AppCompatActivity() &#123; override fun onCreate(savedInstanceState: Bundle?) &#123; super.onCreate(savedInstanceState) setContentView(R.layout.activity_start) &#125;&#125; 点进 activity_start 中，果然发现有个新的 attribute 叫做 app:navGraph=&quot;@navigation/nav_graph&quot; 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/drawer_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;fragment android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/my_nav_host_fragment&quot; android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot; app:navGraph=&quot;@navigation/nav_graph&quot; app:defaultNavHost=&quot;true&quot; /&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; 而这个 nav_graph 的内容是这样的，app:startDestination=&quot;@+id/launcher_home&quot;规定了起始 fragment 是 StartFragment，然后这个 fragment 有一个 action，里边的 attribute app:destination=&quot;@id/end_dest&quot;规定了要跳转到的 fragment 是 EndFragment。可是看到这里问题就来了，采取这种方式要怎么实现两个 fragment 之间的通信呢？这个需求却是必要的，Google 不会没有想到这点的吧 123456789101112131415161718&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; app:startDestination=&quot;@+id/launcher_home&quot;&gt; &lt;fragment android:id=&quot;@+id/launcher_home&quot; android:label=&quot;Home&quot; android:name=&quot;com.android.samples.arch.componentsbasicsample.StartFragment&quot; &gt; &lt;action android:id=&quot;@+id/end_action&quot; app:destination=&quot;@id/end_dest&quot;/&gt; &lt;/fragment&gt; &lt;fragment android:id=&quot;@+id/end_dest&quot; android:label=&quot;End&quot; android:name=&quot;com.android.samples.arch.componentsbasicsample.EndFragment&quot; &gt; &lt;/fragment&gt;&lt;/navigation&gt; 总之先去看 StartFragment吧，主要的逻辑都在 onCreateActivity 中，这个用来实例化 viewModel 的 ViewModelProviders目测是 Jetpack 中的。view?.let { Navigation.findNavController(it).navigate(R.id.end_action) }，就是点击之后执行的操作，这里执行了 nav_graph中 定义的 end_action 1234567891011121314151617override fun onActivityCreated(savedInstanceState: Bundle?) &#123; super.onActivityCreated(savedInstanceState) // Obtain ViewModel from ViewModelProviders, using this fragment as LifecycleOwner. viewModel = ViewModelProviders.of(this).get(StartViewModel::class.java) // Observe data on the ViewModel, exposed as a LiveData viewModel.data.observe(this, Observer &#123; data -&gt; // Set the text exposed by the LiveData view?.findViewById&lt;TextView&gt;(R.id.text)?.text = data &#125;) // Set up a click listener on the login button view?.findViewById&lt;Button&gt;(R.id.navigate_bt)?.setOnClickListener &#123; // Navigate to the login destination view?.let &#123; Navigation.findNavController(it).navigate(R.id.end_action) &#125; &#125; &#125; 而这个 StartViewModel ，只是简单的定义了一个字符串的样子 123456789class StartViewModel : ViewModel() &#123; private val _data = MutableLiveData&lt;String&gt;() val data: LiveData&lt;String&gt; get() = _data init &#123; _data.value = &quot;Hello, world!&quot; &#125;&#125; EndFragment跟StartFragment如出一辙，没什么可看的，这个 demo 就看完了，唯一疑问就是这种使用 xml 的跳转方式要如何实现数据传递 于是接着看下一篇 | 译文，里边所说道的 单一数据源真的让我学到很多。最重要的是我发现一个好东西叫做LiveData LiveData 是可观察数据（observable data）的容器，它允许您应用中的组件观察 LiveData 对象的变化，而毋须创建对其的显式强依赖。LiveData 还会根据您的应用组件（如：activity、fragment、服务，等等）的生命周期状态，采取恰当的措施防止内存泄漏。LiveData 非常暖心的一点是：它洞悉组件的生命周期，因而能在引用（references）不再有用时自动清理掉它们。每当用户数据被更新的时候，onChanged) 回调函数都会被触发，从而更新 UI。 也就是 StartFragment中这样的写法实际上可以保证 data 变化时 TextView 中的内容也会跟着更新 1234viewModel.data.observe(this, Observer &#123; data -&gt; // Set the text exposed by the LiveData view?.findViewById&lt;TextView&gt;(R.id.text)?.text = data&#125;) 这个很像 Rxjava，但比 Rxjava 多出的特性是，LiveData 会自己管理生命周期。我不禁想到昨天看 iosched 中的使用方法，里边好多的逻辑处理的触发机制都是这样的，而这样一套机制，是一个叫做 android.arch.lifecycle 的 package中的东西 1234567open class OnboardingCompleteActionUseCase @Inject constructor( private val preferenceStorage: PreferenceStorage) : UseCase&lt;Boolean, Unit&gt;() &#123; override fun execute(completed: Boolean) &#123; preferenceStorage.onboardingCompleted = completed &#125;&#125; 123456onboardingViewModel.navigateToMainActivity.observe(this, EventObserver &#123; requireActivity().run &#123; startActivity(Intent(this, MainActivity::class.java)) finish() &#125; &#125;) 结论LiveData 看起来很有用途，而 Navigation 就很迷了，采取 xml 方式看不出有什么优势而且我还不知道它要如何传递数据。还有关于 androidx,Android Architecture Components,Jetpack这几个概念，它们的关系是 Jetpack 包含 Android Architecture Components,Jetpack 包含androidx 参考：[Jetpack 官网] (https://developer.android.com/jetpack/) | Android Architecture Components 官网 |AndroidX 官网 Android architecture components are part of Android Jetpack. Jetpack comprises the androidx.* package libraries, unbundled from the platform APIs. AndroidX is the open-source project that the Android team uses to develop, test, package, version and release libraries within Jetpack. 第三天(2018/10/17)今天的方向是调研宏观架构，而不是具体的框架了。已知有 MVP、MVVM、Clean这三种，不考虑MVC。我是不太熟悉 MVVM 的，看介绍说MVVM比MVP多出了数据绑定，vue就是使用MVVM架构的，这样理解起来就容易了，虽然我没有在 Android 开发中用过 MMVM，但是我有偷偷用过一点 vue。那么我第一天看的 iosched，实际上就是一种 MVVM 的实践，我曾一度认为那是 MVP 。而第二天看到的 Jetpack中的 LiveData，就是数据绑定的具体实现。Google 关键字Android 数据绑定,搜出来的全部都是 Google 官方的 DataBinding框架，但是DataBinding是和 xml 结合使用的，LiveData是在 Java 代码层实现绑定的，后者显然更加灵活。而 Clean，我是真的一点都不知道 Clean 是怎样的架构，研究了一下是四层单向依赖的独立分层，这样确实是降低耦合了，但是感觉写起来要创建好多类好复杂好费劲 我又搜到一个介绍 Android 架构的英文文章，我真是越来越不懂了，居然还有叫做 MVI(Model-View-Intent),VIPER(View Interactor Presenter Entity Routing)的东西，而且 Redux和 FLUX 什么的不本应该是前端的东西吗？我怎么没见到哪个 Android 原生 App 说是用 Redux 架构的。但是写到最后，他推荐的还是 Google 那套 MVVM。翻到最后还是这么写的：The current recommendation: Google’s Android Architecture Components — LiveData (and ViewModel) 来源：Lessons Learned Implementing Redux on Android When a lot of people think of the Redux architecture they think of the web. This isn’t really surprising because it originated and gained a lot of popularity there. At its core, it’s a simple application architecture that describes a system of organizing and manipulating state. This means that it can be applied to any kind of application development including mobile. 那么还是手动实践一下 Jetpack 吧 第四天(2018/10/18)简述昨天已经用 Jetpack 做了个简单的 Demo，但我嫌这个 Demo 太简单了，它相当于没有 Model 层，于是今天打算把整个流程都走一遍，实现一个这样的场景：从网络获取列表页并实现下拉加载更多。这下就涉及到 Model 层的数据获取以及缓存的部分了。而 Model 层的数据，在 Jetpack 下都是 LiveData，它们对此也有一个 ORM 框架 叫做 Room。据说这个框架本身就支持了 LiveData Room 框架然后我发现了 Google Codelabs，一个可以直接下载 Demo 学习的 Google 官方教程网站，上面有关于结合 Jetpack 讲的 教程，于是借此了解了一下 Room 查询操作貌似必须使用 SQL 语句，这点不太友好。为什么 Android 上没有像 Java 后端 Jpa 一样的东西呢？所有东西都可以选择以写 Java 代码或写 SQL 来完成，而且 IDE 上还有插件一键根据整个数据库的表结构生成 Dao 和 Entity 123456@Daointerface WordDao &#123; @Query(&quot;SELECT * from word_table ORDER BY word ASC&quot;) fun getAllWords(): List&lt;Word&gt;&#125; insert，update，delete可以直接使用标签，也可以使用 SQL 语句 123456789101112131415@Daointerface WordDao &#123; @Insert fun insert(word: Word) @Update fun update(word: Word) @Delete fun delete(word: Word) @Query(&quot;DELETE FROM word_table&quot;) fun deleteAll()&#125; 可以直接查询出 LiveData，这是 Room 独有的特点了 参考：Android Room with a View - Kotlin If you use LiveData independently from Room, you have to manage updating the data. LiveData has no publicly available methods to update the stored data. 123456@Daointerface WordDao &#123; @Query(&quot;SELECT * from word_table ORDER BY word ASC&quot;) fun getAllWords(): LiveData&lt;List&lt;Word&gt;&gt;&#125; 接着我看到一篇对比 ORM 框架的文章，发现 ROOM 的性能相对而言并不是很好，也不支持加密，但是优点在于轻量。只占包体积的 50kb，方法数 300 左右。参考文章：Room，Realm, ObjectBox 你选择哪个？(下面图表的纵轴单位我猜是一种速度单位？因为文章的结论是 ObjectBox 性能最优) ObjectBox 貌似真的有点自信有点膨胀，他们甚至有一个这样的开源项目，专门用来把自家 ORM 和其他产品做性能对比并生成图表","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.valorachen.club/tags/Android/"}]},{"title":"网易云音乐API Part1(登录，用户，歌单)","slug":"Github-Issues-API","date":"2018-07-07T13:25:43.000Z","updated":"2018-07-07T13:59:08.681Z","comments":true,"path":"2018/07/07/Github-Issues-API/","link":"","permalink":"http://blog.valorachen.club/2018/07/07/Github-Issues-API/","excerpt":"","text":"测试相关仓库地址：https://github.com/ChenViViPage/test Issues查询某个仓库的Issues链接https://api.github.com/repos/ChenViViPage/test/issues 参数 Name Type Description milestone integeror string If an integer is passed, it should refer to a milestone by its numberfield. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned. state string Indicates the state of the issues to return. Can be either open, closed, or all. Default: open assignee string Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user. creator string The user that created the issue. mentioned string A user that’s mentioned in the issue. labels string A list of comma separated label names. Example: bug,ui,@high sort string What to sort results by. Can be either created, updated, comments. Default: created direction string The direction of the sort. Can be either asc or desc. Default: desc since string Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. 返回数据123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112[ &#123; &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2&quot;, &quot;repository_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test&quot;, &quot;labels_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/labels&#123;/name&#125;&quot;, &quot;comments_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/comments&quot;, &quot;events_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/events&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage/test/issues/2&quot;, &quot;id&quot;: 338796546, &quot;node_id&quot;: &quot;MDU6SXNzdWUzMzg3OTY1NDY=&quot;, &quot;number&quot;: 2, &quot;title&quot;: &quot;亲手打造萌萌哒的新键盘&quot;, &quot;user&quot;: &#123; &quot;login&quot;: &quot;ChenViViPage&quot;, &quot;id&quot;: 38697453, &quot;node_id&quot;: &quot;MDQ6VXNlcjM4Njk3NDUz&quot;, &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/38697453?v=4&quot;, &quot;gravatar_id&quot;: &quot;&quot;, &quot;url&quot;: &quot;https://api.github.com/users/ChenViViPage&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage&quot;, &quot;followers_url&quot;: &quot;https://api.github.com/users/ChenViViPage/followers&quot;, &quot;following_url&quot;: &quot;https://api.github.com/users/ChenViViPage/following&#123;/other_user&#125;&quot;, &quot;gists_url&quot;: &quot;https://api.github.com/users/ChenViViPage/gists&#123;/gist_id&#125;&quot;, &quot;starred_url&quot;: &quot;https://api.github.com/users/ChenViViPage/starred&#123;/owner&#125;&#123;/repo&#125;&quot;, &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/ChenViViPage/subscriptions&quot;, &quot;organizations_url&quot;: &quot;https://api.github.com/users/ChenViViPage/orgs&quot;, &quot;repos_url&quot;: &quot;https://api.github.com/users/ChenViViPage/repos&quot;, &quot;events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/events&#123;/privacy&#125;&quot;, &quot;received_events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/received_events&quot;, &quot;type&quot;: &quot;User&quot;, &quot;site_admin&quot;: false &#125;, &quot;labels&quot;: [ &#123; &quot;id&quot;: 985475685, &quot;node_id&quot;: &quot;MDU6TGFiZWw5ODU0NzU2ODU=&quot;, &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/labels/%E7%A1%AC%E4%BB%B6&quot;, &quot;name&quot;: &quot;硬件&quot;, &quot;color&quot;: &quot;f29668&quot;, &quot;default&quot;: false &#125; ], &quot;state&quot;: &quot;open&quot;, &quot;locked&quot;: false, &quot;assignee&quot;: null, &quot;assignees&quot;: [ ], &quot;milestone&quot;: null, &quot;comments&quot;: 0, &quot;created_at&quot;: &quot;2018-07-06T03:53:08Z&quot;, &quot;updated_at&quot;: &quot;2018-07-06T03:57:14Z&quot;, &quot;closed_at&quot;: null, &quot;author_association&quot;: &quot;OWNER&quot;, &quot;body&quot;: &quot;---\\r\\ntitle: 亲手打造萌萌哒的新键盘\\r\\ndate: 2017-04-10 21:39:33\\r\\ntags: [硬件]\\r\\n---\\r\\n\\r\\n## 前言\\r\\n\\r\\n这是一个完全不懂硬件的菜鸟一步一步组装GH60键盘的故事。\\r\\n\\r\\n之前那个ThinkPad坏得不能再写代码了，于是我换了新电脑，但是不习惯战神的键盘，太硬了好难摁下去，还是ThinkPad的键盘爽，但是目前也只好再买一个键盘，于是去网上了解什么键盘好用。\\r\\n\\r\\n知乎上有人推荐GH60，头一次知道还可以自己组装键盘，而且是开源的，感觉非常有意思啊，于是就下手了。\\r\\n\\r\\n## 组件\\r\\n\\r\\n1. PCB（ Printed Circuit Board），中文名称为印制电路板。这里是指键盘的主板，貌似有带底灯和无底灯两种PCB可选。\\r\\n2. LED底灯。可选项，如果不需要底灯就不需要买。\\r\\n3. 轴。机械键盘之所以为机械键盘的原因。\\r\\n4. 定位板。没有这个的话，到时候焊轴会焊歪，别问我怎么知道的，文章后面会有详细反例。但是好像也有老司机不喜欢用定位板干脆去掉定位板的。\\r\\n5. 卫星轴一套。用于固定比较长的键，如空格键，enter键等，都需要卫星轴来支撑。\\r\\n6. MiNi USB数据线一条。用于连接电脑和键盘。\\r\\n7. 键盘外壳。\\r\\n8. 键帽。真贵啊。\\r\\n\\r\\n## 开始组装\\r\\n\\r\\n### 刷固件\\r\\n\\r\\n这一步卖家写得挺详细，就不多说了\\r\\n\\r\\n[https://mp.weixin.qq.com/s/N_kdfWUl1c_9EscuJ_nMoA](https://mp.weixin.qq.com/s/N_kdfWUl1c_9EscuJ_nMoA)\\r\\n\\r\\n### 装卫星轴\\r\\n\\r\\n卫星轴塑料部分由两部分组成，暂且叫做A部分和B部分\\r\\n\\r\\n![](http://i4.buimg.com/567571/f598a40101ed0a79.png)\\r\\n\\r\\n首先，我们需要把B怼进A里边，然而B的两侧和A的两侧的构造都是不同的，应该朝什么方向呢？这里有一个辨别方法。\\r\\n\\r\\n如下图，A的两端一端是圆型，一端是角型。画红框的那一端就是圆型。\\r\\n\\r\\n![](http://i2.muimg.com/567571/616d3da58abe6993.png)\\r\\n\\r\\n如下图，B的一端是上面有横梁的。\\r\\n\\r\\n![](http://i1.piimg.com/567571/f1f173decdb36b65.png)\\r\\n\\r\\n将A的圆型那一端与B的有横梁端朝同一面套进去就行。然后，两个一个对穿上钢丝\\r\\n\\r\\n![](http://i2.muimg.com/567571/0833244fcdb42994.png)\\r\\n\\r\\n最后，把卫星轴装到PCB上。圆型端对着大孔，角型端对着小孔。角型端会比小孔稍微大一点，需要用力摁下去。\\r\\n\\r\\n![](http://i1.piimg.com/567571/a29732ca539c01b2.jpg)\\r\\n\\r\\n一共有5对卫星轴需要装配\\r\\n\\r\\n![](http://i4.buimg.com/567571/e32f6b00df3420fb.png)\\r\\n\\r\\n正确安装好的卫星轴，应该是紧贴PCB的。不然说明你没有将卫星轴紧摁进去。\\r\\n\\r\\nPCB倒立时卫星轴的B部分应该是自然下垂的，不然就说明你A与B部分装反了方向，换方向重新安装即可。\\r\\n\\r\\n![](http://i2.muimg.com/567571/04a81e1fa6a43680.png)\\r\\n\\r\\n### 装轴\\r\\n\\r\\n如果你不适用定位板，你可能会焊成这个样子。仔细一看，就能发现轴焊得歪歪扭扭。所以对于新手，还是用定位板的好。先把轴固定在定位板上，然后盖到PCB上，然后再焊。\\r\\n\\r\\n![](http://i4.buimg.com/567571/3e7f1d724b85da4e.png)\\r\\n\\r\\n需要注意的是，有些地方一个键位可以以有两种位置可以选择，这可不能随便瞎选一个，最好把键帽套在轴上试一试这个位置是否适合你的键帽然后再焊，不然可能会出现焊完后套键帽，几个键帽挤在一起根本没办法把键按下去的问题。\\r\\n\\r\\n![](http://i2.muimg.com/567571/773ea8f9d25d8e09.png)\\r\\n\\r\\n这是焊好所有的轴之后的样子\\r\\n\\r\\n![](http://i2.muimg.com/567571/b01b640e56d159ff.png)\\r\\n\\r\\n先别急着做下一步，赶紧插上键盘试试每个键是否好用吧。\\r\\n\\r\\n### 装底灯，装键帽\\r\\n\\r\\n注意区分正负极，LED灯长的那一端是正极。\\r\\n\\r\\n当你在PCB正面装好灯，准备翻去反面焊的时候，灯会往下掉，直到碰到桌面。千万不能这就开焊，由于PCB反面放置于桌面时，支撑它的是轴，那么现在灯的顶端和轴的顶端是在同一水平面的。而当键按下去的时候，键帽会忘下压，这轴时也忘下压，而灯不会和轴一样弹性，于是会阻止你按下这个键。\\r\\n\\r\\n针对上面提到的问题，我有个可行方案。先把LED灯的正负极插在PCB上，然后装上键帽，拿焊锡的手把PCB压住，确保这个键是按下状态，然后开焊。一定要确保这个键是按下去的状态下才焊灯，这很重要，不然还是可能出现上面的状况。\\r\\n\\r\\n### 装外壳\\r\\n\\r\\n如果你想刷配列，不必刷完配列再装外壳，装好外壳后，你会发现键盘背面有个的孔正好可以按到重置键。\\r\\n\\r\\n![](http://i4.buimg.com/567571/2cdb405c0e845e0f.png)\\r\\n\\r\\n### 刷配列\\r\\n\\r\\n刷配列可以说是开源键盘最让人心动的原因之一。想一想，输入默认账号密码，打开某个软件，或者某个键的功能让你不满，现在这些功能只需要你通过编程告诉键盘你想让哪个键做什么事，键盘就能如你所愿，这简直太棒了。\\r\\n\\r\\n首先，打开这个网站[http://yang.tkg.io/ydkb/](http://yang.tkg.io/ydkb/)\\r\\n\\r\\n点击【读取KeyMao】来读取你键盘现在的配列\\r\\n\\r\\n![](http://i1.piimg.com/567571/afded45a8f204712.png)\\r\\n\\r\\n点击【上放区域】中你想修改的键，然后到【下方区域】选择你希望这个键位达到的功能。\\r\\n\\r\\n![](http://i2.muimg.com/567571/ff25164056ee6e2a.png)\\r\\n\\r\\n人如果你希望你的键盘有多个配列，点击【上方区域】中的Tab来切换到另一个配列并进行编辑。\\r\\n![](http://i2.muimg.com/567571/b84dcfd38c4505c6.png)\\r\\n\\r\\n现在你已经编辑了多个配列了。怎么告诉键盘你要使用哪个配列呢？当然是通过按键了。所以，下一步就是设置Fn键。\\r\\n\\r\\n\\r\\n**因为我的怠惰所以断更了额，等勤勉的再补回来......**\\r\\n&quot; &#125;, &#123; &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/1&quot;, &quot;repository_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test&quot;, &quot;labels_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/1/labels&#123;/name&#125;&quot;, &quot;comments_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/1/comments&quot;, &quot;events_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/1/events&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage/test/issues/1&quot;, &quot;id&quot;: 338794067, &quot;node_id&quot;: &quot;MDU6SXNzdWUzMzg3OTQwNjc=&quot;, &quot;number&quot;: 1, &quot;title&quot;: &quot;排序算法&quot;, &quot;user&quot;: &#123; &quot;login&quot;: &quot;ChenViViPage&quot;, &quot;id&quot;: 38697453, &quot;node_id&quot;: &quot;MDQ6VXNlcjM4Njk3NDUz&quot;, &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/38697453?v=4&quot;, &quot;gravatar_id&quot;: &quot;&quot;, &quot;url&quot;: &quot;https://api.github.com/users/ChenViViPage&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage&quot;, &quot;followers_url&quot;: &quot;https://api.github.com/users/ChenViViPage/followers&quot;, &quot;following_url&quot;: &quot;https://api.github.com/users/ChenViViPage/following&#123;/other_user&#125;&quot;, &quot;gists_url&quot;: &quot;https://api.github.com/users/ChenViViPage/gists&#123;/gist_id&#125;&quot;, &quot;starred_url&quot;: &quot;https://api.github.com/users/ChenViViPage/starred&#123;/owner&#125;&#123;/repo&#125;&quot;, &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/ChenViViPage/subscriptions&quot;, &quot;organizations_url&quot;: &quot;https://api.github.com/users/ChenViViPage/orgs&quot;, &quot;repos_url&quot;: &quot;https://api.github.com/users/ChenViViPage/repos&quot;, &quot;events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/events&#123;/privacy&#125;&quot;, &quot;received_events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/received_events&quot;, &quot;type&quot;: &quot;User&quot;, &quot;site_admin&quot;: false &#125;, &quot;labels&quot;: [ &#123; &quot;id&quot;: 985475825, &quot;node_id&quot;: &quot;MDU6TGFiZWw5ODU0NzU4MjU=&quot;, &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/labels/%E7%AE%97%E6%B3%95&quot;, &quot;name&quot;: &quot;算法&quot;, &quot;color&quot;: &quot;bc3138&quot;, &quot;default&quot;: false &#125; ], &quot;state&quot;: &quot;open&quot;, &quot;locked&quot;: false, &quot;assignee&quot;: null, &quot;assignees&quot;: [ ], &quot;milestone&quot;: null, &quot;comments&quot;: 0, &quot;created_at&quot;: &quot;2018-07-06T03:35:08Z&quot;, &quot;updated_at&quot;: &quot;2018-07-06T03:56:55Z&quot;, &quot;closed_at&quot;: null, &quot;author_association&quot;: &quot;OWNER&quot;, &quot;body&quot;: &quot;---\\r\\ntitle: 排序算法\\r\\ndate: 2017-11-08 21:54:51\\r\\ntags: [复习]\\r\\n---\\r\\n\\r\\n## 冒泡排序\\r\\n\\r\\n```\\r\\n#include&lt;stdio.h&gt;\\r\\n\\r\\nvoid bubble_sort(int a[], int n);\\r\\n\\r\\nint main()&#123;\\r\\n\\tint a[] = &#123;50,40,63,20,98,41,65,78,21,34&#125;;\\r\\n\\tsort2(a,10);\\r\\n\\tfor(int i = 0;i &lt; 10 ;i ++)\\tprintf(\\&quot; %d\\&quot;,a[i]);\\r\\n return 0;\\r\\n&#125;\\r\\n\\r\\nvoid bubble_sort(int a[], int n)&#123;\\r\\n\\tfor(int i=0;i&lt;n-1;i++)&#123;\\r\\n\\t\\tfor(int j=0;j&lt;n-i;j++)&#123;\\r\\n\\t\\t\\tif(a[j]&gt;a[j+1])&#123;\\r\\n\\t\\t\\t\\tint temp=a[j];\\r\\n\\t\\t\\t\\ta[j]=a[j+1];\\r\\n\\t\\t\\t\\ta[j+1]=temp;\\r\\n\\t\\t\\t&#125;\\r\\n\\t\\t&#125;\\r\\n\\t&#125;\\r\\n&#125;\\r\\n```\\r\\n\\r\\n## 选择排序\\r\\n\\r\\n```\\r\\n#include &lt;stdio.h&gt;\\r\\n\\r\\nvoid insert_sort(int a[], int n);\\r\\n\\r\\nint main()&#123;\\r\\n int a[]=&#123;32,12,7, 78, 23,45&#125;;\\r\\n insert_sort(a,6);\\r\\n for(int i=0; i&lt;6; i++) printf(\\&quot; %d\\&quot;, a[i]);\\r\\n return 0;\\r\\n&#125;\\r\\n\\r\\nvoid insert_sort(int a[], int n) &#123;\\r\\n for (int i=0; i&lt;n; i++) &#123;\\r\\n int k = i;\\r\\n for (int j=i+1; j&lt;n; j++)\\r\\n if (a[k]&gt;a[j]) k=j;\\r\\n if (i!=k) &#123;\\r\\n int tmp=a[i];\\r\\n a[i]=a[k];\\r\\n a[k]=tmp;\\r\\n &#125;\\r\\n &#125;\\r\\n&#125;\\r\\n```\\r\\n\\r\\n## 快速排序\\r\\n\\r\\n```\\r\\n#include &lt;stdio.h&gt;\\r\\nvoid Merge(int sourceArr[],int tempArr[], int startIndex, int midIndex, int endIndex)&#123;\\r\\n\\tint i = startIndex, j=midIndex+1, k = startIndex;\\r\\n\\twhile(i!=midIndex+1 &amp;&amp; j!=endIndex+1)&#123;\\r\\n if(sourceArr[i] &gt; sourceArr[j]) tempArr[k++] = sourceArr[j++];\\r\\n\\t else tempArr[k++] = sourceArr[i++];\\r\\n\\t&#125;\\r\\n\\twhile(i != midIndex+1) tempArr[k++] = sourceArr[i++];\\r\\n\\twhile(j != endIndex+1) tempArr[k++] = sourceArr[j++];\\r\\n\\tfor(i=startIndex; i&lt;=endIndex; i++) sourceArr[i] = tempArr[i];\\r\\n&#125;\\r\\n\\r\\nvoid MergeSort(int sourceArr[], int tempArr[], int startIndex, int endIndex)&#123;\\r\\n\\tint midIndex;\\r\\n\\tif(startIndex &lt; endIndex)&#123;\\r\\n\\t\\tmidIndex = (startIndex + endIndex) / 2;\\r\\n\\t\\tMergeSort(sourceArr, tempArr, startIndex, midIndex);\\r\\n\\t\\tMergeSort(sourceArr, tempArr, midIndex+1, endIndex);\\r\\n\\t\\tMerge(sourceArr, tempArr, startIndex, midIndex, endIndex);\\r\\n\\t&#125;\\r\\n&#125;\\r\\n\\r\\nint main()&#123;\\r\\n\\tint a[8] = &#123;50, 10, 20, 30, 70, 40, 80, 60&#125;;\\r\\n\\tint i, b[8];\\r\\n\\tMergeSort(a, b, 0, 7);\\r\\n for(i=0; i&lt;8; i++) printf(\\&quot;%d \\&quot;, a[i]);\\r\\n\\treturn 0;\\r\\n&#125;\\r\\n```\\r\\n## 并归排序\\r\\n\\r\\n```\\r\\n#include &lt;stdio.h&gt;\\r\\n\\r\\nvoid Merge(int a[],int b[], int start, int mid, int end);\\r\\nvoid MergeSort(int a[], int b[], int start, int end);\\r\\n\\r\\nint main()&#123;\\r\\n\\tint a[8] = &#123;50, 10, 30, 20, 70, 40, 80, 60&#125;;\\r\\n\\tint i, b[8];\\r\\n\\tMergeSort(a,b,0,7);\\r\\n for(i=0;i&lt;8;i++) printf(\\&quot;%d \\&quot;,a[i]);\\r\\n\\treturn 0;\\r\\n&#125;\\r\\n\\r\\nvoid MergeSort(int a[], int b[], int start, int end)&#123;\\r\\n int mid;\\r\\n if(start&lt;end)&#123;\\r\\n mid = (start+end)/2;\\r\\n MergeSort(a,b,start,mid);\\r\\n MergeSort(a,b,mid+1,end);\\r\\n Merge(a,b,start,mid,end);\\r\\n &#125;\\r\\n&#125;\\r\\n\\r\\nvoid Merge(int a[],int b[], int start, int mid, int end)&#123;\\r\\n int i=start, j=mid+1, k=start;\\r\\n while(i!=mid+1 &amp;&amp; j!=end+1)&#123;\\r\\n if(a[i]&gt;a[j]) b[k++]=a[j++];\\r\\n else b[k++]=a[i++];\\r\\n &#125;\\r\\n while(i!=mid+1) b[k++]=a[i++];\\r\\n while(j!=end+1) b[k++]=a[j++];\\r\\n for(i=start;i&lt;=end;i++) a[i]=b[i];\\r\\n&#125;\\r\\n\\r\\n```\\r\\n&quot; &#125;] 查询单条Issue链接https://api.github.com/repos/ChenViViPage/test/issues/2 参数 Name Type Description milestone integeror string If an integer is passed, it should refer to a milestone by its numberfield. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned. state string Indicates the state of the issues to return. Can be either open, closed, or all. Default: open assignee string Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user. creator string The user that created the issue. mentioned string A user that’s mentioned in the issue. labels string A list of comma separated label names. Example: bug,ui,@high sort string What to sort results by. Can be either created, updated, comments. Default: created direction string The direction of the sort. Can be either asc or desc. Default: desc since string Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. 返回数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2&quot;, &quot;repository_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test&quot;, &quot;labels_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/labels&#123;/name&#125;&quot;, &quot;comments_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/comments&quot;, &quot;events_url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/issues/2/events&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage/test/issues/2&quot;, &quot;id&quot;: 338796546, &quot;node_id&quot;: &quot;MDU6SXNzdWUzMzg3OTY1NDY=&quot;, &quot;number&quot;: 2, &quot;title&quot;: &quot;亲手打造萌萌哒的新键盘&quot;, &quot;user&quot;: &#123; &quot;login&quot;: &quot;ChenViViPage&quot;, &quot;id&quot;: 38697453, &quot;node_id&quot;: &quot;MDQ6VXNlcjM4Njk3NDUz&quot;, &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/38697453?v=4&quot;, &quot;gravatar_id&quot;: &quot;&quot;, &quot;url&quot;: &quot;https://api.github.com/users/ChenViViPage&quot;, &quot;html_url&quot;: &quot;https://github.com/ChenViViPage&quot;, &quot;followers_url&quot;: &quot;https://api.github.com/users/ChenViViPage/followers&quot;, &quot;following_url&quot;: &quot;https://api.github.com/users/ChenViViPage/following&#123;/other_user&#125;&quot;, &quot;gists_url&quot;: &quot;https://api.github.com/users/ChenViViPage/gists&#123;/gist_id&#125;&quot;, &quot;starred_url&quot;: &quot;https://api.github.com/users/ChenViViPage/starred&#123;/owner&#125;&#123;/repo&#125;&quot;, &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/ChenViViPage/subscriptions&quot;, &quot;organizations_url&quot;: &quot;https://api.github.com/users/ChenViViPage/orgs&quot;, &quot;repos_url&quot;: &quot;https://api.github.com/users/ChenViViPage/repos&quot;, &quot;events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/events&#123;/privacy&#125;&quot;, &quot;received_events_url&quot;: &quot;https://api.github.com/users/ChenViViPage/received_events&quot;, &quot;type&quot;: &quot;User&quot;, &quot;site_admin&quot;: false &#125;, &quot;labels&quot;: [ &#123; &quot;id&quot;: 985475685, &quot;node_id&quot;: &quot;MDU6TGFiZWw5ODU0NzU2ODU=&quot;, &quot;url&quot;: &quot;https://api.github.com/repos/ChenViViPage/test/labels/%E7%A1%AC%E4%BB%B6&quot;, &quot;name&quot;: &quot;硬件&quot;, &quot;color&quot;: &quot;f29668&quot;, &quot;default&quot;: false &#125; ], &quot;state&quot;: &quot;open&quot;, &quot;locked&quot;: false, &quot;assignee&quot;: null, &quot;assignees&quot;: [ ], &quot;milestone&quot;: null, &quot;comments&quot;: 0, &quot;created_at&quot;: &quot;2018-07-06T03:53:08Z&quot;, &quot;updated_at&quot;: &quot;2018-07-06T03:57:14Z&quot;, &quot;closed_at&quot;: null, &quot;author_association&quot;: &quot;OWNER&quot;, &quot;body&quot;: &quot;---\\r\\ntitle: 亲手打造萌萌哒的新键盘\\r\\ndate: 2017-04-10 21:39:33\\r\\ntags: [硬件]\\r\\n---\\r\\n\\r\\n## 前言\\r\\n\\r\\n这是一个完全不懂硬件的菜鸟一步一步组装GH60键盘的故事。\\r\\n\\r\\n之前那个ThinkPad坏得不能再写代码了，于是我换了新电脑，但是不习惯战神的键盘，太硬了好难摁下去，还是ThinkPad的键盘爽，但是目前也只好再买一个键盘，于是去网上了解什么键盘好用。\\r\\n\\r\\n知乎上有人推荐GH60，头一次知道还可以自己组装键盘，而且是开源的，感觉非常有意思啊，于是就下手了。\\r\\n\\r\\n## 组件\\r\\n\\r\\n1. PCB（ Printed Circuit Board），中文名称为印制电路板。这里是指键盘的主板，貌似有带底灯和无底灯两种PCB可选。\\r\\n2. LED底灯。可选项，如果不需要底灯就不需要买。\\r\\n3. 轴。机械键盘之所以为机械键盘的原因。\\r\\n4. 定位板。没有这个的话，到时候焊轴会焊歪，别问我怎么知道的，文章后面会有详细反例。但是好像也有老司机不喜欢用定位板干脆去掉定位板的。\\r\\n5. 卫星轴一套。用于固定比较长的键，如空格键，enter键等，都需要卫星轴来支撑。\\r\\n6. MiNi USB数据线一条。用于连接电脑和键盘。\\r\\n7. 键盘外壳。\\r\\n8. 键帽。真贵啊。\\r\\n\\r\\n## 开始组装\\r\\n\\r\\n### 刷固件\\r\\n\\r\\n这一步卖家写得挺详细，就不多说了\\r\\n\\r\\n[https://mp.weixin.qq.com/s/N_kdfWUl1c_9EscuJ_nMoA](https://mp.weixin.qq.com/s/N_kdfWUl1c_9EscuJ_nMoA)\\r\\n\\r\\n### 装卫星轴\\r\\n\\r\\n卫星轴塑料部分由两部分组成，暂且叫做A部分和B部分\\r\\n\\r\\n![](http://i4.buimg.com/567571/f598a40101ed0a79.png)\\r\\n\\r\\n首先，我们需要把B怼进A里边，然而B的两侧和A的两侧的构造都是不同的，应该朝什么方向呢？这里有一个辨别方法。\\r\\n\\r\\n如下图，A的两端一端是圆型，一端是角型。画红框的那一端就是圆型。\\r\\n\\r\\n![](http://i2.muimg.com/567571/616d3da58abe6993.png)\\r\\n\\r\\n如下图，B的一端是上面有横梁的。\\r\\n\\r\\n![](http://i1.piimg.com/567571/f1f173decdb36b65.png)\\r\\n\\r\\n将A的圆型那一端与B的有横梁端朝同一面套进去就行。然后，两个一个对穿上钢丝\\r\\n\\r\\n![](http://i2.muimg.com/567571/0833244fcdb42994.png)\\r\\n\\r\\n最后，把卫星轴装到PCB上。圆型端对着大孔，角型端对着小孔。角型端会比小孔稍微大一点，需要用力摁下去。\\r\\n\\r\\n![](http://i1.piimg.com/567571/a29732ca539c01b2.jpg)\\r\\n\\r\\n一共有5对卫星轴需要装配\\r\\n\\r\\n![](http://i4.buimg.com/567571/e32f6b00df3420fb.png)\\r\\n\\r\\n正确安装好的卫星轴，应该是紧贴PCB的。不然说明你没有将卫星轴紧摁进去。\\r\\n\\r\\nPCB倒立时卫星轴的B部分应该是自然下垂的，不然就说明你A与B部分装反了方向，换方向重新安装即可。\\r\\n\\r\\n![](http://i2.muimg.com/567571/04a81e1fa6a43680.png)\\r\\n\\r\\n### 装轴\\r\\n\\r\\n如果你不适用定位板，你可能会焊成这个样子。仔细一看，就能发现轴焊得歪歪扭扭。所以对于新手，还是用定位板的好。先把轴固定在定位板上，然后盖到PCB上，然后再焊。\\r\\n\\r\\n![](http://i4.buimg.com/567571/3e7f1d724b85da4e.png)\\r\\n\\r\\n需要注意的是，有些地方一个键位可以以有两种位置可以选择，这可不能随便瞎选一个，最好把键帽套在轴上试一试这个位置是否适合你的键帽然后再焊，不然可能会出现焊完后套键帽，几个键帽挤在一起根本没办法把键按下去的问题。\\r\\n\\r\\n![](http://i2.muimg.com/567571/773ea8f9d25d8e09.png)\\r\\n\\r\\n这是焊好所有的轴之后的样子\\r\\n\\r\\n![](http://i2.muimg.com/567571/b01b640e56d159ff.png)\\r\\n\\r\\n先别急着做下一步，赶紧插上键盘试试每个键是否好用吧。\\r\\n\\r\\n### 装底灯，装键帽\\r\\n\\r\\n注意区分正负极，LED灯长的那一端是正极。\\r\\n\\r\\n当你在PCB正面装好灯，准备翻去反面焊的时候，灯会往下掉，直到碰到桌面。千万不能这就开焊，由于PCB反面放置于桌面时，支撑它的是轴，那么现在灯的顶端和轴的顶端是在同一水平面的。而当键按下去的时候，键帽会忘下压，这轴时也忘下压，而灯不会和轴一样弹性，于是会阻止你按下这个键。\\r\\n\\r\\n针对上面提到的问题，我有个可行方案。先把LED灯的正负极插在PCB上，然后装上键帽，拿焊锡的手把PCB压住，确保这个键是按下状态，然后开焊。一定要确保这个键是按下去的状态下才焊灯，这很重要，不然还是可能出现上面的状况。\\r\\n\\r\\n### 装外壳\\r\\n\\r\\n如果你想刷配列，不必刷完配列再装外壳，装好外壳后，你会发现键盘背面有个的孔正好可以按到重置键。\\r\\n\\r\\n![](http://i4.buimg.com/567571/2cdb405c0e845e0f.png)\\r\\n\\r\\n### 刷配列\\r\\n\\r\\n刷配列可以说是开源键盘最让人心动的原因之一。想一想，输入默认账号密码，打开某个软件，或者某个键的功能让你不满，现在这些功能只需要你通过编程告诉键盘你想让哪个键做什么事，键盘就能如你所愿，这简直太棒了。\\r\\n\\r\\n首先，打开这个网站[http://yang.tkg.io/ydkb/](http://yang.tkg.io/ydkb/)\\r\\n\\r\\n点击【读取KeyMao】来读取你键盘现在的配列\\r\\n\\r\\n![](http://i1.piimg.com/567571/afded45a8f204712.png)\\r\\n\\r\\n点击【上放区域】中你想修改的键，然后到【下方区域】选择你希望这个键位达到的功能。\\r\\n\\r\\n![](http://i2.muimg.com/567571/ff25164056ee6e2a.png)\\r\\n\\r\\n人如果你希望你的键盘有多个配列，点击【上方区域】中的Tab来切换到另一个配列并进行编辑。\\r\\n![](http://i2.muimg.com/567571/b84dcfd38c4505c6.png)\\r\\n\\r\\n现在你已经编辑了多个配列了。怎么告诉键盘你要使用哪个配列呢？当然是通过按键了。所以，下一步就是设置Fn键。\\r\\n\\r\\n\\r\\n**因为我的怠惰所以断更了额，等勤勉的再补回来......**\\r\\n&quot;, &quot;closed_by&quot;: null&#125; 创建Issue链接https://api.github.com/repos/","categories":[],"tags":[{"name":"API","slug":"API","permalink":"http://blog.valorachen.club/tags/API/"},{"name":"Github","slug":"Github","permalink":"http://blog.valorachen.club/tags/Github/"}]},{"title":"记一些以前不知道的 Gradle 配置","slug":"记一些以前不知道的-Gradle-配置","date":"2018-06-25T03:33:16.000Z","updated":"2018-06-25T03:53:41.515Z","comments":true,"path":"2018/06/25/记一些以前不知道的-Gradle-配置/","link":"","permalink":"http://blog.valorachen.club/2018/06/25/记一些以前不知道的-Gradle-配置/","excerpt":"","text":"前言关于 Gradle 的使用，最多的操作就是导库，顶多也就配置过自动签名，因为实战上没这个需求自己也不太主动学。我一向都是用什么学什么，只要我需要做一个东西，跨技术甚至跨领域都没关系。可能今天想做 Android 程序后天就觉得有个想法需要学建站技术才能实现，然后打游戏需要 记 BOSS 技能 CD 时间又做了个桌面定时软件，我甚至接触过编曲。但是如果我不需要做的功能，可能就瞟一眼完事，不会去深入理解，超懒 发现了个官方文档：https://google.github.io/android-gradle-dsl/current/index.html 另外，Gradle 编译居然不是多线程的 ABI 管理我甚至都不知道这个东西的专有名词是叫 ABI 啥是 ABIABI 是 Application Binary Interface 的缩写 典型的 ABI 包含以下信息： 机器代码应使用的 CPU 指令集 运行时内存存储和加载的字节顺序 可执行二进制文件（例如程序和共享库）的格式，以及它们支持的内容类型（例如 .so） 用于解析内容与系统之间数据的各种约定。这些约定包括对齐限制，以及系统如何使用堆栈和在调用函数时注册 运行时可用于机器代码的函数符号列表 - 通常来自非常具体的库集 Android目前支持以下七种ABI：armeabi、armeabi-v7a、arm64-v8a、x86、x86_64、mips、mips64 arm64-v8a ,x86_64 这两个 ABI 应用并不是必须要做支持，手机一般都会提供自动兼容，像微信就是一个 armeabi打天下 在 Gradle 中配置应用支持的 ABI123ndk &#123; abiFilters &quot;armeabi&quot;&#125; 参考https://developer.android.com/ndk/guides/abis?hl=zh-cn https://blog.csdn.net/justFWD/article/details/49308199 Lint啥是 LintLint 在项目编译时会检查一些导致代码质量不佳的错误，比如 有个 layout 文件没有用到什么的 gradle 配置 Lint 提示1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950android &#123; lintOptions &#123; // true--关闭lint报告的分析进度 quiet true // true--错误发生后停止gradle构建 abortOnError false // true--只报告error ignoreWarnings true // true--忽略有错误的文件的全/绝对路径(默认是true) //absolutePaths true // true--检查所有问题点，包含其他默认关闭项 checkAllWarnings true // true--所有warning当做error warningsAsErrors true // 关闭指定问题检查 disable &apos;TypographyFractions&apos;,&apos;TypographyQuotes&apos; // 打开指定问题检查 enable &apos;RtlHardcoded&apos;,&apos;RtlCompat&apos;, &apos;RtlEnabled&apos; // 仅检查指定问题 check &apos;NewApi&apos;, &apos;InlinedApi&apos; // true--error输出文件不包含源码行号 noLines true // true--显示错误的所有发生位置，不截取 showAll true // 回退lint设置(默认规则) lintConfig file(&quot;default-lint.xml&quot;) // true--生成txt格式报告(默认false) textReport true // 重定向输出；可以是文件或&apos;stdout&apos; textOutput &apos;stdout&apos; // true--生成XML格式报告 xmlReport false // 指定xml报告文档(默认lint-results.xml) xmlOutput file(&quot;lint-report.xml&quot;) // true--生成HTML报告(带问题解释，源码位置，等) htmlReport true // html报告可选路径(构建器默认是lint-results.html ) htmlOutput file(&quot;lint-report.html&quot;) // true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建 checkReleaseBuilds true // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃 fatal &apos;NewApi&apos;, &apos;InlineApi&apos; // 指定问题的规则生成错误 error &apos;Wakelock&apos;, &apos;TextViewEdits&apos; // 指定问题的规则生成警告 warning &apos;ResourceAsColor&apos; // 忽略指定问题的规则(同关闭检查) ignore &apos;TypographyQuotes&apos; &#125;&#125; 参考https://developer.android.com/studio/write/lint?hl=zh-cn https://blog.csdn.net/berber78/article/details/60766091 dex 编译啥是 dex搞不懂 dex，就反编译玩过。大概查了一下，dex 对于 Davlik虚拟机， 就像 exe 对于 Windows一样吧。也就是 dex 编译 必然是 Android 编译的一部分咯 Gradle 配置 dex 编译123456789101112android &#123; dexOptions &#123; //是否开启增量编译, 当dex 对应的文件有修改的时候才去编译dex优化编译效率，这个功能 android studio 默认是关闭的，如果开启multi dex 此句无效 incremental false //是否预加载 dex 库依赖项以加快您的增量构建速度 preDexLibraries = false //是否忽略方法数限制的检查 jumboMode = false //进行 dex 编译的进程所使用的最大栈内存，太小可能导致OOM而无法通过编译 javaMaxHeapSize &quot;2048M&quot; &#125;&#125; 参考https://stackoverflow.com/questions/28927255/how-can-i-use-android-dexoptions https://www.cnblogs.com/zhaoyanjun/p/5736305.html https://stackoverflow.com/questions/26779552/what-does-the-incremental-dex-option-in-android-studio-do https://stackoverflow.com/questions/33750404/android-gradle-what-is-javamaxheapsize-4g packagingOptions（打包选项）packagingOption的选项简单翻译一下官方文档就理解了 First-pickFirst-pick 选项对应的文件会被打包到 apk 中，如果有多个对应文件，只有第一个会被打包，其他的会被忽略 123packagingOptions &#123; pickFirst &quot;anyFileWillDo&quot;&#125; MergeMerge 选项对应的文件会被合并到 apk 中。例如，当合并两个文件的时候，如果第一个文件的结尾不是换行符变会自动添加一个换行符，然后第二个文件的内容会被合并到第一个文件的末尾，这样就构成了合并后的文件 123packagingOptions &#123; merge &quot;/LICENSE.txt&quot; // Same as: merges += [&quot;/LICENSE.txt&quot;]&#125; ExcludeExclude 选项对应的文件不会被编译到 apk 中 123456packagingOptions &#123; exclude &apos;META-INF/LICENSE&apos; exclude &apos;META-INF/LICENSE.txt&apos; exclude &apos;META-INF/NOTICE&apos; exclude &apos;META-INF/NOTICE.txt&apos; &#125; 参考https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html productFlavors（打包特性）用于多渠道打包 配置多渠道在 Android Studio 3.0 中，需要加入 flavorDimensions 1flavorDimensions &quot;versionCode&quot; 添加 demo 渠道 123productFlavors &#123; demo &#123;&#125;&#125; 打包命令打包 demo 渠道的 apk 1./gradlew assembleGoogleRelease 打包所有渠道的 apk 1./gradlew assembleRelease 参考https://juejin.im/entry/577383c66be3ff006adc92a3 https://blog.csdn.net/mynameishuangshuai/article/details/51783303 https://blog.csdn.net/SYIF88/article/details/75009663","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.valorachen.club/tags/Android/"},{"name":"Gradle","slug":"Gradle","permalink":"http://blog.valorachen.club/tags/Gradle/"}]},{"title":"网件 R6400 折腾笔记","slug":"网件R6400折腾笔记","date":"2018-06-17T08:07:57.000Z","updated":"2018-06-25T03:26:14.690Z","comments":true,"path":"2018/06/17/网件R6400折腾笔记/","link":"","permalink":"http://blog.valorachen.club/2018/06/17/网件R6400折腾笔记/","excerpt":"","text":"网件 R6400 折腾笔记前言武汉房子里的路由器是以前的租客留下的，信号超差，差到我妈都受不了，于是批准我买新的路由器。作为萌新啥都不懂，于是就去搜知乎，然后打开了新世界的大门。头一次听说路由器还可以刷机，还可以搭建 nas，还能配置 shadowsocks，并且 get 到各种新知识 新手科普买硬件从来不敢瞎买，必然是一堆科普过后才敢下手 并不是带宽够就一定能拥有快速的网络呢 我对路由是一有一定了解的，有个好朋友是个运维。他这么跟我说：想要通过无线WIFI享受100M网络，一定要使用基于 802.11ac 的 5G 频段。因此，你是要必须拥有可以接收 5G 信号的无线网卡和路由器 2.4G 和 5G 路由器的频段粗分为两个，2.4G 频段和 5G频段 单频的其实就指的是只支持2.4G的802.11b/g/n三种协议 双频又叫ac路由器指的是同时支持802.11bgn和802.11ac 2.4G 里的协议分为三代 802.11b：理论最高 11Mbps（1.375MB 每秒钟这个的确可以做到） 802.11g：理论最高 54Mbps（6.75MB每秒这个的确很虚了） 802.11n：理论最高 600Mbps（能做到就见鬼了） 5G 的话细分是也有不少但是主流的是 802.11n 和 802.11ac802.11n 可以在 5G 频段工作，不过性能远不如 ac 的好用公司里的优科 Ruckus 的无线 ap 测验过100M 宽带下的实际下行速度其实就 8MB/s 不到甚至更低802.11ac 的话，最高可以达到 40-60MB/s，100M 宽带可以轻松跑满重要的是，在 802.11ac（个人认为这个叫真 5G）环境下无线设备和路由器的连接，延迟可以媲美有线在 Netgear R6100 配上5G usb 网卡的情况下，打 MC 在线完全没问题 网络上行与下行 目前我们消费者接触的运营商(ISP)的宽带，上行速率和下行是有很大区别的比如100M的电信光纤，家用的话，下行带宽是100M，但是上行只有8M，即1MB每秒如果是8M的宽带上行顶多就1M，即128KB/s这样做的目的1，普通家用的人根本用不着太高的上行带宽，最耗费上行带宽的QQ或者微信视频聊天亲测只需要128KB/s的稳定上传就可以完全不卡，测试情况是城中村宽带和日本的微信视频聊天2，多余的上行带宽可以卖给有需要的大企业，比如上下行对等的20M宽带（专线）用的是静态ip不是随机分配，中国电信的报价是八九千一个月。。。 路由器带机量 带机量由这些东西决定：处理器性能，运行内存大小，支持多少出入以及哪种MIMO技术 普通的路由比如那台99包邮的，处理器主频400Mhz，运行内存8M，闪存2M，支持3T3R 这样的机子明显不适合带多个的，就那小破运存玩啥。。 信号强度与路由器发射功率 工信部把无线路由器的发射功率限制死了在100毫瓦100毫瓦是个啥概念？手机天线的发射功率都有800毫瓦所以某些品牌说自己的路由器有穿墙模式，顶多就个噱头当然也有些品牌会隐藏自己更改发射功率的能力比如磊科的某些路由器可以开到200mw，D-link的某些路由器可以开到300mw左右Netgear的某些路由器，通过更改固件，换运行区域或者插代码，可以达到500mw的发射功率不过呢，发射功率越大不见得效果越好，发射功率和接受信号优劣仅仅是部分正相关如果发射功率太高，而本身路由器天线质量很差，这样信噪比会变得很恶劣而如果路由器本身的承载能力处理能力不足，你会在很远的地方都收到路由器信号而且，网络根本连接不上，俗称假信号。路由器的NAT能力远远比无线信号功率更重要 参考： 【知乎】有哪些家用无线路由器值得推荐？ 【知乎】家庭用 100M 光纤使用什么无线路由器才能发挥最大带宽？ 购买大家最推荐的就是网件了，于是去狗东一搜，沃日！ 正当陷入纠结的时候，我不知从哪儿鬼使神差的看到 R6400 这个型号，狗东 618 领券到手价 400。果断变身销售人员以三寸不烂之舌说服了母上。因为电脑上 1T 硬盘真的不够用了，而且 Android 上用影梭开 SS 老是容易杀进程真的烦，花 400 如果能解决这两个痛点而且还有各种功能等着我折腾我真的觉得值。跟妈说如果不给我钱我下个月发工资也会买的，这样就得忍受现在这个破路由器一个月。母上自己也烦现在的路由器网速慢信号差，于是就恩准了 验货正面一个 USB 3.0，放到正面确实人性化，设计师干得好！ 各种指示灯和让人摸头不知脑的操作按钮 四个 LAN 口 + 一个USB 2.0 与之前的三流路由器对比 初始化插好电源和 WAN 口后启动，按照机子反面给出 WIFI 名和密码连接，浏览器会自动打开配置向导界面让你配置 WIFI 名和密码，然后路由器会重启来应用你的配置，搞定之后就进入主界面了 梅林固件想折腾，梅林固件就是第一步 啥是梅林固件Asuswrt-merlin 是一个对华硕 Asuswrt 固件二次开发进行各种改进和修正的项目。Merlin 固件拥有更多的功能，由于第三方不断维护代码，各种新功能也在不断增加 KoolShare论坛 | KoolShare 固件列表 开整Merlin 固件使用的是华硕官方的闭源驱动，而不是其他人使用的开源驱动，稳定性相比开源驱动要高很多，同时也就意味着非华硕的路由器想用梅林纯看运气，碰巧跟华硕某个版本硬件一致了就能用，不一致就别指望能有支持了 由于网件和华硕多少硬件上有些不一致，所以需要从 .chk后缀的梅林固件过渡，然后再刷入.chk后缀的高版本固件 下面讲的刷机教程仅限网件 R6400，其他型号请自行搜索教程，自行下载对应型号刷机文件，变砖后果自负 以下是待会用到的固件，再重复一遍，不是 R6400 不要用下面的固件刷，会砖 下载 R6400_380.63_2_X7.2.1.chk | 下载 R6400_380.65-X7.4.trx 原生固件 -&gt; 梅林7.2高级 –&gt; 管理 –&gt; 路由器升级 -&gt; 上传 R6400_380.63_2_X7.2.1.chk 点上传后，会提示你是否继续，点确定 点确定后，就提示固件或升级将花2分钟，请勿关闭电源或按复位键。。中途不能断电 若等3分钟后，浏览器界面会转到梅林的界面，若不会自动跳转，等路由器的电源灯变为白灯时，浏览器直接输入192.168.1.1。看见梅林界面后，点最上方的“跳过设置向导” 需要你设置无线密码后才能进入路由器设置主界面 首次进入梅林主界面，需要设置管理员用户名与管理员密码 设置好管理员和密码后就进入梅林主界面 梅林7.2 -&gt;梅林7.4系统管理 -&gt; 固件升级 -&gt; 新固件文件 -&gt; 选择文件 -&gt; 选择 R6400_380.65-X7.4.trx 刷机过程中，千万不要去手动重启或关机路由器，后果可以很严重。升级完成后，浏览器也会自动跳转登录页面。如下图：填上你之前设置过的用户名和管理员密码登录就行 登录后回到梅林设置主界面，使用7.4前，先进行一次恢复出厂设置。为了减少问题 恢复出厂重新进入界面，在系统管理内的系统设置里找到下图红框的2个选项，都勾选上”是“，应用后重启路由器，就可以设置上网设置无线打开软件中心使用了 参考小白R7K请别用TT当过渡固件 网件R6400刷梅林固件教程 shadowsocksshadowsocks 是一种神奇的魔法（你懂得），不了解 shadowsocks 的童鞋可以看看我的这篇文章： 史上最详细的零基础新手傻瓜教程，使用 shadowsocks 搭建自己的 VPN 受魔法屏障的影响，现在梅林固件的软件中心里已经不再提供shadowsocks的在线安装。不过依然可以通过离线安装完成 不过我们可以 从 github 下载 shadowsocks 安装包 点击左侧菜单最下面的Software Center，使用离线安装的方式安装 然后你的软件中心就会多出一个叫做科学上网的应用，自己到里边配置代理服务器吧 参考：梅林固件安装shadowsocks 开启Samba服务待填坑… 下载工具待填坑… 参考：梅林固件折腾笔记二–搭建小型NAS","categories":[],"tags":[{"name":"路由器","slug":"路由器","permalink":"http://blog.valorachen.club/tags/路由器/"}]},{"title":"文件索引程序h5ai修改版，视频播放，文件上传","slug":"文件索引程序h5ai修改版，视频播放，文件上传","date":"2018-04-07T11:44:24.000Z","updated":"2018-04-13T16:07:12.382Z","comments":true,"path":"2018/04/07/文件索引程序h5ai修改版，视频播放，文件上传/","link":"","permalink":"http://blog.valorachen.club/2018/04/07/文件索引程序h5ai修改版，视频播放，文件上传/","excerpt":"","text":"前言买了年vps之后天天沉迷搞机，饭不吃了，屎不拉了，甚至游戏都不打了。最近穿梭与各个大佬的博客之间，了解了vps另一种用途：存储功能（大误：下种子！存本子！存小姐姐！）。我凭着兴趣把owncloud（官网 | 教程），nextcloud（官网），Cloudreve（github | 教程）都搭了一遍，然后发现我并不想用它们存任何文件。vps只有10G不说，以我现在的玩法，哪天不带重装的哪有那么安稳。而且如果不是公开分享的文件必须登录才能看到麻烦死了。私有文件啥的我根本就不需要啊，老娘的百度云虽然2T空间快用完了，但是全都是可以光明磊落的公开出来的文件。我要是男生的话估计会用到私人云盘的说，可是里世界的东西我真的get不到，而你不可能从不吸毒的人家里搜到海洛因。 可是事实上我电脑上1T的硬盘空间已经告急了，而且有些文件我真的很希望公开共享到服务器上，这样不登录就可以被任何人下载了。然后我搜到了两个解决方案。h5ai，一个优雅的目录列表程序，像是这样： Evoluted Directory Listing，支持上传，删除操作的目录列表程序，像是这样： emmm……第一个UI很好看，支持图片查看，经过大神的修改之后还支持视频播放。第二个支持密码登录和ip白名单。但是真吃藕。但是这两者可以取长补短呀，把前者改一下，让它支持后者的功能是最好的，可是我php并不好，做不到的说。但是我抖机灵把右上角的powered by h5ai改成了manage files，然后让这个链家指向Evoluted Directory Listing。这样我可以上传和下载，而其他人可以下载，也挺好的。 演示http://valorachen.club/pubcloud/ 因为有设置ip白名单的原因，你们是无法上传和删除文件的，所以点击manage files 后并不能进入页面。 下载我的自定义版本 h5ai + dplayer：本站下载 h5ai：本站下载 | github Evoluted Directory Listing：本站下载 | 官网 我自定义版本的食用方法下载并解压到www目录下 123wget http://download.valorachen.club/pubcloud.zipunzip pubcloud.zip 修改apache配置文件，在DirectoryIndex项中增加12 vi /etc/httpd/conf/httpd.conf` 打开upload.php，找到$ipWhitelist参数，改成自己的ip地址 打开，找到&lt;a id=”backlink”，将target参数改成upload.php对应的地址。例如：http://yourip/pubcloud/upload.php 关于这点我也很想搞相对路径的，但是不知为啥就是不好使，我还真的是前端菜鸟。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.valorachen.club/tags/linux/"},{"name":"建站","slug":"建站","permalink":"http://blog.valorachen.club/tags/建站/"}]},{"title":"我的网站导航","slug":"我的网站导航","date":"2018-04-07T07:40:58.000Z","updated":"2018-05-13T11:00:04.691Z","comments":true,"path":"2018/04/07/我的网站导航/","link":"","permalink":"http://blog.valorachen.club/2018/04/07/我的网站导航/","excerpt":"","text":"因为vultr上搭的vpn看不了p站，于是果断删掉了服务器买了一年的搬瓦工小鸡。买vps光用来科学上网简直是浪费，于是参考这篇文章：VPS有什么有趣的用途？，疯狂折腾了一番。这个过程中，发现百度的自定义导航已经满足不了我的需求了，现有的产品有是有，但是全部都用户体验极差，UI辣眼睛，有很多直接使用表格来布局一眼望去全是字根本找不到想要的网站，于是乎想自己写一个导航。 导航无非就两个功能呗：1.提供搜索引擎 2.跳转到常用网站。当初的想法是结合数据库。从数据库中加载网站和搜索引擎，甚至想支持多用户自定义配置。想法是美好的，现实是我这边用java做后台遇到了一些迷之状况，有些地方用纯html能完美运行，但是一加上js就不行了，我始终找不出原因，于是就用纯html随便挂服务器上了。结果用了一个星期发现好用得不得了，以至于每次打开主页都会惊叹于自己的才华（自恋中）。每次打开都会随机一张背景图，而且UI设计上既能看到背景又能看到控件。自定义搜索引擎，不管是谷歌度娘，还是淘宝京东，甚至想搜github或maven都随你。网站分类tab，自动获取网站logo，基本不用鼠标辊轮就可以快速找到想要的网站。左下角fab，用来做个人向的链接跳转，比如自己的博客，github主页啥的。老娘tm就是个天才！不接受反驳。有兴趣可以去踩踩ViVi的传送门，网站大概长这样： 现在越来越想按照当初的想法结合数据库做了，一是觉得我的导航真是又好看又好用，二是觉得需求应该是有的，而且现有的产品真没有一个我看的上的。百度首页做导航固然不错，但是百度导航只有百度搜索，而百度搜索甚至害死过一条命，珍爱生命，远离百度。360导航，hao123这种恶心东西谁要是用，我都会不由自主的对这个人产生偏见。github上有些部署在服务器上就能运行的导航源码，但是UI太丑了。总结：我的导航配合数据库做多用户将是世界上最好用的导航。 吹归吹，但是落到实际上，我写网站的功底是菜鸡级别的，毕竟整个大学基本用来学Android了。例如，我试过各种方法想让网站logo在网站名称的左边开头那儿，可是Google到的方法怎么弄都不好使。关于怎么用js获取radio选取的值，还有搜索部分，点击搜索按钮和回车要怎么处理，这里是好不容易瞎实现的，对就是瞎实现的。如果这个真的做到有别人用的程度，访问速度又是个问题。exm，CDN是个啥东东来的？完全布吉岛啊ORZ。鉴于之前用java作后台会出现一点迷之状况，想转战php的说，这又是新的挑战。 总之如果这个东西做成了，可能会再写一些别的小玩意，我还蛮想给自己博客加一个类似QQ空间的版块，不写技术，用来扯闲话的地方，希望是双端的。说道这里，我也好想换个更酷炫的博客主题，作为私飞斋真的很想要二次元的主题了。之前有试过轻改过博客主题，但是我一只前端菜鸡很难办到吧ORZ。好羡慕别的大佬，知道的东西多，文章写得有水平，博客又酷炫，访问量又高。像我这种辣鸡，写的东西没有营养，访客约等于只有自己，写了啥都没有人看TAT，但是就算这样，我也会好好写博客的呢（擦干眼泪）。 2018-5-13 补充： 目前是已经做出来个demo版本的东西了，https://github.com/ChenViVi/portal，算是勉强能用，现在日常使用上没有致命性的毛病，而且确实是有一定实用性的，至少我天天都在用，而且少了它不行。但还是各种bug各种low，还有很多地方需要完善，预计7月份再次开工吧","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.valorachen.club/tags/linux/"},{"name":"建站","slug":"建站","permalink":"http://blog.valorachen.club/tags/建站/"},{"name":"前端","slug":"前端","permalink":"http://blog.valorachen.club/tags/前端/"}]},{"title":"史上最详细的零基础新手傻瓜教程，使用shadowsocks搭建自己的VPN","slug":"从零开始使用shadowsocks搭建自己的vpn","date":"2018-03-29T05:53:23.000Z","updated":"2018-10-21T03:45:59.714Z","comments":true,"path":"2018/03/29/从零开始使用shadowsocks搭建自己的vpn/","link":"","permalink":"http://blog.valorachen.club/2018/03/29/从零开始使用shadowsocks搭建自己的vpn/","excerpt":"","text":"前言（纯属瞎白活，忙人勿看）做完了事，想着怎么用剩下的点钱提高自己的生活质量。去知乎上瞅了瞅，都是电动牙刷、收纳盒、尤克里里这种我根本不感兴趣的东西。有点想买小米智能音箱，kindle，平板电脑之类的硬件，但是仔细一思考感觉消费太高也并不是那么需要。各种会员或者是steam游戏这种虚拟消费也有想过。可是会员到期还早，游戏多到放在库里没时间玩。然后不知怎么的想到了科学上网，毕竟不科学上网的程序员不是好程序员。与其说是改善生活，不如说是买必需品。vpn这个词没有被搜索封印的地方也只剩微博了，然后刷出了一堆垃圾广告。又想了想何必花钱跟别人挤一个服务器，他们的盈利模式很多都是租别人家服务器然后给啥都不懂的人用，真正运营自家服务器的肯定很少，有很多这样的商家都已经狗带了，更多都是赚个差价的中介一样忽悠不懂技术的人。打个比方吧，买vpn的客户是旅客，卖vps的商家是包租婆，它们卖的vps是房子，卖vpn的人花钱租了一栋房子并把房子盖成了青旅，让买vpn的客户花钱挤一个房间，以单人来算是便宜了，但是和你一起挤房间的人花的钱比上vps商家那里租一间房的钱还要高，vpn商家赚的就是这个钱。那么自己倒腾个呗，还能顺便多学点知识。于是去知乎搜vps这个话题，发现了一个有趣的人冯硕以及他关于vps的知乎专栏和博客。然后根据他的内容，上vultr上买了5刀一个月的玩玩，虽然新用户必须首冲10刀比较坑，但是好歹可以按小时收费，随时创建和销毁主机和随时改套餐。如果以后有意愿长期使用的话，还是去BandwagonHost买年费的比较划算，虽然最划算的套餐目前已经被抢光了，等促销吧。 搞事写这篇文章的初衷一部分是想要记录，另一个就是做傻瓜教程。这里傻瓜的概念是不懂linux，英文基础也很薄弱的人（并不diss任何人厚~）。希望这些内容能尽可能适用于没有基础的人，所以对于老司机而言超级啰嗦。 购买VPS参考：如何挑选适合自己的vps 这个博客里还有各种测评呀促销啊啥的，可以自己多看看。我自己觉得的话，长期使用的话最好的就是BandwagonHost，但是它家月租超贵。短期的话看你自己了，反正最便宜的基本都是5刀/月，这里笔者使用vultr 唔，对了，这些卖vps的网站必然也是被墙了，关于这一点大家得各显神通了。这里推荐一个傻瓜办法：使用QQ浏览器。虽然腾讯产品的用户体验不想说，但还真没想到腾讯有这种黑科技。不管是PC还是手机客户端的QQ浏览器，都能访问一些被墙的网站。PC版还自带Google访问助手这个插件。 在vultr上购买vps点击进入官网 注册登录以及邮箱号需要认证这种东西就不说了，登录之后点击这里 进入购买页面 选择服务器地区。基本上，想要网速快就选东京（Tokyo）的，如果有吃鸡这种只有美国有服务器的特殊需求之类的，就选洛杉矶（Los Angeles） 选择操作系统类型 由于Centos有默认防火墙设置，所以导致不懂防火墙如何设置的新手配置好后连不上vpn，最好的解决方法是选择不带防火墙的Ubuntu。参考：shadowsocks issues #133 连接不上服务器，Error: connect ETIMEDOUT 选择套餐类型每次进入购买页面，都会默认选中10刀/月的套餐来诱导用户选择。这里可以自己选择5刀/月的套餐。 后面的4-7步选项怎么选都没关系，不选也没关系。然后新用户必须充值10刀。 筛选ip可用的主机然后选择主机数量，建议选择10台，因为主机的ip可能被墙导致根本无法远程登录主机。解决方法是多建几台主机，留下ip没被墙的主机，销毁其他主机。参考：Vultr新建的洛杉矶机房服务器本地连接不上，请问怎么解决？ 打开这个网站：http://ping.pe/ 输入主机的ip地址，筛选出全部都能ping通的主机。 销毁其他主机，只留下一台ip可用的主机。 在服务器上部署shadowsocks服务使用putty远程登录服务器打开putty远程登录服务器。 以root的身份登录。 查看或复制root密码。复制密码后，在putty客户端中点鼠标右键粘贴。 嫌密码不好记，可以用如下命令换个密码。 1passwd root 安装shadowsocks参考：新手教程六：十分钟搭建shadowsocks科学上网服务器 在putty中输入如下几条命令。 12345wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.shchmod +x shadowsocks-go.sh./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log 安装完成后，脚本提示如下： 123456789Congratulations, shadowsocks-go install completed!Your Server IP:your_server_ipYour Server Port:your_server_portYour Password:your_passwordYour Local Port:1080Your Encryption Method:aes-256-cfbWelcome to visit:http://teddysun.com/392.htmlEnjoy it! 卸载方法： 1./shadowsocks-go.sh uninstall 使用命令： 启动：1/etc/init.d/shadowsocks start 停止：1/etc/init.d/shadowsocks stop 重启：1/etc/init.d/shadowsocks restart 状态：1/etc/init.d/shadowsocks status 多用户多端口配置文件 使用putty命令行输入： 1vi /etc/shadowsocks/config.json 键盘按i进入insert模式，将文件内容全部替换成如下内容： 1234567891011&#123; &quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password0&quot;, &quot;9001&quot;:&quot;password1&quot;, &quot;9002&quot;:&quot;password2&quot;, &quot;9003&quot;:&quot;password3&quot;, &quot;9004&quot;:&quot;password4&quot; &#125;, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;timeout&quot;:600&#125; 按下esc键，在按下：键，输入wq，来保存并退出。 重启服务。 1/etc/init.d/shadowsocks restart 在客户端使用shadowsocks服务Windows：shadowsocks-windows 点击直接下载安装包 Android：shadowsocks-android 点击直接下载安装包 Linux：shadowsocks-gui 点击直接下载安装包 OSX：Shadowsocks for OSX Help 点击直接下载安装包 iOS：找其他代替工具或者在应用商店花钱下载Shadowrocket软件 PAC配置PAC控制哪些地址需要使用代理访问，哪些地址不需要使用代理访问，用以加快无需代理即可访问的地址的访问速度。例如，我们不需要使用代理访问百度，而且使用代理访问百度比直接用本地ip访问还要慢，我们就可以通过PAC配置文件将百度的地址加入白名单，或者将需要代理服务的地址加入黑名单，来提高访问速度。 可以直接使用网友归纳出的PAC配置文件 gfwlist黑名单 PAC配置文件地址1https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt gfw_whitelist白名单 PAC配置文件地址1https://raw.githubusercontent.com/breakwa11/gfw_whitelist/master/whiteiplist.pac 推荐使用白名单。稍微用脚趾甲想一想就知道，如果有新的被墙地址，而黑名单没有及时更新就会导致网站无法访问。而白名单有没有及时更新，都能够访问所有地址。 以Shadowsocks PC客户端为例： 至此，你就可以享受科学上网的乐趣了。VPS的用途不止于此，如果你想探索其他有趣的内容，可以参考这篇文章：VPS有什么有趣的用途？","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.valorachen.club/tags/linux/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://blog.valorachen.club/tags/shadowsocks/"},{"name":"vpn","slug":"vpn","permalink":"http://blog.valorachen.club/tags/vpn/"},{"name":"vps","slug":"vps","permalink":"http://blog.valorachen.club/tags/vps/"}]},{"title":"网易云音乐API Part2（搜索，评论）","slug":"网易云音乐API Part2（搜索，评论）","date":"2017-12-22T03:39:14.000Z","updated":"2018-01-01T15:39:02.379Z","comments":true,"path":"2017/12/22/网易云音乐API Part2（搜索，评论）/","link":"","permalink":"http://blog.valorachen.club/2017/12/22/网易云音乐API Part2（搜索，评论）/","excerpt":"","text":"测试相关用户id=1317458286 用户最爱歌歌单id=2023423393 歌曲id=289145 专辑id=28688 歌单id=381180171 MVid=381180171 电台节目id=908984796 电台评论id=648416766 搜索搜索type: 搜索类型；默认为1即单曲,取值意义: 1: 单曲 10: 专辑 100: 歌手 1000: 歌单 1002: 用户 1004: MV 1006: 歌词 1009: 电台 搜索歌曲http://116.196.87.226:3000/search?keywords=ゆうべは俺が悪かった&amp;limit=1&amp;type=1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; &quot;result&quot;: &#123; &quot;songs&quot;: [ &#123; &quot;id&quot;: 22660461, &quot;name&quot;: &quot;ゆうべは俺が悪かった&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 19678, &quot;name&quot;: &quot;ハンバート ハンバート&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 2078074, &quot;name&quot;: &quot;ニッケル·オデオン &quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1309881600007, &quot;size&quot;: 6, &quot;copyrightId&quot;: 5003, &quot;status&quot;: 1, &quot;picId&quot;: 853221023177754 &#125;, &quot;duration&quot;: 195004, &quot;copyrightId&quot;: 5003, &quot;status&quot;: 0, &quot;alias&quot;: [ &quot;昨晚我错了&quot; ], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 0, &quot;fee&quot;: 0, &quot;rUrl&quot;: null &#125; ], &quot;songCount&quot;: 1 &#125;, &quot;code&quot;: 200&#125; 搜索专辑http://116.196.87.226:3000/search?keywords=reputation&amp;limit=1&amp;type=10 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&#123; &quot;result&quot;: &#123; &quot;albums&quot;: [ &#123; &quot;name&quot;: &quot;reputation&quot;, &quot;id&quot;: 36709029, &quot;type&quot;: &quot;专辑&quot;, &quot;size&quot;: 15, &quot;picId&quot;: 109951163054654500, &quot;blurPicUrl&quot;: &quot;http://p3.music.126.net/fdh0myRe6FD87QNJtvGe_A==/109951163054654501.jpg&quot;, &quot;companyId&quot;: 0, &quot;pic&quot;: 109951163054654500, &quot;picUrl&quot;: &quot;http://p4.music.126.net/fdh0myRe6FD87QNJtvGe_A==/109951163054654501.jpg&quot;, &quot;publishTime&quot;: 1510243200007, &quot;description&quot;: &quot;&quot;, &quot;tags&quot;: &quot;&quot;, &quot;company&quot;: &quot;环球唱片&quot;, &quot;briefDesc&quot;: &quot;&quot;, &quot;artist&quot;: &#123; &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;id&quot;: 44266, &quot;picId&quot;: 109951163011137120, &quot;img1v1Id&quot;: 18686200114669624, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p3.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;albumSize&quot;: 57, &quot;alias&quot;: [], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot;, &quot;musicSize&quot;: 691, &quot;topicPerson&quot;: 0, &quot;picId_str&quot;: &quot;109951163011137119&quot;, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;img1v1Id_str&quot;: &quot;18686200114669622&quot;, &quot;alia&quot;: [] &#125;, &quot;songs&quot;: null, &quot;alias&quot;: [], &quot;status&quot;: -4, &quot;copyrightId&quot;: 7003, &quot;commentThreadId&quot;: &quot;R_AL_3_36709029&quot;, &quot;artists&quot;: [ &#123; &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;id&quot;: 44266, &quot;picId&quot;: 0, &quot;img1v1Id&quot;: 18686200114669624, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p4.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p3.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;albumSize&quot;: 0, &quot;alias&quot;: [], &quot;trans&quot;: &quot;&quot;, &quot;musicSize&quot;: 0, &quot;topicPerson&quot;: 0, &quot;img1v1Id_str&quot;: &quot;18686200114669622&quot; &#125; ], &quot;paid&quot;: false, &quot;onSale&quot;: true, &quot;picId_str&quot;: &quot;109951163054654501&quot;, &quot;containedSong&quot;: &quot;&quot;, &quot;alg&quot;: &quot;alg_album_basic_a&quot; &#125; ], &quot;albumCount&quot;: 31 &#125;, &quot;code&quot;: 200&#125; 搜索歌手http://116.196.87.226:3000/search?keywords=taylor&amp;limit=1&amp;type=100 12345678910111213141516171819202122232425&#123; &quot;result&quot;: &#123; &quot;artistCount&quot;: 250, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 57, &quot;picId&quot;: 109951163011137120, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/xrtDrby2JBO8e70ySagyIw==/109951163011222879.jpg&quot;, &quot;img1v1&quot;: 109951163011222880, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;mvSize&quot;: 171, &quot;followed&quot;: true, &quot;alg&quot;: &quot;alg_artist_basic&quot;, &quot;trans&quot;: &quot;泰勒·斯威夫特&quot; &#125; ] &#125;, &quot;code&quot;: 200&#125; 搜索歌单http://116.196.87.226:3000/search?keywords=taylor&amp;limit=1&amp;type=1000 12345678910111213141516171819202122232425262728&#123; &quot;result&quot;: &#123; &quot;playlists&quot;: [ &#123; &quot;id&quot;: 898072985, &quot;name&quot;: &quot;Taylor Swift 丨才女的进化史&quot;, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/BTcjC3VWx0yF8kCcm1uYUA==/19071029184142858.jpg&quot;, &quot;creator&quot;: &#123; &quot;nickname&quot;: &quot;冷山集&quot;, &quot;userId&quot;: 104388569, &quot;userType&quot;: 0, &quot;authStatus&quot;: 0, &quot;expertTags&quot;: null, &quot;experts&quot;: null &#125;, &quot;subscribed&quot;: false, &quot;trackCount&quot;: 53, &quot;userId&quot;: 104388569, &quot;playCount&quot;: 7883395, &quot;bookCount&quot;: 213586, &quot;highQuality&quot;: false, &quot;alg&quot;: &quot;alg_playlist_basic&quot; &#125; ], &quot;playlistCount&quot;: 356 &#125;, &quot;code&quot;: 200&#125; 搜索用户http://116.196.87.226:3000/search?keywords=taylor&amp;limit=1&amp;type=1002 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;result&quot;: &#123; &quot;userprofiles&quot;: [ &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 1000000, &quot;authStatus&quot;: 1, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/AcY8qnM3_EX6Olc0TnaSZw==/109951163063557302.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 1, &quot;city&quot;: 1010000, &quot;birthday&quot;: 761500800000, &quot;userId&quot;: 14709960, &quot;userType&quot;: 4, &quot;nickname&quot;: &quot;Taylor__Bear&quot;, &quot;signature&quot;: &quot;欢迎彩虹骚年们关注我~不定期发车！&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 109951163063557300, &quot;backgroundImgId&quot;: 109951162997046320, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/ChnwEKTMHfCiJasaLO16qQ==/109951162997046318.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 10, &quot;vipType&quot;: 11, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;109951163063557302&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162997046318&quot;, &quot;avatarImgId_str&quot;: &quot;109951163063557302&quot;, &quot;alg&quot;: &quot;alg_user_basic&quot; &#125; ], &quot;userprofileCount&quot;: 600 &#125;, &quot;code&quot;: 200&#125; 搜索MVhttp://116.196.87.226:3000/search?keywords=taylor&amp;limit=1&amp;type=1004 1234567891011121314151617181920212223242526272829303132333435363738&#123; &quot;result&quot;: &#123; &quot;mvCount&quot;: 276, &quot;mvs&quot;: [ &#123; &quot;id&quot;: 5647227, &quot;cover&quot;: &quot;http://p4.music.126.net/_n5bnOjfCWI5USfGE8cerg==/109951163018611090.jpg&quot;, &quot;name&quot;: &quot;Look What You Made Me Do&quot;, &quot;playCount&quot;: 13730884, &quot;briefDesc&quot;: &quot;暗黑Taylor惊艳上线&quot;, &quot;desc&quot;: null, &quot;artistName&quot;: &quot;Taylor Swift&quot;, &quot;artistId&quot;: 44266, &quot;duration&quot;: 256000, &quot;mark&quot;: 0, &quot;subed&quot;: false, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;alias&quot;: [ &quot;泰勒斯威夫特&quot;, &quot;泰勒史薇芙特&quot;, &quot;泰勒斯威芙特&quot;, &quot;霉霉&quot; ], &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ] &#125; ], &quot;arTransName&quot;: &quot;泰勒·斯威夫特&quot;, &quot;alg&quot;: &quot;alg_mv_basic_a&quot; &#125; ] &#125;, &quot;code&quot;: 200&#125; 搜索歌词http://116.196.87.226:3000/search?keywords=taylor&amp;limit=1&amp;type=1006 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&#123; &quot;result&quot;: &#123; &quot;songs&quot;: [ &#123; &quot;id&quot;: 501133611, &quot;name&quot;: &quot;Look What You Made Me Do&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 36709029, &quot;name&quot;: &quot;reputation&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1510243200007, &quot;size&quot;: 15, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 109951163054654500 &#125;, &quot;duration&quot;: 211859, &quot;copyrightId&quot;: 7003, &quot;status&quot;: 0, &quot;alias&quot;: [], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 5647227, &quot;fee&quot;: 4, &quot;rUrl&quot;: null, &quot;lyrics&quot;: &#123; &quot;txt&quot;: &quot;I don&apos;t like your little games\\nDon&apos;t like your tilted stage\\nThe role you made me play\\nOf the fool, no, I don&apos;t like you\\nI don&apos;t like your perfect crime\\nHow you laugh when you lie\\nYou said the gun was mine\\nIsn&apos;t cool, no, I don&apos;t like you (oh!)\\nBut I got smarter, I got harder in the nick of time\\nHoney, I rose up from the dead, I do it all the time\\nI’ve got a list of names and yours is in red, underlined\\nI check it once, then I check it twice, oh!\\nOhh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nOhh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nI don&apos;t like your kingdom keys\\nThey once belonged to me\\nYou ask me for a place to sleep\\nLocked me out and threw a feast (what?)\\nThe world moves on, another day, another drama, drama\\nBut not for me, not for me, all I think about is karma\\nAnd then the world moves on but one thing&apos;s for sure\\nMaybe I got mine, but you&apos;ll all get yours\\nBut I got smarter, I got harder in the nick of time\\nHoney, I rose up from the dead, I do it all the time\\nI’ve got a list of names and yours is in red, underlined\\nI check it once, then I check it twice, oh!\\nOhh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nOhh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nI don&apos;t trust nobody and nobody trusts me\\nI&apos;ll be the actress starring in your bad dreams\\nI don&apos;t trust nobody and nobody trusts me\\nI&apos;ll be the actress starring in your bad dreams\\nI don&apos;t trust nobody and nobody trusts me\\nI&apos;ll be the actress starring in your bad dreams\\nI don&apos;t trust nobody and nobody trusts me\\nI&apos;ll be the actress starring in your bad dreams\\n(Look what you made me do)\\n(Look what you made me do)\\n”I’m sorry, the old Taylor can&apos;t come to the phone right now.\\n”Why?”\\n”Oh, &apos;cause she&apos;s dead!\\&quot; (ohh!)\\nOoh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nOoh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nOoh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\nOoh, look what you made me do\\nLook what you made me do\\nLook what you just made me do\\nLook what you just made me do\\n&quot;, &quot;range&quot;: [ &#123; &quot;first&quot;: 1883, &quot;second&quot;: 1889 &#125; ] &#125;, &quot;alg&quot;: &quot;default&quot; &#125; ], &quot;songCount&quot;: 60 &#125;, &quot;code&quot;: 200&#125; 搜索电台http://116.196.87.226:3000/search?keywords=东京塔子&amp;limit=1&amp;type=1009 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&#123; &quot;result&quot;: &#123; &quot;djRadios&quot;: [ &#123; &quot;id&quot;: 7356034, &quot;dj&quot;: &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 1000000, &quot;authStatus&quot;: 1, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/7S3390P4hd62UGMBgXamZw==/7705377487815719.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 2, &quot;city&quot;: 1004400, &quot;birthday&quot;: 801547200000, &quot;userId&quot;: 52228633, &quot;userType&quot;: 4, &quot;nickname&quot;: &quot;东京塔子&quot;, &quot;signature&quot;: &quot;中日英都唱，但咱是中国人好伐。 / Q群206792573&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 7705377487815719, &quot;backgroundImgId&quot;: 109951163077371520, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/pfsHorlQ9RXykxEyFLU8eA==/109951163077371521.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 10, &quot;vipType&quot;: 10, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;7705377487815719&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951163077371521&quot; &#125;, &quot;name&quot;: &quot;东京塔子的电台&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/6DM1_NwTWYEx0Pf93mdTyw==/19217264230476204.jpg&quot;, &quot;desc&quot;: &quot;翻唱歌手，中日英都唱。\\nB站ID东京塔子 | 微博@东京塔子&quot;, &quot;subCount&quot;: 19352, &quot;programCount&quot;: 56, &quot;createTime&quot;: 1454922861164, &quot;categoryId&quot;: 2001, &quot;category&quot;: &quot;创作|翻唱&quot;, &quot;radioFeeType&quot;: 0, &quot;feeScope&quot;: 0, &quot;buyed&quot;: false, &quot;videos&quot;: null, &quot;finished&quot;: false, &quot;underShelf&quot;: false, &quot;purchaseCount&quot;: 0, &quot;price&quot;: 0, &quot;originalPrice&quot;: 0, &quot;discountPrice&quot;: null, &quot;lastProgramCreateTime&quot;: 1512280841667, &quot;lastProgramName&quot;: &quot;【翻唱】ALIVE（《终结者2：审判日》赛事主题曲）&quot;, &quot;lastProgramId&quot;: 1366841728, &quot;picId&quot;: 19217264230476204, &quot;rcmdText&quot;: &quot;多语种翻唱，甜出少女心&quot;, &quot;composeVideo&quot;: false, &quot;shareCount&quot;: 36, &quot;rcmdtext&quot;: &quot;多语种翻唱，甜出少女心&quot;, &quot;likedCount&quot;: 0, &quot;alg&quot;: &quot;alg_djradio_basic&quot;, &quot;commentCount&quot;: 0 &#125;, &#123; &quot;id&quot;: 350351084, &quot;dj&quot;: &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 110000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/vEVtAUr22o0Jrag73nVXTA==/19190875951631111.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 2, &quot;city&quot;: 110101, &quot;birthday&quot;: 928857600000, &quot;userId&quot;: 475472712, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;tawako东京塔&quot;, &quot;signature&quot;: &quot;守塔一生/头像为东京塔子日语原创滴滴答答太阳雨曲绘/画师：焦炭嚼&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 19190875951631110, &quot;backgroundImgId&quot;: 3241360282775989, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/fqxgqKu15cnfGoY_JcrX7A==/3241360282775989.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 10, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;19190875951631111&quot;, &quot;backgroundImgIdStr&quot;: &quot;3241360282775989&quot;, &quot;avatarImgId_str&quot;: &quot;19190875951631111&quot; &#125;, &quot;name&quot;: &quot;【东京塔子】原创曲合集&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/G6SjM0RIJwgH0xjGVmec5g==/18707090837011828.jpg&quot;, &quot;desc&quot;: &quot;b站知名唱见东京塔子原创曲&quot;, &quot;subCount&quot;: 7, &quot;programCount&quot;: 10, &quot;createTime&quot;: 1504153919110, &quot;categoryId&quot;: 2001, &quot;category&quot;: &quot;创作|翻唱&quot;, &quot;radioFeeType&quot;: 0, &quot;feeScope&quot;: 0, &quot;buyed&quot;: false, &quot;videos&quot;: null, &quot;finished&quot;: false, &quot;underShelf&quot;: false, &quot;purchaseCount&quot;: 0, &quot;price&quot;: 0, &quot;originalPrice&quot;: 0, &quot;discountPrice&quot;: null, &quot;lastProgramCreateTime&quot;: 1510310178754, &quot;lastProgramName&quot;: &quot;Rainbow Adventure&quot;, &quot;lastProgramId&quot;: 910702483, &quot;picId&quot;: 18707090837011828, &quot;rcmdText&quot;: null, &quot;composeVideo&quot;: false, &quot;shareCount&quot;: 0, &quot;rcmdtext&quot;: null, &quot;likedCount&quot;: 0, &quot;alg&quot;: &quot;alg_djradio_basic&quot;, &quot;commentCount&quot;: 0 &#125; ], &quot;djRadiosCount&quot;: 2 &#125;, &quot;code&quot;: 200&#125; 搜索建议http://116.196.87.226:3000/search/suggest?keywords=taylor&amp;limit=1&amp;type=1009 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377&#123; &quot;result&quot;: &#123; &quot;albums&quot;: [ &#123; &quot;id&quot;: 36709029, &quot;name&quot;: &quot;reputation&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 57, &quot;picId&quot;: 109951163011137120, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot; &#125;, &quot;publishTime&quot;: 1510243200007, &quot;size&quot;: 15, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 109951163054654500 &#125;, &#123; &quot;id&quot;: 3029801, &quot;name&quot;: &quot;1989&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 57, &quot;picId&quot;: 109951163011137120, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot; &#125;, &quot;publishTime&quot;: 1414339200007, &quot;size&quot;: 19, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 18771962022688348 &#125; ], &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 57, &quot;picId&quot;: 109951163011137120, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/xrtDrby2JBO8e70ySagyIw==/109951163011222879.jpg&quot;, &quot;img1v1&quot;: 109951163011222880, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot; &#125;, &#123; &quot;id&quot;: 938031, &quot;name&quot;: &quot;Taylor Thrash&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/OfdVuTj2gkQdp0GFpd507Q==/1408474395783855.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 2, &quot;picId&quot;: 1408474395783855, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/Ku0QjGkS3i7AIXCAx3eOBA==/528865147329873.jpg&quot;, &quot;img1v1&quot;: 528865147329873, &quot;trans&quot;: null &#125;, &#123; &quot;id&quot;: 12095343, &quot;name&quot;: &quot;Taylor Bennett&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/5EBuzL0dHjQLV-VCc3yHtA==/18558656766902806.jpg&quot;, &quot;alias&quot;: [], &quot;albumSize&quot;: 6, &quot;picId&quot;: 18558656766902810, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/X2lBYs-xOpsTe7lJQn3mRQ==/18763165929678342.jpg&quot;, &quot;img1v1&quot;: 18763165929678344, &quot;trans&quot;: null &#125; ], &quot;songs&quot;: [ &#123; &quot;id&quot;: 29713617, &quot;name&quot;: &quot;Blank Space&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 3064088, &quot;name&quot;: &quot;Blank Space&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1415548800007, &quot;size&quot;: 1, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -1, &quot;picId&quot;: 3231464674386227 &#125;, &quot;duration&quot;: 231000, &quot;copyrightId&quot;: 7003, &quot;status&quot;: 0, &quot;alias&quot;: [], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 361153, &quot;fee&quot;: 1, &quot;rUrl&quot;: null &#125;, &#123; &quot;id&quot;: 19292800, &quot;name&quot;: &quot;Red&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 1770428, &quot;name&quot;: &quot;Red&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1350835200000, &quot;size&quot;: 16, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 6621259023379377 &#125;, &quot;duration&quot;: 223093, &quot;copyrightId&quot;: 7003, &quot;status&quot;: 0, &quot;alias&quot;: [], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 113112, &quot;fee&quot;: 1, &quot;rUrl&quot;: null &#125;, &#123; &quot;id&quot;: 501133611, &quot;name&quot;: &quot;Look What You Made Me Do&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 36709029, &quot;name&quot;: &quot;reputation&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1510243200007, &quot;size&quot;: 15, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 109951163054654500 &#125;, &quot;duration&quot;: 211859, &quot;copyrightId&quot;: 7003, &quot;status&quot;: 0, &quot;alias&quot;: [], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 5647227, &quot;fee&quot;: 4, &quot;rUrl&quot;: null &#125;, &#123; &quot;id&quot;: 19292984, &quot;name&quot;: &quot;Love Story&quot;, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125; ], &quot;album&quot;: &#123; &quot;id&quot;: 1770438, &quot;name&quot;: &quot;Fearless&quot;, &quot;artist&quot;: &#123; &quot;id&quot;: 0, &quot;name&quot;: &quot;&quot;, &quot;picUrl&quot;: null, &quot;alias&quot;: [], &quot;albumSize&quot;: 0, &quot;picId&quot;: 0, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1&quot;: 0, &quot;trans&quot;: null &#125;, &quot;publishTime&quot;: 1226332800007, &quot;size&quot;: 13, &quot;copyrightId&quot;: 7003, &quot;status&quot;: -4, &quot;picId&quot;: 18517974836953200 &#125;, &quot;duration&quot;: 236251, &quot;copyrightId&quot;: 7003, &quot;status&quot;: 0, &quot;alias&quot;: [], &quot;rtype&quot;: 0, &quot;ftype&quot;: 0, &quot;mvid&quot;: 503185, &quot;fee&quot;: 1, &quot;rUrl&quot;: null &#125; ], &quot;playlists&quot;: [ &#123; &quot;id&quot;: 898072985, &quot;name&quot;: &quot;Taylor Swift 丨才女的进化史&quot;, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/BTcjC3VWx0yF8kCcm1uYUA==/19071029184142858.jpg&quot;, &quot;creator&quot;: null, &quot;subscribed&quot;: false, &quot;trackCount&quot;: 53, &quot;userId&quot;: 104388569, &quot;playCount&quot;: 7883492, &quot;bookCount&quot;: 213582, &quot;highQuality&quot;: false &#125;, &#123; &quot;id&quot;: 711892958, &quot;name&quot;: &quot;Taylor Swift（泰勒斯威夫特）歌曲大全&quot;, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/cCfpVmx1M6M-vr4u6bWisw==/109951163028182831.jpg&quot;, &quot;creator&quot;: null, &quot;subscribed&quot;: false, &quot;trackCount&quot;: 112, &quot;userId&quot;: 375595964, &quot;playCount&quot;: 47618, &quot;bookCount&quot;: 1116, &quot;highQuality&quot;: false &#125; ], &quot;mvs&quot;: [ &#123; &quot;id&quot;: 5647227, &quot;cover&quot;: &quot;http://p3.music.126.net/_n5bnOjfCWI5USfGE8cerg==/109951163018611090.jpg&quot;, &quot;name&quot;: &quot;Look What You Made Me Do&quot;, &quot;playCount&quot;: 13731048, &quot;briefDesc&quot;: &quot;暗黑Taylor惊艳上线&quot;, &quot;desc&quot;: null, &quot;artistName&quot;: &quot;Taylor Swift&quot;, &quot;artistId&quot;: 44266, &quot;duration&quot;: 256000, &quot;mark&quot;: 0, &quot;subed&quot;: false, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;alias&quot;: [ &quot;泰勒斯威夫特&quot;, &quot;泰勒史薇芙特&quot;, &quot;泰勒斯威芙特&quot;, &quot;霉霉&quot; ], &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ] &#125; ] &#125;, &#123; &quot;id&quot;: 5776032, &quot;cover&quot;: &quot;http://p4.music.126.net/tOK9V95ojQDP8BFS7yp0vQ==/109951163085245958.jpg&quot;, &quot;name&quot;: &quot;...Ready For It? (BloodPop® Remix)&quot;, &quot;playCount&quot;: 292940, &quot;briefDesc&quot;: &quot;&quot;, &quot;desc&quot;: null, &quot;artistName&quot;: &quot;Taylor Swift&quot;, &quot;artistId&quot;: 44266, &quot;duration&quot;: 192000, &quot;mark&quot;: 0, &quot;subed&quot;: false, &quot;artists&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;alias&quot;: [ &quot;泰勒斯威夫特&quot;, &quot;泰勒史薇芙特&quot;, &quot;泰勒斯威芙特&quot;, &quot;霉霉&quot; ], &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ] &#125;, &#123; &quot;id&quot;: 12567543, &quot;name&quot;: &quot;BloodPop&quot;, &quot;alias&quot;: [ &quot;Michael Tucker&quot;, &quot;BloodPop®&quot; ], &quot;transNames&quot;: null &#125; ] &#125; ], &quot;order&quot;: [ &quot;songs&quot;, &quot;artists&quot;, &quot;albums&quot;, &quot;mvs&quot;, &quot;playlists&quot; ] &#125;, &quot;code&quot;: 200&#125; 搜索多重匹配http://116.196.87.226:3000/search/multimatch?keywords=taylor 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109&#123; &quot;result&quot;: &#123; &quot;artist&quot;: [ &#123; &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;id&quot;: 44266, &quot;picId&quot;: 109951163011137120, &quot;img1v1Id&quot;: 109951163011222880, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p1.music.126.net/xrtDrby2JBO8e70ySagyIw==/109951163011222879.jpg&quot;, &quot;albumSize&quot;: 57, &quot;alias&quot;: [], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot;, &quot;musicSize&quot;: 692, &quot;picId_str&quot;: &quot;109951163011137119&quot;, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;img1v1Id_str&quot;: &quot;109951163011222879&quot;, &quot;mvSize&quot;: 171, &quot;alg&quot;: &quot;default&quot; &#125; ], &quot;album&quot;: [ &#123; &quot;name&quot;: &quot;...Ready For It? (BloodPop® Remix)&quot;, &quot;id&quot;: 36902122, &quot;type&quot;: &quot;EP/Single&quot;, &quot;size&quot;: 1, &quot;picId&quot;: 17861566393618284, &quot;blurPicUrl&quot;: &quot;http://p3.music.126.net/A13d0A4FWokkA9W9cET5-g==/17861566393618284.jpg&quot;, &quot;companyId&quot;: 0, &quot;pic&quot;: 17861566393618284, &quot;picUrl&quot;: &quot;http://p3.music.126.net/A13d0A4FWokkA9W9cET5-g==/17861566393618284.jpg&quot;, &quot;publishTime&quot;: 1512057600007, &quot;description&quot;: &quot;&quot;, &quot;tags&quot;: &quot;&quot;, &quot;company&quot;: &quot;环球唱片&quot;, &quot;briefDesc&quot;: &quot;&quot;, &quot;artist&quot;: &#123; &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;id&quot;: 44266, &quot;picId&quot;: 109951163011137120, &quot;img1v1Id&quot;: 18686200114669624, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/cCAPoZwlxudh_3Mp2sqQBw==/109951163011137119.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p3.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;albumSize&quot;: 57, &quot;alias&quot;: [], &quot;trans&quot;: &quot;泰勒·斯威夫特&quot;, &quot;musicSize&quot;: 692, &quot;topicPerson&quot;: 0, &quot;picId_str&quot;: &quot;109951163011137119&quot;, &quot;transNames&quot;: [ &quot;泰勒·斯威夫特&quot; ], &quot;img1v1Id_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;songs&quot;: null, &quot;alias&quot;: [], &quot;status&quot;: 3, &quot;copyrightId&quot;: 7003, &quot;commentThreadId&quot;: &quot;R_AL_3_36902122&quot;, &quot;artists&quot;: [ &#123; &quot;name&quot;: &quot;Taylor Swift&quot;, &quot;id&quot;: 44266, &quot;picId&quot;: 0, &quot;img1v1Id&quot;: 18686200114669624, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p4.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;albumSize&quot;: 0, &quot;alias&quot;: [], &quot;trans&quot;: &quot;&quot;, &quot;musicSize&quot;: 0, &quot;topicPerson&quot;: 0, &quot;img1v1Id_str&quot;: &quot;18686200114669622&quot; &#125;, &#123; &quot;name&quot;: &quot;BloodPop&quot;, &quot;id&quot;: 12567543, &quot;picId&quot;: 0, &quot;img1v1Id&quot;: 18686200114669624, &quot;briefDesc&quot;: &quot;&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;, &quot;img1v1Url&quot;: &quot;http://p4.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;albumSize&quot;: 0, &quot;alias&quot;: [], &quot;trans&quot;: &quot;&quot;, &quot;musicSize&quot;: 0, &quot;topicPerson&quot;: 0, &quot;img1v1Id_str&quot;: &quot;18686200114669622&quot; &#125; ], &quot;paid&quot;: false, &quot;onSale&quot;: false, &quot;picId_str&quot;: &quot;17861566393618284&quot;, &quot;alg&quot;: &quot;default&quot; &#125; ], &quot;orders&quot;: [ &quot;album&quot;, &quot;artist&quot; ] &#125;, &quot;code&quot;: 200&#125; 评论歌曲评论http://116.196.87.226:3000/comment/music?id=289145&amp;limit=1&amp;offset=0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367&#123; &quot;isMusician&quot;: false, &quot;userId&quot;: 1317458286, &quot;topComments&quot;: [], &quot;moreHot&quot;: true, &quot;hotComments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/yMjtRjIt56qufl66P4KcVQ==/3301833419741194.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 51441885, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;陈小小小小小小&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 1912, &quot;commentId&quot;: 37301532, &quot;liked&quot;: false, &quot;time&quot;: 1442975978872, &quot;content&quot;: &quot;我珍惜小时候对美好的最初印象，所以对于那些关于宋祖英的污言秽语特别反感，人家招你惹你了。。会跟风说几句话是觉得自己特别牛掰了还是怎的。。。。。要是真的，还能让尔等平民说三道四？好好的听歌的地方，搞得乌烟瘴气。&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/tsSX1Td4ia6XroIb1CWPuw==/109951162809032743.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 64813865, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 10, &quot;nickname&quot;: &quot;却道天凉好个秋啊&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 754, &quot;commentId&quot;: 33690853, &quot;liked&quot;: false, &quot;time&quot;: 1440853217676, &quot;content&quot;: &quot;天了噜 我竟开始单曲循环各种民歌&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/C_ktVaevARr3_Hy0GlrGyQ==/109951163026508525.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 325425475, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;Jungle张&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 683, &quot;commentId&quot;: 268445772, &quot;liked&quot;: false, &quot;time&quot;: 1482101523696, &quot;content&quot;: &quot;支持我们自己湘西的苗家妹子，你们知道我们那边能出这样的一个人才有多难吗？[心碎]\\n她是古丈的，出名后给古丈修了好大好宽的路……&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/bFBmr_5N9KWrak86I6d9Eg==/109951163088305468.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 65731368, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;克莉丝桃的越只&quot; &#125;, &quot;beReplied&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/I95B22mDAyyoZCoTAzkpsQ==/3417282157905726.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 29732993, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;Hawern&quot; &#125;, &quot;content&quot;: &quot;如果我说除了宋祖英，没有其他哪个女歌唱家能驾驭这首歌的磅礴气势。有人同意吗？&quot;, &quot;status&quot;: 0 &#125; ], &quot;likedCount&quot;: 582, &quot;commentId&quot;: 28256169, &quot;liked&quot;: false, &quot;time&quot;: 1437962651631, &quot;content&quot;: &quot;那不一定，张也、祖海也完全可以，甚至当今娘娘&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/Y7G1rpXE9K1xS9JP0J7-wA==/3234763211046218.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 46554515, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;豪华丶&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 567, &quot;commentId&quot;: 9223847, &quot;liked&quot;: false, &quot;time&quot;: 1421913040928, &quot;content&quot;: &quot;还以为不能听她的歌了。。&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/xAufwr3KZdPDUmwVx8OPAg==/3252355395608778.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 90643474, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;梁删博住瀛台&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 534, &quot;commentId&quot;: 193171341, &quot;liked&quot;: false, &quot;time&quot;: 1470221865840, &quot;content&quot;: &quot;宋唱歌还是很好听的，说她是当今中国艺术成就最高之一的歌手也不为过，湘西大山里的农村家庭走出来的，父母是农民，父亲早逝，弟弟是个聋哑人，而且热心国防和公益。但是被各种谣言抹黑，那些消息归根结底是21世纪初的法 lun 功为报复jiang的清洗传出来的，她一个普通的歌手承受了很多侮辱&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/b-Fx5JLF4Oy1tUYCzoYr5Q==/6665239488690452.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 36969451, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;索尼子最有爱&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 501, &quot;commentId&quot;: 22212357, &quot;liked&quot;: false, &quot;time&quot;: 1434347955830, &quot;content&quot;: &quot;喜欢听日文ACG的我不知道犯了什么神经去搜了这些，但是感觉好好听.貌似打开了新世界的大门(⊙o⊙)…[大哭]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/BYqmPO4Ig7CwsizfGiPqLw==/3412884111055422.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 294929940, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;卡比巴尼亚的海&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 408, &quot;commentId&quot;: 342796261, &quot;liked&quot;: false, &quot;time&quot;: 1490847699964, &quot;content&quot;: &quot;三月三快到了，我可能要请假回家唱山歌，没有我，我们村可能会输🌚&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 3385392, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;风中一个吻&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 396, &quot;commentId&quot;: 42235731, &quot;liked&quot;: false, &quot;time&quot;: 1445546611647, &quot;content&quot;: &quot;我对宋映像好 因为她来我们县里义演过 本来\\n\\n是一首老百姓热情最后还加了两首歌 没什么架子&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 23502654, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;林枝&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 351, &quot;commentId&quot;: 12065854, &quot;liked&quot;: false, &quot;time&quot;: 1425665924653, &quot;content&quot;: &quot;这声音听了好舒服[强]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/UBxpx6aFBhoI7H3p9h2Mhg==/18892908300470713.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 39552270, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;gboing&quot; &#125;, &quot;beReplied&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/Y7G1rpXE9K1xS9JP0J7-wA==/3234763211046218.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 46554515, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;豪华丶&quot; &#125;, &quot;content&quot;: &quot;还以为不能听她的歌了。。&quot;, &quot;status&quot;: 0 &#125; ], &quot;likedCount&quot;: 277, &quot;commentId&quot;: 11392389, &quot;liked&quot;: false, &quot;time&quot;: 1424842587294, &quot;content&quot;: &quot;你的快递到了，开门&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/nShtapiVbhAUHCNYaiZS2w==/109951162858811864.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 33890876, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;无印良痞&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 251, &quot;commentId&quot;: 47773579, &quot;liked&quot;: false, &quot;time&quot;: 1447867043845, &quot;content&quot;: &quot;讨厌轻浮的调侃[哀伤]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/20H649ibIM-1lOZXO1WIZg==/19213965695861776.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 252300482, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 10, &quot;nickname&quot;: &quot;0giso_Setsuna&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 249, &quot;commentId&quot;: 390961383, &quot;liked&quot;: false, &quot;time&quot;: 1495552652583, &quot;content&quot;: &quot;大地飞歌 简称 大哥 没毛病&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/iT84R17K5BNagp_fnF-cqA==/19036944323356895.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 3228728, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;找自己恒miao&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 245, &quot;commentId&quot;: 16216781, &quot;liked&quot;: false, &quot;time&quot;: 1429922175917, &quot;content&quot;: &quot;特别喜欢这种少民风情的歌曲，淳朴而美妙&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 110025411, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;端Echo&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 152, &quot;commentId&quot;: 278872139, &quot;liked&quot;: false, &quot;time&quot;: 1483375621259, &quot;content&quot;: &quot;当年最开始听音乐时听的是民歌，后来渐渐开始听古典，纯音乐，流行，摇滚，爵士，布鲁斯，电子…啥都轮着听过后，偶然又听到民歌，被吸引来了。这声音实在太动听！有种阅尽沧桑回望最初的感觉。&quot; &#125; ], &quot;code&quot;: 200, &quot;comments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/ZIyCZeiVknO9FEZGsCOBTQ==/109951163013978416.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 135061139, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;刘大甜甜甜-&quot; &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 0, &quot;commentId&quot;: 648041529, &quot;liked&quot;: false, &quot;time&quot;: 1513871156176, &quot;content&quot;: &quot;公司年会舞蹈就决定是这首歌了[呆]&quot; &#125; ], &quot;total&quot;: 1707, &quot;more&quot;: true&#125; 专辑评论http://116.196.87.226:3000/comment/album?id=28688&amp;limit=1&amp;offset=0 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; &quot;isMusician&quot;: false, &quot;userId&quot;: 1317458286, &quot;topComments&quot;: [], &quot;moreHot&quot;: false, &quot;hotComments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/eMVu5ba5H0IfHRzEaOU7gA==/3252355407270781.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;userId&quot;: 31156604, &quot;expertTags&quot;: null, &quot;nickname&quot;: &quot;旧单车老情歌&quot;, &quot;userType&quot;: 0 &#125;, &quot;beReplied&quot;: [], &quot;time&quot;: 1456488689991, &quot;liked&quot;: false, &quot;commentId&quot;: 123864968, &quot;likedCount&quot;: 14, &quot;content&quot;: &quot;小时候每天的电视上都能看见基本法，好怀念了噜[憨笑]&quot; &#125; ], &quot;code&quot;: 200, &quot;comments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/8Uj73yiIIKfbK2oHApDG7Q==/1378787590326925.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;userId&quot;: 114731387, &quot;expertTags&quot;: null, &quot;nickname&quot;: &quot;柏拉图的囚徒&quot;, &quot;userType&quot;: 0 &#125;, &quot;beReplied&quot;: [], &quot;time&quot;: 1490263524323, &quot;liked&quot;: false, &quot;commentId&quot;: 337294686, &quot;likedCount&quot;: 1, &quot;content&quot;: &quot;我买的第一张单人cd！！歌词翻烂[色]&quot; &#125; ], &quot;total&quot;: 10, &quot;more&quot;: true&#125; 歌单评论http://116.196.87.226:3000/comment/playlist?id=381180171&amp;limit=1&amp;offset=0 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&#123; &quot;isMusician&quot;: false, &quot;userId&quot;: 1317458286, &quot;topComments&quot;: [], &quot;moreHot&quot;: false, &quot;hotComments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;expertTags&quot;: null, &quot;vipType&quot;: 11, &quot;nickname&quot;: &quot;the-pope-gz&quot;, &quot;userType&quot;: 4, &quot;authStatus&quot;: 1, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/pWybyXTQ0mOBzDmZ6-wvqQ==/1417270498510650.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 277434793 &#125;, &quot;beReplied&quot;: [], &quot;time&quot;: 1500373236637, &quot;liked&quot;: false, &quot;commentId&quot;: 476020723, &quot;likedCount&quot;: 40, &quot;content&quot;: &quot;看到鬼卞收藏了[惊恐]我想我是见了鬼了😂&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;expertTags&quot;: null, &quot;vipType&quot;: 11, &quot;nickname&quot;: &quot;为风歌诵&quot;, &quot;userType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/eLyl9AW7CdYznNjeItAqWw==/3412884109388153.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 291637447 &#125;, &quot;beReplied&quot;: [], &quot;time&quot;: 1503560053109, &quot;liked&quot;: false, &quot;commentId&quot;: 532009755, &quot;likedCount&quot;: 11, &quot;content&quot;: &quot;神奇，鬼卞收藏了&quot; &#125; ], &quot;code&quot;: 200, &quot;comments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;expertTags&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;地下88英里丶爬&quot;, &quot;userType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/yD-fbqiWxVVdLy6YUpCOjQ==/19016053602865100.jpg&quot;, &quot;experts&quot;: null, &quot;userId&quot;: 137577852 &#125;, &quot;beReplied&quot;: [], &quot;time&quot;: 1512467428965, &quot;liked&quot;: false, &quot;commentId&quot;: 633155518, &quot;likedCount&quot;: 1, &quot;content&quot;: &quot;这个必须得收藏啊&quot; &#125; ], &quot;total&quot;: 91, &quot;more&quot;: true&#125; MV评论http://116.196.87.226:3000/comment/mv?id=5361298&amp;limit=1&amp;offset=0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170&#123; &quot;isMusician&quot;: false, &quot;userId&quot;: 1317458286, &quot;topComments&quot;: [], &quot;moreHot&quot;: false, &quot;hotComments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 117226731, &quot;nickname&quot;: &quot;Troi-&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/Stxjj9luMjs7-_BSxGkFpA==/3443670431309801.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 123, &quot;commentId&quot;: 227210592, &quot;liked&quot;: false, &quot;time&quot;: 1476025465462, &quot;content&quot;: &quot;这种民歌的感染力确实不是流行歌能比的😂&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 11314119, &quot;nickname&quot;: &quot;wo就是小香倪&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/bov_h-DXkkidPPTaOtqENw==/19032546277029292.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 88, &quot;commentId&quot;: 266599794, &quot;liked&quot;: false, &quot;time&quot;: 1481867939537, &quot;content&quot;: &quot;我看名字以为自己没听过，结果一开口发现我能唱到最后&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 11314119, &quot;nickname&quot;: &quot;wo就是小香倪&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/bov_h-DXkkidPPTaOtqENw==/19032546277029292.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 49, &quot;commentId&quot;: 266546900, &quot;liked&quot;: false, &quot;time&quot;: 1481867908812, &quot;content&quot;: &quot;民歌的超有钱.这歌MV换了起码5套衣服~!都好看飘飘欲仙&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 68333660, &quot;nickname&quot;: &quot;Rapids&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/9vy9S0JDqSL2lfu8KTGSlA==/109951163086747074.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 40, &quot;commentId&quot;: 276429165, &quot;liked&quot;: false, &quot;time&quot;: 1483102087543, &quot;content&quot;: &quot;我家有这张碟...我妈是宋祖英老师的小迷妹&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 34562901, &quot;nickname&quot;: &quot;秋之缘分已尽&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/IvCFWjUyuHtfCQHk2R3h5w==/1365593494855621.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 31, &quot;commentId&quot;: 230602582, &quot;liked&quot;: false, &quot;time&quot;: 1476587453565, &quot;content&quot;: &quot;广西的南宁民歌艺术节之大地飞歌，以前还是很好看的[流泪]多久没看过了[流泪]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 39032948, &quot;nickname&quot;: &quot;BabeWeAreOne&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/YjbT5S6ZrRaju64SWPDTBg==/3296335862964424.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;likedCount&quot;: 21, &quot;commentId&quot;: 515463953, &quot;liked&quot;: false, &quot;time&quot;: 1503076625026, &quot;content&quot;: &quot;绝对的大投资 先不说造型这么多 这么多地点取景 散播歌词纸和群众学唱歌的画面还有大量特写画面到一朵云彩全部都有CG制作 就连那个玻璃舞台也是前卫的要命 布兰妮work bitch后来都用过&quot; &#125; ], &quot;code&quot;: 200, &quot;comments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 536709145, &quot;nickname&quot;: &quot;潇洒的走93&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/QWfaVvVm22WjNFa5P--hnA==/18497084116049546.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;userId&quot;: 121152757, &quot;nickname&quot;: &quot;AmyChen7&quot;, &quot;vipType&quot;: 0, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/NDtQTGFAGJIqaypkxXVqjQ==/18771962022781109.jpg&quot;, &quot;experts&quot;: null, &quot;userType&quot;: 0, &quot;expertTags&quot;: null &#125;, &quot;content&quot;: &quot;哈哈哈哈说得我好饿&quot;, &quot;status&quot;: 0 &#125; ], &quot;likedCount&quot;: 0, &quot;commentId&quot;: 645476273, &quot;liked&quot;: false, &quot;time&quot;: 1513613089356, &quot;content&quot;: &quot;吃货。真拿你没办法[流感]&quot; &#125; ], &quot;total&quot;: 131, &quot;more&quot;: true&#125; 电台节目评论http://116.196.87.226:3000/comment/dj?id=908984796&amp;limit=1&amp;offset=0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273&#123; &quot;isMusician&quot;: false, &quot;userId&quot;: 1317458286, &quot;topComments&quot;: [], &quot;moreHot&quot;: false, &quot;hotComments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/i7-pZc8JrEy5tS3vXzQRDA==/19234856416630576.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 10, &quot;nickname&quot;: &quot;秃头火鸡&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 395542482, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534254454, &quot;likedCount&quot;: 133, &quot;time&quot;: 1503679508616, &quot;content&quot;: &quot;年纪轻轻喜欢什么村长呀，看，被hihi死了吧[大笑]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/xlbJGzoPNEqQI0_BBssNTQ==/18565253836848115.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;xusmok&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 444574983, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534210214, &quot;likedCount&quot;: 109, &quot;time&quot;: 1503677201619, &quot;content&quot;: &quot;hihihihihihihihihihhihihihihihihihi哈哈哈哈哈哈哈哈哈哈哈哈咳咳嘿嘿嘿嘿嘿嘿嘿嘻嘻嘻嘻嘻嘻嘻hihihihihihihihihihihihihihihihihihihi笑不动了歇会儿呼哈哈哈哈哈哈哈hihihihihihihihihihihihi&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/i9rTzJZiZ0hcdyyEiGM4Sw==/18564154325504352.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;RADWIMPSCharon&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 40480726, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534291213, &quot;likedCount&quot;: 84, &quot;time&quot;: 1503681826458, &quot;content&quot;: &quot;存下来当闹铃 会被笑醒[大哭]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/D7CXzQU7EgWdXvEbtG81Iw==/109951163039655951.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;你的登er&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 78471670, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534207309, &quot;likedCount&quot;: 79, &quot;time&quot;: 1503677176612, &quot;content&quot;: &quot;哈哈哈哈哈哈哈hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi 笑不动了救我hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi 咳咳咳咳hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi &quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/hufFJQsCIyrPIgA11Lr-qg==/18619129906795379.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;AGiMiD&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 70676598, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534274278, &quot;likedCount&quot;: 67, &quot;time&quot;: 1503680586173, &quot;content&quot;: &quot;那个人抽大麻，逮他，hihihi&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/MyEC_G-pQWBY0a_d1mlMJw==/109951162824835777.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 10, &quot;nickname&quot;: &quot;阿根廷五棵松&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 249237757, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534186711, &quot;likedCount&quot;: 48, &quot;time&quot;: 1503676756732, &quot;content&quot;: &quot;真当村长不用网易云吗[大哭]&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/M1iJimrvdsfoaoJ4tjzhzw==/18679603046859151.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;fa生生&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 376211468, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534216875, &quot;likedCount&quot;: 43, &quot;time&quot;: 1503678394322, &quot;content&quot;: &quot;满脑子的hihihihihi我睡不着了哈哈哈哈哈哈哈哈哈哈哈&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/jT-zJkp7KB9rU5EyG89rYA==/19240353974692407.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;摩卡-L&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 541092276, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 535958544, &quot;likedCount&quot;: 41, &quot;time&quot;: 1503802920234, &quot;content&quot;: &quot;以后看c菌的恐怖游戏合集拿这个在旁边放，hihihihihi&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/6bHFBPYro0xBHYVEex7D1g==/19053436997954077.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;Pi-nks&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 361933117, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534357310, &quot;likedCount&quot;: 40, &quot;time&quot;: 1503692077402, &quot;content&quot;: &quot;救命，我就这样跟着村长hihihihi了三分多钟，是我村长那笑不动了，还是你小饼干飘了，我先去hihihihi了\\\\(//∇//)\\\\&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/kjDna7BjkV7maV2hlTyMdw==/18969874114203715.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 11, &quot;nickname&quot;: &quot;安烁yo&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 293304302, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534481679, &quot;likedCount&quot;: 39, &quot;time&quot;: 1503711466504, &quot;content&quot;: &quot;真当村长不上网易云嘛！😂&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/8Pjbx3Lw76NubN8vrxR69w==/18727981557844435.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;汎小凡cz&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 499114292, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534513156, &quot;likedCount&quot;: 38, &quot;time&quot;: 1503712359777, &quot;content&quot;: &quot;hihi村:我还没笑完&quot; &#125;, &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/oyW7ONIaU6QJJPNLFTsZqQ==/18807146395128415.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;白紫川00&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 400916130, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 534325967, &quot;likedCount&quot;: 33, &quot;time&quot;: 1503688612214, &quot;content&quot;: &quot;感觉村长都要笑不动了[大哭]笑不动了，快救我！[大哭]&quot; &#125; ], &quot;code&quot;: 200, &quot;comments&quot;: [ &#123; &quot;user&quot;: &#123; &quot;locationInfo&quot;: null, &quot;authStatus&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;experts&quot;: null, &quot;vipType&quot;: 0, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;userType&quot;: 0, &quot;userId&quot;: 1317458286, &quot;expertTags&quot;: null &#125;, &quot;beReplied&quot;: [], &quot;liked&quot;: false, &quot;commentId&quot;: 648416766, &quot;likedCount&quot;: 0, &quot;time&quot;: 1513920638766, &quot;content&quot;: &quot;日常思村&quot; &#125; ], &quot;total&quot;: 109, &quot;more&quot;: true&#125; 评论点赞不好使，以后排查 http://116.196.87.226:3000/comment/like?id=908984796&amp;cid=648416766&amp;t=1&amp;type=4&amp;t=1","categories":[],"tags":[{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://blog.valorachen.club/tags/网易云音乐/"}]},{"title":"网易云音乐API Part1(登录，用户，歌单)","slug":"网易云音乐API Part1(登录，用户，歌单)","date":"2017-12-21T08:21:03.000Z","updated":"2018-01-01T15:39:02.375Z","comments":true,"path":"2017/12/21/网易云音乐API Part1(登录，用户，歌单)/","link":"","permalink":"http://blog.valorachen.club/2017/12/21/网易云音乐API Part1(登录，用户，歌单)/","excerpt":"","text":"测试相关用户id=1317458286 用户最爱歌歌单id=2023423393 歌曲id=289145 专辑id=28688 歌单id=381180171 MVid=381180171 电台节目id=908984796 电台评论id=648416766 登录手机登陆http://116.196.87.226:3000/login/cellphone?phone=15926099436&amp;password=qpb110120 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&#123; &quot;loginType&quot;: 1, &quot;code&quot;: 200, &quot;account&quot;: &#123; &quot;id&quot;: 1317458286, &quot;userName&quot;: &quot;1_15926099436&quot;, &quot;type&quot;: 1, &quot;status&quot;: 0, &quot;whitelistAuthority&quot;: 0, &quot;createTime&quot;: 1513839036003, &quot;salt&quot;: &quot;[B@284f9da3&quot;, &quot;tokenVersion&quot;: 0, &quot;ban&quot;: 0, &quot;baoyueVersion&quot;: 0, &quot;donateVersion&quot;: 0, &quot;vipType&quot;: 0, &quot;viptypeVersion&quot;: 0, &quot;anonimousUser&quot;: false &#125;, &quot;profile&quot;: &#123; &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;defaultAvatar&quot;: true, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;gender&quot;: 0, &quot;birthday&quot;: -2209017600000, &quot;city&quot;: 210200, &quot;userId&quot;: 1317458286, &quot;vipType&quot;: 0, &quot;accountStatus&quot;: 0, &quot;avatarImgId&quot;: 18686200114669624, &quot;experts&quot;: &#123;&#125;, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;remarkName&quot;: null, &quot;mutual&quot;: false, &quot;province&quot;: 210000, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 0, &quot;backgroundImgId&quot;: 109951162868128400, &quot;userType&quot;: 0, &quot;description&quot;: &quot;&quot;, &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;djStatus&quot;: 0, &quot;followed&quot;: false, &quot;signature&quot;: &quot;&quot;, &quot;authority&quot;: 0, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;bindings&quot;: [ &#123; &quot;userId&quot;: 1317458286, &quot;url&quot;: &quot;&quot;, &quot;tokenJsonStr&quot;: &quot;&#123;\\&quot;countrycode\\&quot;:\\&quot;\\&quot;,\\&quot;cellphone\\&quot;:\\&quot;15926099436\\&quot;,\\&quot;hasPassword\\&quot;:true&#125;&quot;, &quot;expired&quot;: false, &quot;expiresIn&quot;: 2147483647, &quot;refreshTime&quot;: 1513839036, &quot;id&quot;: 6508347690, &quot;type&quot;: 1 &#125; ]&#125; 刷新登录http://116.196.87.226:3000/login/refresh?uid=1317458286 123&#123; &quot;code&quot;: 200&#125; 用户获取用户详情http://116.196.87.226:3000/user/detail?uid=1317458286 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&#123; &quot;profile&quot;: &#123; &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;djStatus&quot;: 0, &quot;followed&quot;: false, &quot;province&quot;: 210000, &quot;defaultAvatar&quot;: true, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;gender&quot;: 0, &quot;birthday&quot;: -2209017600000, &quot;city&quot;: 210200, &quot;userId&quot;: 1317458286, &quot;remarkName&quot;: null, &quot;mutual&quot;: false, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;vipType&quot;: 0, &quot;accountStatus&quot;: 0, &quot;avatarImgId&quot;: 18686200114669624, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;description&quot;: &quot;&quot;, &quot;experts&quot;: &#123;&#125;, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 0, &quot;backgroundImgId&quot;: 109951162868128400, &quot;userType&quot;: 0, &quot;signature&quot;: &quot;&quot;, &quot;authority&quot;: 0, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot;, &quot;followeds&quot;: 0, &quot;follows&quot;: 4, &quot;blacklist&quot;: false, &quot;eventCount&quot;: 0, &quot;playlistCount&quot;: 1, &quot;playlistBeSubscribedCount&quot;: 0 &#125;, &quot;level&quot;: 0, &quot;listenSongs&quot;: 0, &quot;userPoint&quot;: &#123; &quot;userId&quot;: 1317458286, &quot;balance&quot;: 0, &quot;updateTime&quot;: 1513839151108, &quot;version&quot;: 0, &quot;status&quot;: 0, &quot;blockBalance&quot;: 0 &#125;, &quot;mobileSign&quot;: false, &quot;pcSign&quot;: false, &quot;peopleCanSeeMyPlayRecord&quot;: true, &quot;bindings&quot;: [ &#123; &quot;refreshTime&quot;: 1513839036, &quot;expiresIn&quot;: 2147483647, &quot;userId&quot;: 1317458286, &quot;tokenJsonStr&quot;: &quot;&#123;\\&quot;countrycode\\&quot;:\\&quot;\\&quot;,\\&quot;cellphone\\&quot;:\\&quot;15926099436\\&quot;,\\&quot;hasPassword\\&quot;:true&#125;&quot;, &quot;url&quot;: &quot;&quot;, &quot;expired&quot;: false, &quot;id&quot;: 6508347690, &quot;type&quot;: 1 &#125; ], &quot;adValid&quot;: true, &quot;code&quot;: 200, &quot;createTime&quot;: 1513839036003, &quot;createDays&quot;: 1&#125; 获取用户信息,歌单，收藏，mv, dj 数量http://116.196.87.226:3000/user/subcount?uid=1317458286 1234567891011&#123; &quot;programCount&quot;: 0, &quot;djRadioCount&quot;: 1, &quot;mvCount&quot;: 0, &quot;artistCount&quot;: 1, &quot;newProgramCount&quot;: 0, &quot;createDjRadioCount&quot;: 0, &quot;createdPlaylistCount&quot;: 2, &quot;subPlaylistCount&quot;: 0, &quot;code&quot;: 200&#125; 获取用户歌单http://116.196.87.226:3000/user/playlist?uid=1317458286 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&#123; &quot;more&quot;: false, &quot;playlist&quot;: [ &#123; &quot;subscribers&quot;: [], &quot;subscribed&quot;: false, &quot;creator&quot;: &#123; &quot;defaultAvatar&quot;: true, &quot;province&quot;: 210000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 0, &quot;city&quot;: 210200, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 1317458286, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 18686200114669624, &quot;backgroundImgId&quot;: 109951162868128400, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;artists&quot;: null, &quot;tracks&quot;: null, &quot;ordered&quot;: false, &quot;tags&quot;: [], &quot;adType&quot;: 0, &quot;trackNumberUpdateTime&quot;: 1513839634576, &quot;subscribedCount&quot;: 0, &quot;cloudTrackCount&quot;: 1, &quot;description&quot;: null, &quot;status&quot;: 0, &quot;userId&quot;: 1317458286, &quot;privacy&quot;: 0, &quot;newImported&quot;: false, &quot;trackCount&quot;: 2, &quot;playCount&quot;: 0, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/JpBJUNOXqGtVxRUxF5Y0eg==/3422779698817209.jpg&quot;, &quot;trackUpdateTime&quot;: 1513839634576, &quot;coverImgId&quot;: 3422779698817209, &quot;createTime&quot;: 1513839151074, &quot;updateTime&quot;: 1513839634576, &quot;specialType&quot;: 5, &quot;anonimous&quot;: false, &quot;commentThreadId&quot;: &quot;A_PL_0_2023423393&quot;, &quot;totalDuration&quot;: 0, &quot;highQuality&quot;: false, &quot;name&quot;: &quot;我任何人都不是喜欢的音乐&quot;, &quot;id&quot;: 2023423393 &#125;, &#123; &quot;subscribers&quot;: [], &quot;subscribed&quot;: false, &quot;creator&quot;: &#123; &quot;defaultAvatar&quot;: true, &quot;province&quot;: 210000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 0, &quot;city&quot;: 210200, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 1317458286, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 18686200114669624, &quot;backgroundImgId&quot;: 109951162868128400, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;artists&quot;: null, &quot;tracks&quot;: null, &quot;ordered&quot;: false, &quot;tags&quot;: [], &quot;adType&quot;: 0, &quot;trackNumberUpdateTime&quot;: 1513839587071, &quot;subscribedCount&quot;: 0, &quot;cloudTrackCount&quot;: 0, &quot;description&quot;: null, &quot;status&quot;: 0, &quot;userId&quot;: 1317458286, &quot;privacy&quot;: 0, &quot;newImported&quot;: false, &quot;trackCount&quot;: 1, &quot;playCount&quot;: 0, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/EOJK7dx4E9CkYxgrdSuuLw==/17756013277390221.jpg&quot;, &quot;trackUpdateTime&quot;: 1513839587135, &quot;coverImgId&quot;: 17756013277390220, &quot;createTime&quot;: 1513839543318, &quot;updateTime&quot;: 1513839587071, &quot;specialType&quot;: 0, &quot;anonimous&quot;: false, &quot;commentThreadId&quot;: &quot;A_PL_0_2023422484&quot;, &quot;totalDuration&quot;: 0, &quot;highQuality&quot;: false, &quot;name&quot;: &quot;歌单&quot;, &quot;id&quot;: 2023422484, &quot;coverImgId_str&quot;: &quot;17756013277390221&quot; &#125; ], &quot;code&quot;: 200&#125; 获取用户电台好像有点问题，不该没有数据 http://116.196.87.226:3000/user/dj?uid=1317458286 123456&#123; &quot;code&quot;: 200, &quot;count&quot;: 0, &quot;programs&quot;: [], &quot;more&quot;: false&#125; 获取用户关注列表http://116.196.87.226:3000/user/follows?uid=1317458286&amp;limit=2&amp;offset=0 可选参数: limit : 返回数量,默认为30 offset : 偏移数量，用于分页,如: 如:(页数-1)x30, 其中 30 为 limit 的值,默认为0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&#123; &quot;follow&quot;: [ &#123; &quot;py&quot;: &quot;wyxw&quot;, &quot;time&quot;: 0, &quot;userId&quot;: 1316351656, &quot;followed&quot;: false, &quot;experts&quot;: null, &quot;followeds&quot;: 31067, &quot;userType&quot;: 3, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 1, &quot;follows&quot;: 8, &quot;mutual&quot;: false, &quot;gender&quot;: 1, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/yRELewNVfQnmTnoNiNRvUw==/18730180581314249.jpg&quot;, &quot;vipType&quot;: 0, &quot;accountStatus&quot;: 0, &quot;nickname&quot;: &quot;网易新闻&quot;, &quot;remarkName&quot;: null, &quot;signature&quot;: &quot;我们为你提供丰富的资讯，也包容你天马行空的想法，愿与每个年轻态度一起逆生长，相遇、相知、相伴，各凭态度乘风浪。未知的世界，在新鲜有趣的短视频里，在海量的新闻事实里，在犀利的跟贴里，在独到的原创里，在最热的直播里，在“网易号”的自媒体平台里，和网易新闻一起去探索未知的世界吧！&quot;, &quot;blacklist&quot;: false, &quot;eventCount&quot;: 5, &quot;playlistCount&quot;: 1 &#125;, &#123; &quot;py&quot;: &quot;wyUFOdl&quot;, &quot;time&quot;: 0, &quot;userId&quot;: 48353, &quot;followed&quot;: false, &quot;experts&quot;: null, &quot;followeds&quot;: 99999, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 1, &quot;follows&quot;: 64, &quot;mutual&quot;: false, &quot;gender&quot;: 1, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/93GM3dF-epgkpmn7xdjseQ==/109951162797195316.jpg&quot;, &quot;vipType&quot;: 11, &quot;accountStatus&quot;: 0, &quot;nickname&quot;: &quot;网易UFO丁磊&quot;, &quot;remarkName&quot;: null, &quot;signature&quot;: &quot;做音乐是为了灵魂的对话与沟通〜&quot;, &quot;blacklist&quot;: false, &quot;eventCount&quot;: 826, &quot;playlistCount&quot;: 28 &#125;, &#123; &quot;py&quot;: &quot;yylxms&quot;, &quot;time&quot;: 0, &quot;userId&quot;: 9003, &quot;followed&quot;: true, &quot;experts&quot;: null, &quot;followeds&quot;: 99999, &quot;userType&quot;: 0, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 1, &quot;follows&quot;: 396, &quot;mutual&quot;: false, &quot;gender&quot;: 0, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/3izpdkVvIPM0s3YZ2pnlaw==/109951163068642813.jpg&quot;, &quot;vipType&quot;: 11, &quot;accountStatus&quot;: 0, &quot;nickname&quot;: &quot;云音乐小秘书&quot;, &quot;remarkName&quot;: null, &quot;signature&quot;: &quot;欢迎使用网易云音乐！独立音乐人和独立厂牌相关问题请私信@原创君 ，电台主播相关问题请联系@潇洒小编，如您需要其他帮助请私信@云音乐客服 解决。&quot;, &quot;blacklist&quot;: false, &quot;eventCount&quot;: 4359, &quot;playlistCount&quot;: 62 &#125;, &#123; &quot;py&quot;: &quot;wyyyl&quot;, &quot;time&quot;: 0, &quot;userId&quot;: 1, &quot;followed&quot;: true, &quot;experts&quot;: null, &quot;followeds&quot;: 99999, &quot;userType&quot;: 2, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 1, &quot;follows&quot;: 383, &quot;mutual&quot;: false, &quot;gender&quot;: 1, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/QWMV-Ru_6149AKe0mCBXKg==/1420569024374784.jpg&quot;, &quot;vipType&quot;: 11, &quot;accountStatus&quot;: 0, &quot;nickname&quot;: &quot;网易云音乐&quot;, &quot;remarkName&quot;: null, &quot;signature&quot;: &quot;欢迎使用网易云音乐，有任何问题可以联系@云音乐客服， 我们会尽快答复。有关独立音乐人和独立厂牌请站内私信@原创君，DJ入驻联系邮箱： yunmusic@163.com&quot;, &quot;blacklist&quot;: false, &quot;eventCount&quot;: 8818, &quot;playlistCount&quot;: 126 &#125; ], &quot;touchCount&quot;: 0, &quot;more&quot;: false, &quot;code&quot;: 200&#125; 获取用户粉丝列表http://116.196.87.226:3000/user/followeds?uid=1317458286&amp;limit=2&amp;offset=0 12345678910111213141516171819202122232425262728&#123; &quot;code&quot;: 200, &quot;more&quot;: false, &quot;followeds&quot;: [ &#123; &quot;py&quot;: &quot;cgctgctgctg&quot;, &quot;time&quot;: 1513840834854, &quot;userId&quot;: 1315274973, &quot;vipType&quot;: 0, &quot;accountStatus&quot;: 0, &quot;nickname&quot;: &quot;cgctgctgctg&quot;, &quot;follows&quot;: 5, &quot;mutual&quot;: false, &quot;remarkName&quot;: null, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/Za0nWZTmwTw2Eb7X6A8eRQ==/19237055440070821.jpg&quot;, &quot;gender&quot;: 2, &quot;userType&quot;: 0, &quot;experts&quot;: null, &quot;followeds&quot;: 0, &quot;expertTags&quot;: null, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;signature&quot;: null, &quot;eventCount&quot;: 0, &quot;playlistCount&quot;: 1 &#125; ]&#125; 获取用户动态http://116.196.87.226:3000/user/event?uid=1317458286 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&#123; &quot;lasttime&quot;: 1513840986866, &quot;more&quot;: false, &quot;size&quot;: 1, &quot;events&quot;: [ &#123; &quot;actName&quot;: null, &quot;forwardCount&quot;: 0, &quot;eventTime&quot;: 1513840986866, &quot;json&quot;: &quot;&#123;\\&quot;msg\\&quot;:\\&quot;好听\\&quot;,\\&quot;song\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Midnight City\\&quot;,\\&quot;id\\&quot;:29228524,\\&quot;position\\&quot;:9,\\&quot;alias\\&quot;:[],\\&quot;status\\&quot;:0,\\&quot;fee\\&quot;:0,\\&quot;copyrightId\\&quot;:0,\\&quot;disc\\&quot;:\\&quot;1\\&quot;,\\&quot;no\\&quot;:9,\\&quot;artists\\&quot;:[&#123;\\&quot;name\\&quot;:\\&quot;Philippe Rombi\\&quot;,\\&quot;id\\&quot;:41252,\\&quot;picId\\&quot;:0,\\&quot;img1v1Id\\&quot;:0,\\&quot;briefDesc\\&quot;:\\&quot;\\&quot;,\\&quot;picUrl\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;img1v1Url\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;albumSize\\&quot;:0,\\&quot;alias\\&quot;:[],\\&quot;trans\\&quot;:\\&quot;\\&quot;,\\&quot;musicSize\\&quot;:0&#125;],\\&quot;album\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Jeune et jolie\\&quot;,\\&quot;id\\&quot;:2997937,\\&quot;type\\&quot;:\\&quot;专辑\\&quot;,\\&quot;size\\&quot;:13,\\&quot;picId\\&quot;:3227066627691471,\\&quot;blurPicUrl\\&quot;:\\&quot;http://p1.music.126.net/FIm9y-sAQd1gP7DV-7abUg==/3227066627691471.jpg\\&quot;,\\&quot;companyId\\&quot;:0,\\&quot;pic\\&quot;:3227066627691471,\\&quot;picUrl\\&quot;:\\&quot;http://p1.music.126.net/FIm9y-sAQd1gP7DV-7abUg==/3227066627691471.jpg\\&quot;,\\&quot;publishTime\\&quot;:1376841600000,\\&quot;description\\&quot;:\\&quot;\\&quot;,\\&quot;tags\\&quot;:\\&quot;\\&quot;,\\&quot;company\\&quot;:\\&quot;Cristal Records\\&quot;,\\&quot;briefDesc\\&quot;:\\&quot;\\&quot;,\\&quot;artist\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;\\&quot;,\\&quot;id\\&quot;:0,\\&quot;picId\\&quot;:0,\\&quot;img1v1Id\\&quot;:0,\\&quot;briefDesc\\&quot;:\\&quot;\\&quot;,\\&quot;picUrl\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;img1v1Url\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;albumSize\\&quot;:0,\\&quot;alias\\&quot;:[],\\&quot;trans\\&quot;:\\&quot;\\&quot;,\\&quot;musicSize\\&quot;:0&#125;,\\&quot;songs\\&quot;:[],\\&quot;alias\\&quot;:[\\&quot;花容月貌\\&quot;],\\&quot;status\\&quot;:0,\\&quot;copyrightId\\&quot;:0,\\&quot;commentThreadId\\&quot;:\\&quot;R_AL_3_2997937\\&quot;,\\&quot;artists\\&quot;:[&#123;\\&quot;name\\&quot;:\\&quot;Philippe Rombi\\&quot;,\\&quot;id\\&quot;:41252,\\&quot;picId\\&quot;:0,\\&quot;img1v1Id\\&quot;:0,\\&quot;briefDesc\\&quot;:\\&quot;\\&quot;,\\&quot;picUrl\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;img1v1Url\\&quot;:\\&quot;http://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg\\&quot;,\\&quot;albumSize\\&quot;:0,\\&quot;alias\\&quot;:[],\\&quot;trans\\&quot;:\\&quot;\\&quot;,\\&quot;musicSize\\&quot;:0&#125;],\\&quot;img80x80\\&quot;:\\&quot;http://p1.music.126.net/FIm9y-sAQd1gP7DV-7abUg==/3227066627691471.jpg?param=80x80x1\\&quot;&#125;,\\&quot;starred\\&quot;:false,\\&quot;popularity\\&quot;:50.0,\\&quot;score\\&quot;:50,\\&quot;starredNum\\&quot;:0,\\&quot;duration\\&quot;:244009,\\&quot;playedNum\\&quot;:0,\\&quot;dayPlays\\&quot;:0,\\&quot;hearTime\\&quot;:0,\\&quot;ringtone\\&quot;:null,\\&quot;crbt\\&quot;:null,\\&quot;audition\\&quot;:null,\\&quot;copyFrom\\&quot;:\\&quot;\\&quot;,\\&quot;commentThreadId\\&quot;:\\&quot;R_SO_4_29228524\\&quot;,\\&quot;rtUrl\\&quot;:null,\\&quot;ftype\\&quot;:0,\\&quot;rtUrls\\&quot;:[],\\&quot;copyright\\&quot;:2,\\&quot;hMusic\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Midnight City\\&quot;,\\&quot;id\\&quot;:52263087,\\&quot;size\\&quot;:9763553,\\&quot;extension\\&quot;:\\&quot;mp3\\&quot;,\\&quot;sr\\&quot;:44100,\\&quot;dfsId\\&quot;:0,\\&quot;bitrate\\&quot;:320000,\\&quot;playTime\\&quot;:244009,\\&quot;volumeDelta\\&quot;:-0.25&#125;,\\&quot;mMusic\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Midnight City\\&quot;,\\&quot;id\\&quot;:52263088,\\&quot;size\\&quot;:4882313,\\&quot;extension\\&quot;:\\&quot;mp3\\&quot;,\\&quot;sr\\&quot;:44100,\\&quot;dfsId\\&quot;:0,\\&quot;bitrate\\&quot;:160000,\\&quot;playTime\\&quot;:244009,\\&quot;volumeDelta\\&quot;:0.16&#125;,\\&quot;lMusic\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Midnight City\\&quot;,\\&quot;id\\&quot;:52263089,\\&quot;size\\&quot;:2929817,\\&quot;extension\\&quot;:\\&quot;mp3\\&quot;,\\&quot;sr\\&quot;:44100,\\&quot;dfsId\\&quot;:0,\\&quot;bitrate\\&quot;:96000,\\&quot;playTime\\&quot;:244009,\\&quot;volumeDelta\\&quot;:0.07&#125;,\\&quot;bMusic\\&quot;:&#123;\\&quot;name\\&quot;:\\&quot;Midnight City\\&quot;,\\&quot;id\\&quot;:52263089,\\&quot;size\\&quot;:2929817,\\&quot;extension\\&quot;:\\&quot;mp3\\&quot;,\\&quot;sr\\&quot;:44100,\\&quot;dfsId\\&quot;:0,\\&quot;bitrate\\&quot;:96000,\\&quot;playTime\\&quot;:244009,\\&quot;volumeDelta\\&quot;:0.07&#125;,\\&quot;rtype\\&quot;:0,\\&quot;rurl\\&quot;:null,\\&quot;mvid\\&quot;:5342095,\\&quot;mp3Url\\&quot;:null&#125;&#125;&quot;, &quot;pics&quot;: [], &quot;rcmdInfo&quot;: null, &quot;actId&quot;: 0, &quot;user&quot;: &#123; &quot;defaultAvatar&quot;: true, &quot;province&quot;: 210000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 0, &quot;city&quot;: 210200, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 1317458286, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 18686200114669624, &quot;backgroundImgId&quot;: 109951162868128400, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;urlAnalyze&quot;: false, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;expireTime&quot;: 0, &quot;uuid&quot;: null, &quot;showTime&quot;: 1513840986866, &quot;tmplId&quot;: 0, &quot;id&quot;: 2439921639, &quot;type&quot;: 18, &quot;topEvent&quot;: false, &quot;info&quot;: &#123; &quot;commentThread&quot;: &#123; &quot;id&quot;: &quot;A_EV_2_2439921639_1317458286&quot;, &quot;resourceInfo&quot;: null, &quot;resourceType&quot;: 2, &quot;commentCount&quot;: 0, &quot;likedCount&quot;: 0, &quot;shareCount&quot;: 0, &quot;hotCount&quot;: 0, &quot;latestLikedUsers&quot;: null, &quot;resourceId&quot;: 0, &quot;resourceOwnerId&quot;: 0, &quot;resourceTitle&quot;: null &#125;, &quot;latestLikedUsers&quot;: null, &quot;liked&quot;: false, &quot;comments&quot;: null, &quot;resourceType&quot;: 2, &quot;resourceId&quot;: 2439921639, &quot;commentCount&quot;: 0, &quot;likedCount&quot;: 0, &quot;shareCount&quot;: 0, &quot;threadId&quot;: &quot;A_EV_2_2439921639_1317458286&quot; &#125; &#125; ], &quot;code&quot;: 200&#125; 获取用户播放记录http://116.196.87.226:3000/user/record?uid=1317458286&amp;type=1 可选参数: type : type=1时只返回weekData, type=0时返回allData 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393&#123; &quot;weekData&quot;: [ &#123; &quot;playCount&quot;: 0, &quot;score&quot;: 100, &quot;song&quot;: &#123; &quot;rtUrls&quot;: [], &quot;ar&quot;: [ &#123; &quot;id&quot;: 1135024, &quot;name&quot;: &quot;ウォルピスカーター&quot; &#125; ], &quot;al&quot;: &#123; &quot;id&quot;: 3271106, &quot;name&quot;: &quot;ウォルピスカーター作品集&quot;, &quot;picUrl&quot;: &quot;http://p4.music.126.net/MP7j7DtHqLWsyH3n3TCylQ==/3351311441816054.jpg&quot;, &quot;pic_str&quot;: &quot;3351311441816054&quot;, &quot;pic&quot;: 3351311441816054 &#125;, &quot;st&quot;: 0, &quot;no&quot;: 1, &quot;djId&quot;: 0, &quot;cd&quot;: &quot;1&quot;, &quot;a&quot;: null, &quot;m&quot;: &#123; &quot;br&quot;: 160000, &quot;fid&quot;: 7956066140576293, &quot;size&quot;: 4076713, &quot;vd&quot;: -4.92 &#125;, &quot;ftype&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;t&quot;: 0, &quot;fee&quot;: 0, &quot;name&quot;: &quot;アサガオの散る頃に&quot;, &quot;id&quot;: 34078903, &quot;dt&quot;: 203781, &quot;h&quot;: null, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 7976956861488817, &quot;size&quot;: 2446045, &quot;vd&quot;: -4.99 &#125;, &quot;rtUrl&quot;: null, &quot;alia&quot;: [], &quot;pop&quot;: 100, &quot;rt&quot;: null, &quot;mst&quot;: 9, &quot;cp&quot;: 0, &quot;crbt&quot;: null, &quot;mv&quot;: 0, &quot;cf&quot;: &quot;&quot;, &quot;pst&quot;: 0, &quot;v&quot;: 4, &quot;privilege&quot;: &#123; &quot;id&quot;: 34078903, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: 0, &quot;pl&quot;: 192000, &quot;dl&quot;: 192000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 192000, &quot;fl&quot;: 320000, &quot;toast&quot;: false, &quot;flag&quot;: 0, &quot;preSell&quot;: false &#125; &#125; &#125;, &#123; &quot;playCount&quot;: 0, &quot;score&quot;: 100, &quot;song&quot;: &#123; &quot;rtUrls&quot;: [], &quot;ar&quot;: [ &#123; &quot;id&quot;: 1132492, &quot;name&quot;: &quot;DJNolyn&quot; &#125; ], &quot;al&quot;: &#123; &quot;id&quot;: 3266245, &quot;name&quot;: &quot;小黄人&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/qNen46sq6Vjo-hNr41Ooyg==/3331520232351422.jpg&quot;, &quot;pic_str&quot;: &quot;3331520232351422&quot;, &quot;pic&quot;: 3331520232351422, &quot;alia&quot;: [ &quot;Minions(Original Mix)&quot; ] &#125;, &quot;st&quot;: 0, &quot;no&quot;: 1, &quot;djId&quot;: 0, &quot;cd&quot;: &quot;1&quot;, &quot;a&quot;: null, &quot;m&quot;: null, &quot;ftype&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;t&quot;: 0, &quot;fee&quot;: 0, &quot;name&quot;: &quot;Minions(Original Mix)&quot;, &quot;id&quot;: 33916538, &quot;dt&quot;: 190458, &quot;h&quot;: null, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 8002245628784228, &quot;size&quot;: 2286176, &quot;vd&quot;: -2.93 &#125;, &quot;rtUrl&quot;: null, &quot;alia&quot;: [ &quot;小黄人&quot; ], &quot;pop&quot;: 95, &quot;rt&quot;: null, &quot;mst&quot;: 9, &quot;cp&quot;: 0, &quot;crbt&quot;: null, &quot;mv&quot;: 0, &quot;cf&quot;: &quot;&quot;, &quot;pst&quot;: 0, &quot;v&quot;: 3, &quot;privilege&quot;: &#123; &quot;id&quot;: 33916538, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: 0, &quot;pl&quot;: 128000, &quot;dl&quot;: 128000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 128000, &quot;fl&quot;: 320000, &quot;toast&quot;: false, &quot;flag&quot;: 0, &quot;preSell&quot;: false &#125; &#125; &#125;, &#123; &quot;playCount&quot;: 0, &quot;score&quot;: 100, &quot;song&quot;: &#123; &quot;rtUrls&quot;: [], &quot;ar&quot;: [ &#123; &quot;id&quot;: 688722, &quot;name&quot;: &quot;Manufactured Superstars&quot; &#125; ], &quot;al&quot;: &#123; &quot;id&quot;: 3024017, &quot;name&quot;: &quot;Need For Speed: Rivals (Original Soundtrack)&quot;, &quot;picUrl&quot;: &quot;http://p4.music.126.net/hHyzrB6QeXHL3j7t99iToQ==/2544269906892438.jpg&quot;, &quot;pic_str&quot;: &quot;2544269906892438&quot;, &quot;pic&quot;: 2544269906892438 &#125;, &quot;st&quot;: 0, &quot;no&quot;: 25, &quot;djId&quot;: 0, &quot;cd&quot;: &quot;1&quot;, &quot;a&quot;: null, &quot;m&quot;: &#123; &quot;br&quot;: 160000, &quot;fid&quot;: 6661940953354342, &quot;size&quot;: 6754767, &quot;vd&quot;: 1.37892 &#125;, &quot;ftype&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;t&quot;: 0, &quot;fee&quot;: 0, &quot;name&quot;: &quot;Angry Panda&quot;, &quot;id&quot;: 29431100, &quot;dt&quot;: 337632, &quot;h&quot;: &#123; &quot;br&quot;: 320000, &quot;fid&quot;: 6670737046358499, &quot;size&quot;: 13508464, &quot;vd&quot;: 1.2681 &#125;, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 2543170395266401, &quot;size&quot;: 4053287, &quot;vd&quot;: 0.256368 &#125;, &quot;rtUrl&quot;: null, &quot;alia&quot;: [], &quot;pop&quot;: 45, &quot;rt&quot;: null, &quot;mst&quot;: 9, &quot;cp&quot;: 0, &quot;crbt&quot;: null, &quot;mv&quot;: 0, &quot;cf&quot;: &quot;&quot;, &quot;pst&quot;: 0, &quot;v&quot;: 135, &quot;privilege&quot;: &#123; &quot;id&quot;: 29431100, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: 0, &quot;pl&quot;: 320000, &quot;dl&quot;: 320000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 320000, &quot;fl&quot;: 320000, &quot;toast&quot;: false, &quot;flag&quot;: 0, &quot;preSell&quot;: false &#125; &#125; &#125;, &#123; &quot;playCount&quot;: 0, &quot;score&quot;: 100, &quot;song&quot;: &#123; &quot;rtUrls&quot;: [], &quot;ar&quot;: [ &#123; &quot;id&quot;: 41252, &quot;name&quot;: &quot;Philippe Rombi&quot; &#125; ], &quot;al&quot;: &#123; &quot;id&quot;: 2997937, &quot;name&quot;: &quot;Jeune et jolie&quot;, &quot;picUrl&quot;: &quot;http://p3.music.126.net/FIm9y-sAQd1gP7DV-7abUg==/3227066627691471.jpg&quot;, &quot;pic_str&quot;: &quot;3227066627691471&quot;, &quot;pic&quot;: 3227066627691471, &quot;alia&quot;: [ &quot;花容月貌&quot; ] &#125;, &quot;st&quot;: 0, &quot;no&quot;: 9, &quot;djId&quot;: 0, &quot;cd&quot;: &quot;1&quot;, &quot;a&quot;: null, &quot;m&quot;: &#123; &quot;br&quot;: 160000, &quot;fid&quot;: 3238061744113148, &quot;size&quot;: 4882313, &quot;vd&quot;: 0.16 &#125;, &quot;ftype&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;t&quot;: 0, &quot;fee&quot;: 0, &quot;name&quot;: &quot;Midnight City&quot;, &quot;id&quot;: 29228524, &quot;dt&quot;: 244009, &quot;h&quot;: &#123; &quot;br&quot;: 320000, &quot;fid&quot;: 3223768092948400, &quot;size&quot;: 9763553, &quot;vd&quot;: -0.25 &#125;, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 3232564185976273, &quot;size&quot;: 2929817, &quot;vd&quot;: 0.07 &#125;, &quot;rtUrl&quot;: null, &quot;alia&quot;: [], &quot;pop&quot;: 50, &quot;rt&quot;: null, &quot;mst&quot;: 9, &quot;cp&quot;: 0, &quot;crbt&quot;: null, &quot;mv&quot;: 5342095, &quot;cf&quot;: &quot;&quot;, &quot;pst&quot;: 0, &quot;v&quot;: 3, &quot;privilege&quot;: &#123; &quot;id&quot;: 29228524, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: 0, &quot;pl&quot;: 320000, &quot;dl&quot;: 320000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 320000, &quot;fl&quot;: 320000, &quot;toast&quot;: false, &quot;flag&quot;: 0, &quot;preSell&quot;: false &#125; &#125; &#125;, &#123; &quot;playCount&quot;: 0, &quot;score&quot;: 100, &quot;song&quot;: &#123; &quot;rtUrls&quot;: [], &quot;ar&quot;: [ &#123; &quot;id&quot;: 44266, &quot;name&quot;: &quot;Taylor Swift&quot; &#125; ], &quot;al&quot;: &#123; &quot;id&quot;: 201796, &quot;name&quot;: &quot;Unreleased Songs [Bootleg]&quot;, &quot;picUrl&quot;: &quot;http://p4.music.126.net/dqKqSlD7_R9ZP-KinwGdrg==/863116627857110.jpg&quot;, &quot;pic_str&quot;: &quot;863116627857110&quot;, &quot;pic&quot;: 863116627857110 &#125;, &quot;st&quot;: -1, &quot;no&quot;: 8, &quot;djId&quot;: 0, &quot;cd&quot;: &quot;1&quot;, &quot;a&quot;: null, &quot;m&quot;: &#123; &quot;br&quot;: 160000, &quot;fid&quot;: 0, &quot;size&quot;: 3985809, &quot;vd&quot;: 0 &#125;, &quot;ftype&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;t&quot;: 0, &quot;fee&quot;: 0, &quot;name&quot;: &quot;I’m Every Woman&quot;, &quot;id&quot;: 2001602, &quot;dt&quot;: 197302, &quot;h&quot;: &#123; &quot;br&quot;: 320000, &quot;fid&quot;: 0, &quot;size&quot;: 7925083, &quot;vd&quot;: -0.000265076 &#125;, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 0, &quot;size&quot;: 2406968, &quot;vd&quot;: -0.000265076 &#125;, &quot;rtUrl&quot;: null, &quot;alia&quot;: [], &quot;pop&quot;: 30, &quot;rt&quot;: &quot;&quot;, &quot;mst&quot;: 9, &quot;cp&quot;: 5003, &quot;crbt&quot;: null, &quot;mv&quot;: 0, &quot;cf&quot;: &quot;&quot;, &quot;pst&quot;: 0, &quot;v&quot;: 32, &quot;privilege&quot;: &#123; &quot;id&quot;: 2001602, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: -200, &quot;pl&quot;: 0, &quot;dl&quot;: 0, &quot;sp&quot;: 0, &quot;cp&quot;: 1, &quot;subp&quot;: 0, &quot;cs&quot;: false, &quot;maxbr&quot;: 320000, &quot;fl&quot;: 0, &quot;toast&quot;: false, &quot;flag&quot;: 0, &quot;preSell&quot;: false &#125; &#125; &#125; ], &quot;code&quot;: 200&#125; 其他获取动态消息这个api有毒，先放着吧 http://116.196.87.226:3000/event 歌单获取精品歌单可选参数: cat: tag, 比如 “华语”、”古风” 、”欧美”、”流行”,默认为”全部” 没有获知全部参数 limit: 取出歌单数量,默认为20 http://116.196.87.226:3000/top/playlist/highquality?limit=2&amp;cat=日语 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214&#123; &quot;playlists&quot;: [ &#123; &quot;name&quot;: &quot;100位欧美90后歌手：他们把青春给了音乐&quot;, &quot;id&quot;: 733122887, &quot;trackNumberUpdateTime&quot;: 1513518041820, &quot;status&quot;: 0, &quot;userId&quot;: 92582150, &quot;createTime&quot;: 1495188246916, &quot;updateTime&quot;: 1513525979919, &quot;subscribedCount&quot;: 178329, &quot;trackCount&quot;: 100, &quot;cloudTrackCount&quot;: 0, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/GPkBo_4Y05NCIAUN--dEHw==/18919296579634292.jpg&quot;, &quot;coverImgId&quot;: 18919296579634292, &quot;description&quot;: &quot;12月17日重新选曲，删减并增加了部分歌手，对百分之95的歌手代表曲目进行了替换\\n\\n由于字数限制只介绍一部分，其他歌手也值得大家深入了解\\n\\n1:【Ed Sheeran】第32届全英音乐奖最佳男歌手，专辑“×”是英国2014年的销量冠军，并成为当年的最佳专辑。和专辑女王Adele相对应的，他是单曲皇帝。单曲“Thinking Out Loud”卖出1950万份拷贝，位居21世纪第三位。2017年发行“Shape of You\\&quot;，英国乐坛迎来了历史上第3首认证5白金的单曲。同年发行第三张录音室专辑“÷”，专辑所有曲目全部进入前20，这是史无前例的事件\\n\\n2:【Charlie Puth】“See You Again\\&quot;卖出2090万份拷贝，位居21世纪第一名。MV是YouTube网站播放最多的视频，达到了30亿\\n\\n3:【Sam Smith】和Ed Sheeran平分秋色的英国顶尖歌手。2015年拿到年度单曲，年度制作，年度专辑，年度新人4项格莱美\\n\\n4:【Justin Bieber】15岁时他就拿到了和格莱美齐名的全美音乐奖。2015年和英国巨星Adele在全英单曲榜上厮杀，强行压制Adele在英国登顶。在市场更大的美国，凭借“Love Yourself\\&quot;和“Sorry”霸占年度销量榜前两名。没有任何一个人可以在相同的年纪里取得和他并肩的成就。\\n\\n5:【One Direction全员】“What Makes You Beautiful\\&quot;不仅拿到了全英音乐奖，还帮助这个成立只有1年的组合获得了美国的青睐，这是包括西城和TT在内的诸多顶尖男团都没有做到的事。2013年发行的第三张录音室专辑“Midnight Memories”成为全球年度销量冠军，全球最顶尖组合名副其实\\n\\n6:【迪斯尼重点培养的3名少女明星】\\n【Selena】代表作“We Don&apos;t Talk Anymore\\&quot;\\n【Miley】发行的电视原声带登上公告牌榜首\\n【Demi】代表作“Let It Go”\\n\\n7:【Marcua Warner】以成为全职电影配乐家为目标。想完成的事是：可以把流行乐和管弦乐联系起来\\n\\n8:【Against the Current】2017年演唱英雄联盟全球总决赛主题曲“Legends Never Die”\\n\\n9:【Louisa Johnson】X Factor最年轻的冠军，夺冠时只有17岁&quot;, &quot;tags&quot;: [ &quot;欧美&quot;, &quot;流行&quot;, &quot;90后&quot; ], &quot;playCount&quot;: 9533817, &quot;trackUpdateTime&quot;: 1513686879636, &quot;specialType&quot;: 0, &quot;totalDuration&quot;: 0, &quot;creator&quot;: &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 370000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/W8qT3N7hxEadFO3PS1vWRA==/19229358858621885.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 1, &quot;city&quot;: 371500, &quot;birthday&quot;: 913305600000, &quot;userId&quot;: 92582150, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;第十三个神&quot;, &quot;signature&quot;: &quot;宙斯翻译组群号：544038513【一个线上翻译歌词的组织】&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 19229358858621884, &quot;backgroundImgId&quot;: 18546562139475844, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/4hriPe2hHBBbnGGy8C98ig==/18546562139475844.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: [ &quot;欧美&quot; ], &quot;experts&quot;: null, &quot;djStatus&quot;: 10, &quot;vipType&quot;: 10, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;19229358858621885&quot;, &quot;backgroundImgIdStr&quot;: &quot;18546562139475844&quot;, &quot;avatarImgId_str&quot;: &quot;19229358858621885&quot; &#125;, &quot;tracks&quot;: null, &quot;subscribers&quot;: [ &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 360000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/KfyCO96683qTyRWvMbto-w==/19116109160900108.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 2, &quot;city&quot;: 360100, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 584178800, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;准港中大商学院学生&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 19116109160900108, &quot;backgroundImgId&quot;: 19099616486519212, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/RK-1U6XHDp9gjsFRFvYvTg==/19099616486519213.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;19116109160900108&quot;, &quot;backgroundImgIdStr&quot;: &quot;19099616486519213&quot;, &quot;avatarImgId_str&quot;: &quot;19116109160900108&quot; &#125; ], &quot;subscribed&quot;: false, &quot;commentThreadId&quot;: &quot;A_PL_0_733122887&quot;, &quot;newImported&quot;: false, &quot;adType&quot;: 0, &quot;highQuality&quot;: true, &quot;privacy&quot;: 0, &quot;ordered&quot;: true, &quot;anonimous&quot;: false, &quot;shareCount&quot;: 1167, &quot;coverImgId_str&quot;: &quot;18919296579634292&quot;, &quot;commentCount&quot;: 1772, &quot;copywriter&quot;: &quot;欢迎大家收听“什么？他们竟然是90后？ ”系列&quot;, &quot;tag&quot;: &quot;欧美&quot; &#125;, &#123; &quot;name&quot;: &quot;这些充满『强烈画面感』的音乐&quot;, &quot;id&quot;: 156934569, &quot;trackNumberUpdateTime&quot;: 1508504406552, &quot;status&quot;: 0, &quot;userId&quot;: 31925677, &quot;createTime&quot;: 1453260912133, &quot;updateTime&quot;: 1512896790135, &quot;subscribedCount&quot;: 876971, &quot;trackCount&quot;: 448, &quot;cloudTrackCount&quot;: 0, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/uXbDB1aWsp36_I_lQs-DeA==/1411772930113118.jpg&quot;, &quot;coverImgId&quot;: 1411772930113118, &quot;description&quot;: &quot;与其说是画面感，更不如说是80、90后的回忆。歌单包含了我们这一代人从小到大耳熟能详的音乐。从周星驰到新闻联播，从大风车到数码宝贝，从法兰城到魔兽世界，总会有一首能让你回想起生命中最美好的时刻。\\n\\n01-20：周星驰系列音乐\\n音乐在对情绪的渲染是最直接有效的，周星驰电影里出现过数以百计的歌曲，大部分都是用来解构、戏谑，其中很多更由他亲自唱起。它们或励志，或伤感，或诙谐，或深情，和电影一起打动了无数观众。\\n\\n20-30：电视台背景音乐\\n中央电视台的一些常用音乐，几十年如一日。只要听到这熟悉的旋律，就会想起小时候跟爷爷奶奶一起看电视的日子。\\n\\n31-43：学生时代的记忆\\n几乎每个学校都是这些音乐，除此之外还有广播体操。有多少人喜欢做体操只是为了可以在体转运动时回头偷看一个人？\\n\\n44-68：耳熟能详的音乐\\n包含一些曾经在电视上频繁播放过的音乐。\\n\\n69-91：86版西游记歌曲\\n经典的86版西游记电视剧配乐原声，节选其中几首。贯穿了我们的整个暑假，百看不厌，百听不腻。\\n\\n92-104：网络恶搞音乐\\n从雷军到奥巴马，没被恶搞过的人不叫名人。\\n\\n105-216：电视剧、影视歌曲\\n小时候有太多经典的电视剧，你能说出几部？每首片头片尾曲都能够成为经典。\\n\\n217-239：经典流行歌曲\\n10年前，你在听什么歌？那个时候，不只有周杰伦，也没那么容易出道。\\n\\n240-258：鬼畜、另类歌曲\\n网友是有才的，这里有江南皮革厂，也有滑板鞋。\\n\\n259-363：动漫卡通歌曲\\n我们的童年是大风车、动画城、数码宝贝、神奇宝贝。这里没有喜羊羊，没有熊大熊二。\\n\\n364-448：游戏音乐\\n你还记得这些伴随我们童年的声音吗？超级玛丽、魂斗罗、马戏团等，永不褪色的童年回忆。\\n&quot;, &quot;tags&quot;: [ &quot;华语&quot;, &quot;放松&quot;, &quot;影视原声&quot; ], &quot;playCount&quot;: 40445376, &quot;trackUpdateTime&quot;: 1513796888053, &quot;specialType&quot;: 0, &quot;totalDuration&quot;: 0, &quot;creator&quot;: &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 350000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/XUOL_7vvPICLsF-t0hS1zQ==/109951163044041721.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 1, &quot;city&quot;: 350200, &quot;birthday&quot;: 654192000000, &quot;userId&quot;: 31925677, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;半泽树&quot;, &quot;signature&quot;: &quot;云村自媒体，每日分享新鲜有趣的短视频，如有侵权，请联系删除。本身是一名摇滚爱好者，披头士、大卫鲍伊粉丝。&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 109951163044041730, &quot;backgroundImgId&quot;: 109951163039740560, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/obV7H1zUaj9kDPyK45kHjQ==/109951163039740567.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: [ &quot;影视原声&quot;, &quot;欧美&quot; ], &quot;experts&quot;: &#123; &quot;1&quot;: &quot;视频达人&quot; &#125;, &quot;djStatus&quot;: 10, &quot;vipType&quot;: 11, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;109951163044041721&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951163039740567&quot;, &quot;avatarImgId_str&quot;: &quot;109951163044041721&quot; &#125;, &quot;tracks&quot;: null, &quot;subscribers&quot;: [ &#123; &quot;defaultAvatar&quot;: false, &quot;province&quot;: 230000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/e_k7_iddMPYEsf0CMjVOkQ==/109951162895539086.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 1, &quot;city&quot;: 230100, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 447283797, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;孫django&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 109951162895539090, &quot;backgroundImgId&quot;: 109951162868126480, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/_f8R60U9mZ42sSNvdPn2sQ==/109951162868126486.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;109951162895539086&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868126486&quot;, &quot;avatarImgId_str&quot;: &quot;109951162895539086&quot; &#125; ], &quot;subscribed&quot;: false, &quot;commentThreadId&quot;: &quot;A_PL_0_156934569&quot;, &quot;newImported&quot;: false, &quot;adType&quot;: 0, &quot;highQuality&quot;: true, &quot;privacy&quot;: 0, &quot;ordered&quot;: true, &quot;anonimous&quot;: false, &quot;shareCount&quot;: 38705, &quot;commentCount&quot;: 11662, &quot;copywriter&quot;: &quot;总有一首歌能让你回想起生命中那些最美好的时刻&quot;, &quot;tag&quot;: &quot;华语&quot; &#125; ], &quot;code&quot;: 200, &quot;more&quot;: true, &quot;lasttime&quot;: 1512896790135, &quot;total&quot;: 222&#125; 获取歌单详情这个反人类的命名，让人产生直接调网易云接口的冲动 http://116.196.87.226:3000/playlist/detail?id=2023423393 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231&#123; &quot;playlist&quot;: &#123; &quot;subscribers&quot;: [], &quot;subscribed&quot;: false, &quot;creator&quot;: &#123; &quot;defaultAvatar&quot;: true, &quot;province&quot;: 210000, &quot;authStatus&quot;: 0, &quot;followed&quot;: false, &quot;avatarUrl&quot;: &quot;http://p1.music.126.net/VnZiScyynLG7atLIZ2YPkw==/18686200114669622.jpg&quot;, &quot;accountStatus&quot;: 0, &quot;gender&quot;: 0, &quot;city&quot;: 210200, &quot;birthday&quot;: -2209017600000, &quot;userId&quot;: 1317458286, &quot;userType&quot;: 0, &quot;nickname&quot;: &quot;我任何人都不是&quot;, &quot;signature&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;detailDescription&quot;: &quot;&quot;, &quot;avatarImgId&quot;: 18686200114669624, &quot;backgroundImgId&quot;: 109951162868128400, &quot;backgroundUrl&quot;: &quot;http://p1.music.126.net/2zSNIqTcpHL2jIvU6hG0EA==/109951162868128395.jpg&quot;, &quot;authority&quot;: 0, &quot;mutual&quot;: false, &quot;expertTags&quot;: null, &quot;experts&quot;: null, &quot;djStatus&quot;: 0, &quot;vipType&quot;: 0, &quot;remarkName&quot;: null, &quot;avatarImgIdStr&quot;: &quot;18686200114669622&quot;, &quot;backgroundImgIdStr&quot;: &quot;109951162868128395&quot;, &quot;avatarImgId_str&quot;: &quot;18686200114669622&quot; &#125;, &quot;tracks&quot;: [ &#123; &quot;name&quot;: &quot;恋爱循环 - 左右声道音乐娘制作&quot;, &quot;id&quot;: 34341540, &quot;pst&quot;: 0, &quot;t&quot;: 0, &quot;ar&quot;: [ &#123; &quot;id&quot;: 16456, &quot;name&quot;: &quot;花澤香菜&quot;, &quot;tns&quot;: [], &quot;alias&quot;: [] &#125;, &#123; &quot;id&quot;: 16690, &quot;name&quot;: &quot;釘宮理恵&quot;, &quot;tns&quot;: [], &quot;alias&quot;: [] &#125; ], &quot;alia&quot;: [], &quot;pop&quot;: 100, &quot;st&quot;: 0, &quot;rt&quot;: null, &quot;fee&quot;: 0, &quot;v&quot;: 465, &quot;crbt&quot;: null, &quot;cf&quot;: &quot;&quot;, &quot;al&quot;: &#123; &quot;id&quot;: 3271560, &quot;name&quot;: &quot;最新热歌慢摇110&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/qUliwrBDR_QBjNIyipbIRQ==/3296335861579907.jpg&quot;, &quot;tns&quot;: [], &quot;pic&quot;: 3296335861579907 &#125;, &quot;dt&quot;: 254720, &quot;h&quot;: null, &quot;m&quot;: null, &quot;l&quot;: &#123; &quot;br&quot;: 96000, &quot;fid&quot;: 0, &quot;size&quot;: 3057310, &quot;vd&quot;: -0.53 &#125;, &quot;a&quot;: null, &quot;cd&quot;: &quot;&quot;, &quot;no&quot;: 1, &quot;rtUrl&quot;: null, &quot;ftype&quot;: 0, &quot;rtUrls&quot;: [], &quot;djId&quot;: 0, &quot;copyright&quot;: 2, &quot;s_id&quot;: 0, &quot;cp&quot;: 0, &quot;mv&quot;: 0, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;mst&quot;: 9, &quot;publishTime&quot;: 1388505600004 &#125;, &#123; &quot;name&quot;: &quot;Anywhere&quot;, &quot;id&quot;: 514055280, &quot;pst&quot;: 0, &quot;t&quot;: 0, &quot;ar&quot;: [ &#123; &quot;id&quot;: 74575, &quot;name&quot;: &quot;Rita Ora&quot;, &quot;tns&quot;: [], &quot;alias&quot;: [] &#125; ], &quot;alia&quot;: [], &quot;pop&quot;: 100, &quot;st&quot;: 0, &quot;rt&quot;: null, &quot;fee&quot;: 8, &quot;v&quot;: 23, &quot;crbt&quot;: null, &quot;cf&quot;: &quot;&quot;, &quot;al&quot;: &#123; &quot;id&quot;: 36632041, &quot;name&quot;: &quot;Anywhere&quot;, &quot;picUrl&quot;: &quot;http://p1.music.126.net/6m8cyoQrTvqaplZGx4iuxA==/109951163046410809.jpg&quot;, &quot;tns&quot;: [], &quot;pic_str&quot;: &quot;109951163046410809&quot;, &quot;pic&quot;: 109951163046410820 &#125;, &quot;dt&quot;: 214332, &quot;h&quot;: &#123; &quot;br&quot;: 320000, &quot;fid&quot;: 0, &quot;size&quot;: 8575521, &quot;vd&quot;: -3 &#125;, &quot;m&quot;: &#123; &quot;br&quot;: 192000, &quot;fid&quot;: 0, &quot;size&quot;: 5145330, &quot;vd&quot;: -2 &#125;, &quot;l&quot;: &#123; &quot;br&quot;: 128000, &quot;fid&quot;: 0, &quot;size&quot;: 3430235, &quot;vd&quot;: -2 &#125;, &quot;a&quot;: null, &quot;cd&quot;: &quot;1&quot;, &quot;no&quot;: 1, &quot;rtUrl&quot;: null, &quot;ftype&quot;: 0, &quot;rtUrls&quot;: [], &quot;djId&quot;: 0, &quot;copyright&quot;: 2, &quot;s_id&quot;: 0, &quot;cp&quot;: 7001, &quot;mv&quot;: 5687027, &quot;rtype&quot;: 0, &quot;rurl&quot;: null, &quot;mst&quot;: 9, &quot;publishTime&quot;: 1508457600000 &#125; ], &quot;trackIds&quot;: [ &#123; &quot;id&quot;: 34341540, &quot;v&quot;: 466 &#125;, &#123; &quot;id&quot;: 514055280, &quot;v&quot;: 24 &#125; ], &quot;ordered&quot;: false, &quot;tags&quot;: [], &quot;status&quot;: 0, &quot;subscribedCount&quot;: 0, &quot;cloudTrackCount&quot;: 1, &quot;updateTime&quot;: 1513839634576, &quot;privacy&quot;: 0, &quot;newImported&quot;: false, &quot;specialType&quot;: 5, &quot;coverImgId&quot;: 3422779698817209, &quot;createTime&quot;: 1513839151074, &quot;coverImgUrl&quot;: &quot;http://p1.music.126.net/JpBJUNOXqGtVxRUxF5Y0eg==/3422779698817209.jpg&quot;, &quot;trackUpdateTime&quot;: 1513843970028, &quot;trackCount&quot;: 2, &quot;highQuality&quot;: false, &quot;commentThreadId&quot;: &quot;A_PL_0_2023423393&quot;, &quot;userId&quot;: 1317458286, &quot;playCount&quot;: 0, &quot;adType&quot;: 0, &quot;description&quot;: null, &quot;trackNumberUpdateTime&quot;: 1513839634576, &quot;name&quot;: &quot;我任何人都不是喜欢的音乐&quot;, &quot;id&quot;: 2023423393, &quot;shareCount&quot;: 0, &quot;commentCount&quot;: 0 &#125;, &quot;code&quot;: 200, &quot;privileges&quot;: [ &#123; &quot;id&quot;: 34341540, &quot;fee&quot;: 0, &quot;payed&quot;: 0, &quot;st&quot;: 0, &quot;pl&quot;: 96000, &quot;dl&quot;: 96000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 96000, &quot;fl&quot;: 320000, &quot;toast&quot;: false, &quot;flag&quot;: 0 &#125;, &#123; &quot;id&quot;: 514055280, &quot;fee&quot;: 8, &quot;payed&quot;: 1, &quot;st&quot;: 0, &quot;pl&quot;: 999000, &quot;dl&quot;: 999000, &quot;sp&quot;: 7, &quot;cp&quot;: 1, &quot;subp&quot;: 1, &quot;cs&quot;: false, &quot;maxbr&quot;: 999000, &quot;fl&quot;: 128000, &quot;toast&quot;: false, &quot;flag&quot;: 0 &#125; ]&#125; 添加或删除歌单歌曲添加http://116.196.87.226:3000/playlist/tracks?op=add&amp;pid=2023423393&amp;tracks=289145 添加成功 123456&#123; &quot;trackIds&quot;: &quot;[289145]&quot;, &quot;code&quot;: 200, &quot;count&quot;: 3, &quot;cloudCount&quot;: 1&#125; 添加重复 123&#123; &quot;code&quot;: 502&#125; 删除http://116.196.87.226:3000/playlist/tracks?op=del&amp;pid=2023423393&amp;tracks=289145 12345&#123; &quot;code&quot;: 200, &quot;count&quot;: 2, &quot;cloudCount&quot;: 1&#125;","categories":[],"tags":[{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://blog.valorachen.club/tags/网易云音乐/"}]},{"title":"在Centos部署NodeJs服务端心得","slug":"在Centos部署NodeJs服务端心得","date":"2017-12-20T08:01:37.000Z","updated":"2018-04-14T03:58:39.256Z","comments":true,"path":"2017/12/20/在Centos部署NodeJs服务端心得/","link":"","permalink":"http://blog.valorachen.club/2017/12/20/在Centos部署NodeJs服务端心得/","excerpt":"","text":"前言因为项目需要，现需将NeteaseCloudMusicApi部署到服务器上运行，此项目是nodejs写的，所以服务器上需要安装nodejs。在实际操作的过程中，我遇到了一些问题，现记录于此文。 问题运行时报错原因：此项目对于nodejs版本有要求，不能使用5x以下的版本运行。 解决过程：安装不同版本的nodejs，直到找到可以运行程序的版本。 经验：nodejs迭代较快，下次遇到nodejs项目时一定要考虑其版本是否合适。 关闭控制台后程序停止运行原因：需要运行forever命令来保持程序始终在后台运行 解决过程：安装forever命令 1sudo npm install forever -g 1forever start app.js npm安装forever命令失败原因：npm版本过低 解决过程：安装nodejs-6x（参考：https://nodejs.org/en/download/package-manager/） 12curl --silent --location https://rpm.nodesource.com/setup_6.x | sudo bash -sudo yum -y install nodejs","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.valorachen.club/tags/Linux/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://blog.valorachen.club/tags/网易云音乐/"},{"name":"nodejs","slug":"nodejs","permalink":"http://blog.valorachen.club/tags/nodejs/"}]},{"title":"网易云音乐下载链接API分析","slug":"网易云音乐下载链接API分析","date":"2017-12-20T03:19:22.000Z","updated":"2018-01-01T15:39:02.380Z","comments":true,"path":"2017/12/20/网易云音乐下载链接API分析/","link":"","permalink":"http://blog.valorachen.club/2017/12/20/网易云音乐下载链接API分析/","excerpt":"","text":"获取歌曲文件go版1234567891011121314func encrypt_id(id string) string &#123; byte1 := []byte(&quot;3go8&amp;$8*3*3h0k(2)2&quot;) byte2 := []byte(id) for i := 0; i &lt; len(byte2); i++ &#123; byte2[i] = byte2[i] ^ byte1[i%len(byte1)] &#125; m := md5.New() m.Write(byte2) s := base64.StdEncoding.EncodeToString(m.Sum(nil)) m.Reset() s = strings.Replace(s, &quot;+&quot;, &quot;-&quot;, -1) s = strings.Replace(s, &quot;/&quot;, &quot;_&quot;, -1) return s&#125; php版1234567891011121314import md5def encrypted_id(id): byte1 = bytearray(&apos;3go8&amp;$8*3*3h0k(2)2&apos;) byte2 = bytearray(id) byte1_len = len(byte1) for i in xrange(len(byte2)): byte2[i] = byte2[i]^byte1[i%byte1_len] m = md5.new() m.update(byte2) result = m.digest().encode(&apos;base64&apos;)[:-1] result = result.replace(&apos;/&apos;, &apos;_&apos;) result = result.replace(&apos;+&apos;, &apos;-&apos;) return result python版12345678910111213# 歌曲加密算法, 基于https://github.com/yanunon/NeteaseCloudMusic脚本实现def encrypted_id(id): magic = bytearray(&apos;3go8&amp;$8*3*3h0k(2)2&apos;, &apos;u8&apos;) song_id = bytearray(id, &apos;u8&apos;) magic_len = len(magic) for i, sid in enumerate(song_id): song_id[i] = sid ^ magic[i % magic_len] m = hashlib.md5(song_id) result = m.digest() result = base64.b64encode(result) result = result.replace(b&apos;/&apos;, b&apos;_&apos;) result = result.replace(b&apos;+&apos;, b&apos;-&apos;) return result.decode(&apos;utf-8&apos;) Java版12345678910111213141516171819202122232425262728293031private static String getUrl (String songId, String albumId)&#123; String url = &quot;&quot;; String response = HttpRequest.sendGet(&quot;http://music.163.com/api/album/&quot;+albumId,&quot;&quot;); try &#123; JSONObject json = new JSONObject(response); JSONArray songs = json.getJSONObject(&quot;album&quot;).getJSONArray(&quot;songs&quot;); for (int i = 0; i &lt; songs.length(); i++)&#123; JSONObject song = songs.getJSONObject(i); String id = song.getString(&quot;id&quot;); if (id.equals(songId))&#123; url = song.getString(&quot;mp3Url&quot;); if (!url.equals(&quot;&quot;))&#123; return url; &#125; String dfsId; dfsId = song.getJSONObject(&quot;hMusic&quot;).getString(&quot;dfsId&quot;); if (dfsId.equals(&quot;0&quot;))&#123; dfsId = song.getJSONObject(&quot;mMusic&quot;).getString(&quot;dfsId&quot;); &#125; if (dfsId.equals(&quot;0&quot;))&#123; dfsId = song.getJSONObject(&quot;lMusic&quot;).getString(&quot;dfsId&quot;); &#125; url = &quot;http://p1.music.126.net/&quot; + encrypt_id(dfsId) + &quot;/&quot; + dfsId + &quot;.mp3&quot;; &#125; &#125; &#125; catch (JSONException e) &#123; return url; &#125; return url;&#125; 1234567891011121314151617181920private static String encrypt_id(String dfsId) &#123; byte[] b1 = &quot;3go8&amp;$8*3*3h0k(2)2&quot;.getBytes(); byte[] b2 = dfsId.getBytes(); for (int i = 0; i &lt; b2.length; i++)&#123; b2[i] = (byte) (b2[i] ^ b1[i%b1.length]); &#125; try &#123; MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;); md5.update(b2); byte[] encryption = md5.digest(); String encrypt_id = new String(Base64.getEncoder().encode(encryption)); md5.reset(); encrypt_id = encrypt_id.replace(&quot;+&quot;, &quot;-&quot;); encrypt_id = encrypt_id.replace(&quot;/&quot;, &quot;_&quot;); return encrypt_id; &#125; catch (NoSuchAlgorithmException e) &#123; return &quot;&quot;; &#125;&#125;","categories":[],"tags":[{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://blog.valorachen.club/tags/网易云音乐/"},{"name":"API","slug":"API","permalink":"http://blog.valorachen.club/tags/API/"}]},{"title":"Android复习","slug":"Android复习","date":"2017-11-10T13:37:55.000Z","updated":"2017-11-11T15:29:32.538Z","comments":true,"path":"2017/11/10/Android复习/","link":"","permalink":"http://blog.valorachen.club/2017/11/10/Android复习/","excerpt":"","text":"Activity生命周期启动：onCreate() onStart() onResume() 前台到后台：onPause() onStop() 后台到前台： onRestart() onStart() onResume() 解锁：onStart() onResume() 销毁：onPause() onStop() onDestory() 启动模式任务栈是一种后进先出的结构。 standard：每次启动Activity都会创建一个新的Activity实例,并且将其压入任务栈栈顶。 singleTop：若新Activity已经位于任务栈的栈顶,那么此Activity不会被重新创建。否则与standard相同。 singleTask：如果栈中没有此Activity，则创建此Activity。如果栈中已经有一个Activity实例,则清除在其栈顶的所有Activity，来使当前Activity达到栈顶。 singleInstance：此Activity独享一个栈，只拥有一个实例。 Activity缓存方法activity中保存数据有两种方式onPause() onSaveInstanceState(bundle)。 恢复数据也有两种途径onCreate(Bundle), onRestoreInstanceState(budle)。 onRestoreInstanceState()被调用的前提是activity A“确实”被系统销毁了。onRestoreInstanceState()的bundle参数也会传递到onCreate方法中，你也可以选择在onCreate方法中做数据还原。 onSaveInstanceState()会在onPause()或onStop()之前执行。 onRestoreInstanceState()会在onStart()和onResume()之间执行。 Fragment生命周期启动：onAttach() onCreate() onCreateView() onActivityCreated() onStart() onResume() 被替换（调用过addToBackStack()）：onPause() onStop() onDestoryView() 重新回到屏幕：onActivityCreated() onStart() onResume() 销毁：onPause() onStop() onDestoryView() onDestory() onDetach() Service不死1234@Override public int onStartCommand(Intent intent, int flags, int startId) &#123; return START_STICKY; &#125; 1android:priority = &quot;1000&quot; 当service走onDestory()的时候，发送一个自定义的广播，当收到广播的时候，重新启动service 在onDestroy()里startService 监听系统广播判断Service状态.例如：手机重启、界面唤醒、应用状态改变 放一个像素在前台 三种动画的区别tween 补间动画。通过指定View的初末状态和变化时间、方式，对View的内容完成一系列的图形变换来实现动画效果。 Alpha Scale Translate Rotate。 frame 帧动画 AnimationDrawable 控制 animation-list xml布局 PropertyAnimation 属性动画 ViewonMeasure() 大小 onDraw() 绘制 onFinishInflate() xml加载完成 onSizeChanged() onLayout() 使用此方法得到显示位置 dispathTouchEvent() 分发TouchEvent onTouchEvent() 处理TouchEvent ViewGroupdispathDraw() 绘制子View onInterceptTouchEvent() 拦截子View触摸事件 Handler、Looper、Message、MessageQueueLooper将MessageQueue中的Message分配给Hnadle来处理","categories":[],"tags":[{"name":"复习","slug":"复习","permalink":"http://blog.valorachen.club/tags/复习/"}]},{"title":"排序算法","slug":"排序算法","date":"2017-11-08T13:54:51.000Z","updated":"2017-11-09T03:38:25.118Z","comments":true,"path":"2017/11/08/排序算法/","link":"","permalink":"http://blog.valorachen.club/2017/11/08/排序算法/","excerpt":"","text":"冒泡排序12345678910111213141516171819202122#include&lt;stdio.h&gt;void bubble_sort(int a[], int n);int main()&#123; int a[] = &#123;50,40,63,20,98,41,65,78,21,34&#125;; sort2(a,10); for(int i = 0;i &lt; 10 ;i ++) printf(&quot; %d&quot;,a[i]); return 0;&#125;void bubble_sort(int a[], int n)&#123; for(int i=0;i&lt;n-1;i++)&#123; for(int j=0;j&lt;n-i;j++)&#123; if(a[j]&gt;a[j+1])&#123; int temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; &#125; &#125; &#125;&#125; 选择排序1234567891011121314151617181920212223#include &lt;stdio.h&gt;void insert_sort(int a[], int n);int main()&#123; int a[]=&#123;32,12,7, 78, 23,45&#125;; insert_sort(a,6); for(int i=0; i&lt;6; i++) printf(&quot; %d&quot;, a[i]); return 0;&#125;void insert_sort(int a[], int n) &#123; for (int i=0; i&lt;n; i++) &#123; int k = i; for (int j=i+1; j&lt;n; j++) if (a[k]&gt;a[j]) k=j; if (i!=k) &#123; int tmp=a[i]; a[i]=a[k]; a[k]=tmp; &#125; &#125;&#125; 快速排序1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;void Merge(int sourceArr[],int tempArr[], int startIndex, int midIndex, int endIndex)&#123; int i = startIndex, j=midIndex+1, k = startIndex; while(i!=midIndex+1 &amp;&amp; j!=endIndex+1)&#123; if(sourceArr[i] &gt; sourceArr[j]) tempArr[k++] = sourceArr[j++]; else tempArr[k++] = sourceArr[i++]; &#125; while(i != midIndex+1) tempArr[k++] = sourceArr[i++]; while(j != endIndex+1) tempArr[k++] = sourceArr[j++]; for(i=startIndex; i&lt;=endIndex; i++) sourceArr[i] = tempArr[i];&#125;void MergeSort(int sourceArr[], int tempArr[], int startIndex, int endIndex)&#123; int midIndex; if(startIndex &lt; endIndex)&#123; midIndex = (startIndex + endIndex) / 2; MergeSort(sourceArr, tempArr, startIndex, midIndex); MergeSort(sourceArr, tempArr, midIndex+1, endIndex); Merge(sourceArr, tempArr, startIndex, midIndex, endIndex); &#125;&#125;int main()&#123; int a[8] = &#123;50, 10, 20, 30, 70, 40, 80, 60&#125;; int i, b[8]; MergeSort(a, b, 0, 7); for(i=0; i&lt;8; i++) printf(&quot;%d &quot;, a[i]); return 0;&#125; 并归排序123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;void Merge(int a[],int b[], int start, int mid, int end);void MergeSort(int a[], int b[], int start, int end);int main()&#123; int a[8] = &#123;50, 10, 30, 20, 70, 40, 80, 60&#125;; int i, b[8]; MergeSort(a,b,0,7); for(i=0;i&lt;8;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125;void MergeSort(int a[], int b[], int start, int end)&#123; int mid; if(start&lt;end)&#123; mid = (start+end)/2; MergeSort(a,b,start,mid); MergeSort(a,b,mid+1,end); Merge(a,b,start,mid,end); &#125;&#125;void Merge(int a[],int b[], int start, int mid, int end)&#123; int i=start, j=mid+1, k=start; while(i!=mid+1 &amp;&amp; j!=end+1)&#123; if(a[i]&gt;a[j]) b[k++]=a[j++]; else b[k++]=a[i++]; &#125; while(i!=mid+1) b[k++]=a[i++]; while(j!=end+1) b[k++]=a[j++]; for(i=start;i&lt;=end;i++) a[i]=b[i];&#125;","categories":[],"tags":[{"name":"复习","slug":"复习","permalink":"http://blog.valorachen.club/tags/复习/"}]},{"title":"用Spring框架写接口时遇到的问题","slug":"用Spring框架写接口时遇到的问题","date":"2017-09-13T15:43:05.000Z","updated":"2018-10-21T03:45:59.822Z","comments":true,"path":"2017/09/13/用Spring框架写接口时遇到的问题/","link":"","permalink":"http://blog.valorachen.club/2017/09/13/用Spring框架写接口时遇到的问题/","excerpt":"","text":"前言我无法从老师的代码中找到以下三个问题的解决方案。希望老师能够简单的做个code review。这是我用IDEA写的示例项目，代码极少，仅仅为了说明问题而写的，目的是为了方便老师查看。如果老师不使用IDEA也没关系，项目已经部署到服务器上了，请戳文章中标识的服务器链接，不用运行就能查看结果。谢谢老师指点。 中文乱码问题怎么解决中文乱码？ 现象本地链接：http://localhost:8080/encode 服务器链接：http://116.196.115.166:8080/encode 我的代码12345@RequestMapping(value = &quot;/encode&quot;, method = RequestMethod.GET)@ResponseBodypublic String encode() &#123; return &quot;中文&quot;;&#125; web.xml中已经配置12345678910111213141516&lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 为了返回格式的统一而设计了BaseEntity问题在实际项目中，为了达到统一的返回格式，像这样弄个BaseEntity是合理的做法吗？有没有更优秀的方法？ 现象 找得到此用户 本地链接：http://localhost:8080/user?name=user1 服务器链接：http://116.196.115.166:8080/user?name=user1 12345678&#123; &quot;code&quot;: 200, &quot;msg&quot;: null, &quot;data&quot;: &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;user1&quot; &#125;&#125; 无法找到此用户 本地链接：http://localhost:8080/user?name=user2 服务器链接：http://116.196.115.166:8080/user?name=user2 12345&#123; &quot;code&quot;: 201, &quot;msg&quot;: &quot;此账号不存在&quot;, &quot;data&quot;: null&#125; json格式说明如下： 名称 意义 code 状态码，当code=200时表示请求成功，否则请求不合法 msg 当请求不合法时给出的说明 data 当请求成功时返回的结果 我的代码BaseEntity.java 12345678910111213141516171819202122232425262728293031323334353637383940public class BaseEntity &#123; private int code; private String msg; private Object data; public BaseEntity() &#123; &#125; public BaseEntity(int code, String msg, Object data) &#123; this.code = code; this.msg = msg; this.data = data; &#125; public void setCode(int code) &#123; this.code = code; &#125; public void setMsg(String msg) &#123; this.msg = msg; &#125; public void setData(Object data) &#123; this.data = data; &#125; public int getCode() &#123; return code; &#125; public String getMsg() &#123; return msg; &#125; public Object getData() &#123; return data; &#125;&#125; 运用JPA查询问题JPA查询到的数据都是集合，而不能得到单个数据 现象本地链接：http://localhost:8080/user?name=user1 服务器链接：http://116.196.115.166:8080/user?name=user1 我的代码UserRepository.java 123456@Repositorypublic interface UserRepository extends JpaRepository&lt;UserEntity, Integer&gt; &#123; public List&lt;UserEntity&gt; findByName(String account);&#125;","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://blog.valorachen.club/tags/Spring/"}]},{"title":"IDEA部署项目到远程Tomcat","slug":"IDEA部署项目到远程Tomcat","date":"2017-09-06T15:25:49.000Z","updated":"2018-10-21T03:45:59.715Z","comments":true,"path":"2017/09/06/IDEA部署项目到远程Tomcat/","link":"","permalink":"http://blog.valorachen.club/2017/09/06/IDEA部署项目到远程Tomcat/","excerpt":"","text":"环境Centos6.5 tomcat7 IntelliJ IDEA 2017.1.5 按着教程来我按照下面的文章几乎一步不漏地执行了相应操作： 参考：http://blog.csdn.net/tianjun2012/article/details/52795202 为什么说是几乎，是因为他文章里提到了，如果服务器的外网地址需要在/etc/hosts做映射，然而这里没有详细说明怎么去做映射，我自己也不知道怎么操作，于是仅跳过了这一步。 然而当我准备部署时，IDE报错如下： 还有一个教程，大同小异，该报错还得报错。 参考：http://blog.lanyus.com/archives/197.html 错误，因为错过的细节去网上搜索，参考如下文章的解释，IDEA部署默认是需要开启一个叫做JMX的功能，但是Tomcat默认关闭了此功能。所以要么打开JMX功能，要么不使用JMX功能。 网上搜索怎么开启JMX，发现确实是一个很繁琐的操作，tan90° 不使用JMX功能，为啥改host就能做到呢？host与JMX有毛关系，这一点笔者还是没明白。 参考：http://blog.csdn.net/Mark_LQ/article/details/52027363 类似而不一样的错误既然教程原文中也提到了host需要做什么不可描述的映射，笔者考虑可能确实与host有关，于是搜索这方面的信息，发现很多人都通过修改host而成功解决问题。 http://www.codes51.com/itwd/1482825.html http://blog.csdn.net/wingsyy_cs/article/details/53585750 http://www.wangchao.net.cn/it/detail_129876.html 但是这个解决方法对应的报错信息和我不一样。 他们的报错信息是Unable to ping server at localhost:1099 我的报错信息是Unable to connect to the [我的主机ip地址]:1099 别人都用这个方法成功解决了问题，而我却还是不行。 退而求其次我很不容易的翻到了唯一一个和我报错信息一致的问答帖 https://stackoverflow.com/questions/14085371/tomcat-intellij-idea-remote-deploy 然而他犯错太容易找出来了，少了一对””而已，很好改过来，我的错误在哪儿我还真是找死都没找出来。还好答主还提供了另一个方案，上传war包。 其实我已经知道有这个方法了，之前简单学习JavaWeb的时候我就知道把工程放到webapp目录下就相当于是部署到tomcat下了，但是现在弄spring这个方法行不通，我就想一定有别的办法，于是知道了有上传war包这个方法了。 但是网上的说法是把war扔webapp下重启服务完事，现在想起来这个说法还真的是一点都没错厚。 还是这个答主细心说明要把war改成ROOT.war然后再扔webapp下，不然就不能访问http://youripaddress:8080 刚开始我对手动上传war这个方法是拒绝的，这一点都不优雅，直接在IDE里点一个按钮就完成上传棒多了。但是鉴于我实在是被逼无奈，怎么行就怎么来吧。经过实践，发现还是得删掉webapp下的ROOT文件夹，不然还得显示tomcat那个页面。 总结我还是不懂改不改host和jmx有什么关系，我甚至不知道hos或是jmx到底是干啥的。 我还没有尝试开启jmx这个办法。 我还是不能使用IDEA一键部署项目，退而求其次采用了上传war的方法。 愿意好好把话说清楚的人都是大好人。如果教程帖能把关于host的东西也说明白就好了。而最后提到的问题答主那样详细的解答与补充，真的详细到让人感动。我不能要求别人怎么样，但是我对于自己写的文章一定是涉及到每个细节，我一直力求把所有的事情都讲得明明白白。不仅是在写文中，其实生活中的每一种信息传达方式，都应该把此放在第一位。","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://blog.valorachen.club/tags/服务器/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.valorachen.club/tags/Linux/"}]},{"title":"Centos Php 服务器配置","slug":"Centos-Php-服务器配置","date":"2017-09-04T15:55:38.000Z","updated":"2017-09-19T16:51:07.669Z","comments":true,"path":"2017/09/04/Centos-Php-服务器配置/","link":"","permalink":"http://blog.valorachen.club/2017/09/04/Centos-Php-服务器配置/","excerpt":"","text":"前言我本打算弄完Java Web所需要的运行环境就完事的，但是我发现我已经用惯了phpMyAdmin了，再换成WorkBench开始有点抓狂了，于是干脆为了phpMyAdmin把php的运行环境也配一遍 可是中途出了点事，我装完php5.6之后再装phpMyAdmin，结果需要的php是5.3版本的，卸载php和各种呕熏的依赖神烦，于是打算重装系统 我之前写的那个如何配置Java Web服务器的文章帮到了我，但是按照文章的流程走的也不是特别顺畅，甚至发现了好几处纰漏。 因为这次重装意外的发现并修复了这些纰漏，真是让人惊喜。回想起来，当初为了详记如何搭建hexo博客，我甚至重走流程以便记录每个细节，但是还是在使用文章来搭hexo博客时发现纰漏。后来修正过之后，朋友们看了此文之后还是有疑惑而亲自问我。于是我后来又添加一些补充。这正与这次事件相似。 我不会为我不能以清楚且完整的思维来写好文章而责备自己，这对我来说是强人所难。反而，我感谢这次意外的事件，让我认识到了即使再怎么努力的想一次性做好一件事，也是很难达成的。但是，反复地，多角度的审查，就能让事物变得更完备。 mysql 已在配置Java Web运行环境时配置，在此不叙述，详情参考Centos Java Web 服务器配置 环境本机环境： Centos6.5 mysql5.7 将要配置的环境： php5.3 Apache phpMyAdmin Php不添加其他php源的话，Centos6.5会安装php5.1 添加php5.3的源 1wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 启用源 1rpm -Uvh epel-release-6-8.noarch.rpm 安装1yum install php 可以看到此时php版本是5.3 1php -verson Apache安装1yum install httpd 启动1/etc/init.d/httpd start 开机自启1chkconfig httpd on 打开访问权限打开/etc/httpd/conf/httpd.conf 将 123456&lt;Directory /&gt; Options FollowSymLinks AllowOverride None Order deny,allow Deny from all&lt;/Directory&gt; 修改为 123456&lt;Directory /&gt; Options FollowSymLinks AllowOverride None Order deny,allow allow from all&lt;/Directory&gt; 重启服务生效 1/etc/init.d/httpd restart phpMyAdmin添加源1rpm -Uvh http://ftp.iij.ad.jp/pub/linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm 下载1yum install phpmyadmin 关联mysql账号密码打开/etc/phpMyAdmin/config.inc.php 12$cfg[&apos;Servers&apos;][$i][&apos;user&apos;] = &apos;账号&apos;;$cfg[&apos;Servers&apos;][$i][&apos;password&apos;] = &apos;密码&apos;; 打开访问权限打开/etc/httpd/conf.d/phpMyAdmin.conf 复制并替换如下内容到相应位置 1234567891011121314151617181920212223242526272829&lt;Directory /usr/share/phpMyAdmin/&gt; AddDefaultCharset UTF-8 &lt;IfModule mod_authz_core.c&gt; # Apache 2.4 &lt;RequireAny&gt; Require all granted &lt;/RequireAny&gt; &lt;/IfModule&gt; &lt;IfModule !mod_authz_core.c&gt; # Apache 2.2 Order Deny,Allow Allow from All &lt;/IfModule&gt;&lt;/Directory&gt;&lt;Directory /usr/share/phpMyAdmin/setup/&gt; &lt;IfModule mod_authz_core.c&gt; # Apache 2.4 &lt;RequireAny&gt; Require all granted &lt;/RequireAny&gt; &lt;/IfModule&gt; &lt;IfModule !mod_authz_core.c&gt; # Apache 2.2 Order Deny,Allow Allow from All &lt;/IfModule&gt;&lt;/Directory&gt; 重启Apache生效 1/etc/init.d/httpd restart","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://blog.valorachen.club/tags/服务器/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.valorachen.club/tags/Linux/"}]},{"title":"Centos Java Web 服务器配置","slug":"Centos-Java-Web-服务器配置","date":"2017-09-04T08:13:33.000Z","updated":"2018-10-21T03:45:59.715Z","comments":true,"path":"2017/09/04/Centos-Java-Web-服务器配置/","link":"","permalink":"http://blog.valorachen.club/2017/09/04/Centos-Java-Web-服务器配置/","excerpt":"","text":"环境本机环境：Centos6.5 将要配置的环境： jdk1.8 tomcat7 mysql5.7 地址1116.196.115.166 Java安装把java安装包传到/usr/share下 运行如下命令1tar -zxvf jdk-8u144-linux-x64.tar.gz 配置环境变量在/etc/profile末尾添加三行内容并保存 123export JAVA_HOME=/usr/share/jdk1.8.0_144export CLASSPATH=.:%JAVA_HOME%/lib/dt.jar:%JAVA_HOME%/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin 运行如下命令12source /etc/profilejavac Tomcat安装把tomcat安装包传到/usr/share下 运行如下命令1tar -zxvf apache-tomcat-7.0.81.tar.gz 启动服务运行如下命令12cd /usr/share/apache-tomcat-7.0.81/bin./startup.sh 开机运行服务参考：http://blog.csdn.net/huxu981598436/article/details/54863298 在/etc/init.d下新建一个文件tomcat 1vi /etc/init.d/tomcat 写下如下代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#!/bin/bash# chkconfig: 2345 10 90# description: Starts and Stops the Tomcat daemon.# /etc/init.d/tomcatd# Tomcat auto-start# Source function library.#. /etc/init.d/functions# source networking configuration.#. /etc/sysconfig/networkRETVAL=0export JAVA_HOME=/usr/share/jdk1.8.0_144export JRE_HOME=/usr/share/jdk1.8.0_144/jreexport CATALINA_HOME=/usr/share/apache-tomcat-7.0.67export CATALINA_BASE=/usr/share/apache-tomcat-7.0.67start()&#123; if [ -f $CATALINA_HOME/bin/startup.sh ]; then echo $&quot;Starting Tomcat&quot; $CATALINA_HOME/bin/startup.sh RETVAL=$? echo &quot; OK&quot; return $RETVAL fi&#125;stop()&#123; if [ -f $CATALINA_HOME/bin/shutdown.sh ]; then echo $&quot;Stopping Tomcat&quot; $CATALINA_HOME/bin/shutdown.sh RETVAL=$? sleep 1 ps -fwwu root | grep tomcat|grep -v grep | grep -v PID | awk &apos;&#123;print $2&#125;&apos;|xargs kill -9 echo &quot; OK&quot; # [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/... return $RETVAL fi&#125;case &quot;$1&quot; in start) start ;; stop) stop ;; restart) echo $&quot;Restaring Tomcat&quot; $0 stop sleep 1 $0 start ;; *) echo $&quot;Usage: $0 &#123;start|stop|restart&#125;&quot; exit 1 ;;esacexit $RETVAL 执行:wq 设置权限 1chmod 755 /etc/init.d/tomcat 设定开机启动服务 1sudo chkconfig tomcat on 测试 123service tomcat start service tomcat stop service tomcat restart Mysql参考：http://www.cnblogs.com/starof/p/4680083.html 安装如果使用yum命令直接安装，Centos6.5会直接安装mysql5.1。而笔者希望安装mysql5.7，所以需要添加mysql5.7的源 1wget http://repo.mysql.com//mysql57-community-release-el6-8.noarch.rpm 启用添加的源 1rpm -ivh mysql57-community-release-el6-8.noarch.rpm 查看是否启用mysql5.7的源 1yum repolist enabled | grep mysql 安装mysql5.7 1yum install mysql-community-server 注意：这里不要使用yum install mysql来安装，不然会安装mysql-client，而不是mysql-server 初始化mysql新版本需要这一步 1mysqld --initialize-insecure --user=mysql --datadir=/var/lib/mysql 如果出错，试试如下命令 1rm -rf /var/lib/mysql/* 原因分析： mysqld服务会检查数据目录是否存在 如果数据目录不存在，mysqld则会创建它。 如果数据目录存在，且不是空目录（即包含有文件或子目录），mysqld会显示一条错误信息并中止 启动服务1service mysqld start 开机自启1chkconfig mysqld on 中文编码在/etc/my.cnf中相应位置添加如下内容 12[mysql]default-character-set =utf8 修改密码参考：http://jingyan.baidu.com/article/495ba841ef412d38b30edeb2.html1mysqladmin -uroot -p password 123456 打开3306端口12/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT/etc/rc.d/init.d/iptables save 远程登录参考：http://www.cnblogs.com/starof/p/4680083.html 12mysql -uroot -p123456grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://blog.valorachen.club/tags/服务器/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.valorachen.club/tags/Linux/"}]},{"title":"软件测试复习","slug":"软件测试复习","date":"2017-08-25T01:03:57.000Z","updated":"2018-10-21T03:45:59.715Z","comments":true,"path":"2017/08/25/软件测试复习/","link":"","permalink":"http://blog.valorachen.club/2017/08/25/软件测试复习/","excerpt":"","text":"白盒测试 语句覆盖被测试程序的每条语句至少执行一次 A=2,B=0,X=4 a-&gt;c-&gt;e 判定覆盖又称分支覆盖，整体表达式的真假情况都至少取到过一次 A=2,B=0,X=4&nbsp;&nbsp;a-&gt;c-&gt;d A=1,B=0,X=1&nbsp;&nbsp;a-&gt;b-&gt;d 或者 A=3,B=0,X=1&nbsp;&nbsp;a-&gt;c-&gt;d A=2,B=1,X=1&nbsp;&nbsp;a-&gt;b-&gt;e 条件覆盖每个判定的真假至少一次 条件 真 假 A&gt;1 T1 F1 B=0 T2 F2 A=0 T3 F3 X&gt;1 T4 F4 A&nbsp;B&nbsp;X 路径 覆盖条件 2&nbsp;1&nbsp;1 a-&gt;b-&gt;e T1,F2,T3,F4 1&nbsp;0&nbsp;3 a-&gt;b-&gt;e F1,T2,F3,T4 判定-条件覆盖 A&nbsp;B&nbsp;X 路径 覆盖条件 2&nbsp;0&nbsp;4 a-&gt;c-&gt;d T1,T2,T3,T4 1&nbsp;0&nbsp;1 a-&gt;b-&gt;d F1,T2,F3,F4 2&nbsp;1&nbsp;1 a-&gt;b-&gt;d T1,F2,T3,F4 条件组合覆盖 条件 组合 T1,T1 ① T1,F2 ② F1,T2 ③ F1,F2 ④ T3,T4 ⑤ T3,F4 ⑥ F3,T4 ⑦ F3,F4 ⑧ A&nbsp;B&nbsp;X 路径 覆盖条件 覆盖组合 2&nbsp;0&nbsp;4 a-&gt;c-&gt;d T1,T2,T3,T4 ①⑤ 2&nbsp;1&nbsp;1 a-&gt;b-&gt;d T1,F2,T3,F4 ②⑥ 1&nbsp;0&nbsp;3 a-&gt;b-&gt;e F1,T2,F3,T4 ③⑦ 1&nbsp;1&nbsp;1 a-&gt;b-&gt;e F1,F2,F3,F4 ④⑧ 路径覆盖每个路径一次 A&nbsp;B&nbsp;X 路径 2&nbsp;0&nbsp;4 a-&gt;c-&gt;e 2&nbsp;1&nbsp;1 a-&gt;b-&gt;d 1&nbsp;0&nbsp;3 a-&gt;b-&gt;e 3&nbsp;0&nbsp;1 a-&gt;c-&gt;d","categories":[],"tags":[]},{"title":"操作系统复习","slug":"操作系统复习","date":"2017-08-22T06:18:00.000Z","updated":"2017-08-22T06:26:30.256Z","comments":true,"path":"2017/08/22/操作系统复习/","link":"","permalink":"http://blog.valorachen.club/2017/08/22/操作系统复习/","excerpt":"","text":"一，操作系统操作系统的定义操作系统是控制和管理计算机系统的硬件和软件资源、合理地组织工作流程以及方便用户的程序集合 操作系统管理的资源处理机 储存器 I/O设备 文件 操作系统类型单道批处理系统多道批处理系统系统从作业队列中选择若干作业调入内存运行，这些作业共享CPU和系统中的其他资源。 优点：资源利用率高，系统吞吐量大。 缺点：平均周转时间长，无交互能力 分时系统一台主机上连接多个终端，用户通过与终端的交互来使用计算机和共享主机中的资源 多路性：系统将多个终端连接到一台主机，并分时为每个用户提供服务 独立性：系统能提供给用户独占主机操作的体验 及时性：请求的响应时间及时 交互性:用户可通过终端与系统进行人机对话 实时系统一个实时系统是指计算的正确性不仅取决于程序的逻辑正确性，也取决于结果产生的时间，如果系统的时间约束条件得不到满足，将会发生系统出错。 多路性：系统周期性地对多路现场信息进行采集，以及对多个对象或多个执行机构进行控制 独立性：每个终端用户与系统的交流是独立互不干扰的，对信息的采集和对对象的控制是独立互不干扰的 及时性：系统执行的任务具有一定的时间约束 交互性：实时系统通常运行在一定的环境下，外部环境是实时系统不可缺少的一个组成部分 可靠性：系统在最坏情况下都能正常工作或避免损失 二，进程线程进程的定义进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位 进程的特征动态性：由创建而产生，由调度而执行，由撤销而消亡。有生命周期。 并发性：多个进程能在一段时间内同时运行 独立性：能独立运行，独立获得资源，独立接受调度 异步性：各进程按各自独立的，不可预知的速度向前推进 进程的三种基本状态就绪 执行 阻塞 进程的制约直接制约关系（同步关系）：因相互合作 间接制约关系（互斥关系）：竞争临界资源 界资源和临界区临界区：每个进程中访问临界资源的那段程序。 临界资源：一次仅允许一个进程使用的共享资源。每次只准许一个进程进入临界区，进入后不允许其他进程进入 生产者消费者问题123456789101112131415161718192021222324252627282930313233343536int in = 0, out = 0;item buffer[n];semaphore mutex = 1, empty = n, full = 0;void producer()&#123; do&#123; producer an item nextp; ...... wait(empty); wait(mutex); buffer[in] = nextp; in = (in + 1) % n; signal(mutex); signal(full); &#125; while(TRUE);&#125;void consumer()&#123; do&#123; wait(full); wait(mutex); nextc = buffer[out]; out = (out + 1) % n; signal(mutex); signal(empty); consumer the item in nextc; ...... &#125; while(TRUE);&#125;void main()&#123; cobeigin producer(); consumer(); coend&#125; 进程通信类型共享储存系统 管道系统 消息传递系统 客户机服务器系统 线程的定义进程是正在运行的程序的实例 线程的三种基本状态就绪 执行 阻塞 线程的特点轻型实体 共享进程资源 可并发执行 共享进程资源 进程和线程的区别地址空间：线程是进程内的一个执行单元，进程有自己独立的地址空间 资源拥有：进程进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源 线程是处理器调度的基本单位，但进程不是 并发性：都能并发执行 三，调度和死锁调度的层次高级调度：作业调度 中级调度：内存调度 低级调度：进程调度 作业调度算法先来先服务算法（first come first served， FCFS） 短作业优先算法(short job first, SJF)：作业越短，优先级越高 优先级调度算法(priority-scheduling algorithm, PSA)：等待时间越长，优先级越高 高响应比优先调度算法(Highest Response Ratio Next, HRRN)：优先权=（等待时间 + 要求服务时间）/ 要求服务时间 进程调度算法轮转调度算法 优先级调度算法 多队列调度算法 多级反馈队列调度算法 基于公平原则的调度算法 实时调度算法 非抢占式调度算法 非抢占式轮转调度算法 非抢占式优先度调度算法 非抢占式调度算法 基于时钟中断的抢占式优先级调度算法 立即抢占的抢占式优先级调度算法 死锁的定义如果一组进程的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的 产生死锁的必要条件互斥条件 请求和保持条件 不可抢占条件 循环等待条件 处理死锁的方法预防 避免 检测 解除 四，存储器分页大题操作系统 页内地址已知某分页系统，主存容量为64K, 页面大小为1K，对一个4页大的作业，将第0、1、2、3页分配的主存的2，4，6，7，试将十进制的虚拟地址2500转换成物理地址。 因为地址为2500，而一页大小为1K，所以是2500%1K=2……452.这里对1K取模是因为页大小为1K，此时2就是虚拟地址里边的虚页号，然后换成对应的页框号6号（因为说了将进程的第2页分配到主存的第6页），452是就是页内地址。所以最后换好的物理地址是6*1K+452=6596（十进制） 磁盘调度算法FIFO(先来先服务算法)：依次处理服务队列里的每一个磁道 SSTF(最短寻道时间算法)：处理完成之后再处理离这个磁道号最近的磁道号 SCAN(电梯调度算法)：来回 CSCAN(循环扫描算法):反复从上往下 假设当前磁头在67号，要求访问的磁道号顺序为98,25,63,97,56,51,55,55,6 (电脑随机产生的,设定最外层磁道号为100号) FIFO算法的服务序列是：98,25,63,97,56,51,55,55,6 磁头移动的总距离distance = (98-67)+(98-25)+(63-25)+(97-63)+(97-56)+(56-51)+(55-51)+(55-55)+(55-6) SSTF算法的服务序列是: 63,56,55,55,51,25,6,97,98 磁头移动的总距离distance = (67-63)+(63-56)+(56-55)+(55-55)+(55-51)+(51-25)+(25-6)+(97-6)+(98-97) SCAN算法的服务序列是：63,56,55,55,51,25,6,97,98 磁头移动的总距离distance = (67-63)+(63-56)+(56-55)+(55-55)+(55-51)+(51-25)+(25-6)+(97-6)+(98-97) CSCAN算法的服务序列是：63,56,55,55,51,25,6,98,97 磁头移动的总距离distance = (67-63)+(63-56)+(56-55)+(55-55)+(55-51)+(51-25)+(25-6)+(100-98)+(98-97)","categories":[],"tags":[]},{"title":"Oracle复习","slug":"Oracle复习","date":"2017-06-28T04:46:14.000Z","updated":"2017-07-18T08:00:30.958Z","comments":true,"path":"2017/06/28/Oracle复习/","link":"","permalink":"http://blog.valorachen.club/2017/06/28/Oracle复习/","excerpt":"","text":"用户创建 12345create user c##c identified by 110120default tablespace df_testtemporary tablespace tempquota unlimited on df_testaccount unlock 修改密码 1alter user c##c identified by 123456; 授权 1234567891011grant create table to c##c;grant alter any table to c##c;grant drop any table to c##c;grant insert any table to c##c;grant update any table to c##c;grant create session to c##c;grant connect to c##c;grant resource to c##c;grant create tablespace to c##c;grant create procedure to c##c;grant create trigger to c##c; 1grant insert on test to c##c; Connect 角色，是授予最终用户的典型权利，最基本的权利，能够连接到Oracle数据库中，并在对其他用户的表有访问权限时，做SELECT、UPDATE、INSERTT等操作。 Alter session–修改会话； Create cluster–建立聚簇； Create database link–建立数据库连接； Create sequence–建立序列； Create session–建立会话； Create synonym–建立同义词； Create view–建立视图。 Resource 角色，是授予开发人员的，能在自己的方案中创建表、序列、视图等。 Create cluster–建立聚簇； Create procedure–建立过程； Create sequence—建立序列； Create table–建表； Create trigger–建立促发器； Create type–建立类型。 DBA角色，是授予系统管理员的，拥有该角色的用户就能成为系统管理员了，它拥有所有的系统权限。 表空间123456789create tablespace df_testlogging datafile &apos;D:\\2_Software\\2_Develop\\Oracle\\df_test1.ora&apos; size 50mautoextend on next 10mmaxsize unlimited,&apos;D:\\2_Software\\2_Develop\\Oracle\\df_test2.ora&apos; size 50mautoextend on next 10mmaxsize unlimitedextent management localsegment space management auto 表创建12345create table stu( stu_no number, stu_name varchar(10), constraint pk_stu primary key(stu_no) validate); 123456789101112create table stu_info( stu_no number, stu_sex varchar(10), stu_grade number, constraint pk_stu_info primary key(stu_no) validate, constraint fk_stu_info foreign key(stu_no) references stu(stu_no) validate)organization index tablespace ts_testpctfree 5initrans 1maxtrans 30storage(buffer_pool keep)parallel 插入1insert into stu(stu_no,stu_name) values(1,&apos;student1&apos;); 更新1update stu set stu_name = &apos;student2&apos;,stu_no = 2 where stu_no = 1; 删除1delete from stu where stu_no = 2; 存储过程查找创建 12345create or replace procedure pro_query(pro_stu_no in stu.stu_no%type,pro_stu_name out stu.stu_name%type)asbeginselect stu_name into pro_stu_name from stu where stu_no = pro_stu_no;end pro_query; 测试 123456789set serveroutput ondeclarepro_stu_no stu.stu_no%type;pro_stu_name stu.stu_name%type;beginpro_stu_no := 1;pro_query(pro_stu_no,pro_stu_name);dbms_output.put_line(&apos;学生姓名：&apos;||pro_stu_name);end; 修改创建 12345create or replace procedure pro_update(pro_stu_no in stu.stu_no%type,pro_stu_name in stu.stu_name%type)asbeginupdate stu set stu_name = pro_stu_name where stu_no = pro_stu_no;end pro_update; 测试 12345678910set serveroutput ondeclarepro_stu_no stu.stu_no%type;pro_stu_name stu.stu_name%type;beginpro_stu_no := 1;pro_stu_name := &apos;student2&apos;;pro_update(pro_stu_no,pro_stu_name);commit;end; 函数创建 12345678910create or replace function fun_query(fun_stu_no number)return varcharisresult varchar(20);beginselect stu_name into result from stu where stu_no = fun_stu_no;return result;exceptionwhen no_data_found then return 999;end fun_query; 测试 1select * from stu where stu_name = fun_query(1); 触发器数据库触发器12345CREATE TABLE connect_audit ( login_date DATE, logoff_date DATE, user_name VARCHAR2(30)); 123456CREATE OR REPLACE PROCEDURE demo_log_procIS BEGIN INSERT INTO connect_audit(login_date,user_name) VALUES (SYSDATE, USER); END demo_log_proc; 123CREATE OR REPLACE TRIGGER logon_trig AFTER LOGON ON DATABASE CALL demo_log_proc 1select * from connect_audit; 语句触发器1create tb_log(txt varchar(10)); 123456789create or replace trigger tri_langafter insert or update or delete on studeclarebeginif inserting then insert into tb_log values(&apos;插入&apos;);elsif updating then insert into tb_log values(&apos;更新&apos;);elsif deleting then insert into tb_log values(&apos;删除&apos;);end if;end tri_lang; 带函数的触发器一 12345678910111213CREATE OR REPLACE TRIGGER tri_grade_percentageBEFORE INSERT OR UPDATE OF final_grade ON db_gradeFOR EACH ROWBEGINIF INSERTING THENINSERT INTO db_gradeVALUES(:new.REGISTER_NO,:new.COURSE_NO,:new.WORK_ID,:new.COLLEGE_NO,:new.COURSE_NAME,:new.REGISTERED_DATE,:new.REGISTERED_YEAR,:new.REGISTERED_TERM,:new.FINAL_GRADE*0.60,:new.MAKEUP_FLAG,:new.CREDIT);ELSIF UPDATING THENUPDATE db_grade SET FINAL_GRADE =:new.FINAL_GRADE*0.60;END IF;END tri_grade_percentage; 12345678910create or replace trigger tri_funbefore insert or update of stu_grade on stu_infofor each rowbeginif inserting theninsert into stu_info values(:new.stu_no,:new.stu_sex,:new.stu_grade*0.60);elsif updating thenupdate stu_info set stu_grade =: new.stu_grade*0.60;end if;end tri_fun; 二 12345678CREATE OR REPLACE TRIGGER tri_when_restrictBEFORE INSERT OR UPDATE OF final_grade ON db_gradeREFERENCING NEW AS new_recFOR EACH ROWWHEN (new_rec.final_grade&lt;60)BEGIN:new_rec.makeup_flag :=&apos;1&apos;;END tri_when_restrict; 三 123456789CREATE OR REPLACE TRIGGER tri_follows_priorBEFORE INSERT OR UPDATE OF final_grade ON db_gradeREFERENCING NEW AS new_recFOR EACH ROWFollows staffuser.tri_when_restrictWHEN (new_rec.final_grade&lt;60)BEGIN:new_rec.final_grade := 999;END tri_follows_prior;","categories":[],"tags":[]},{"title":"亲手打造萌萌哒的新键盘","slug":"亲手打造萌萌哒的新键盘","date":"2017-04-10T13:39:33.000Z","updated":"2017-06-22T07:58:11.325Z","comments":true,"path":"2017/04/10/亲手打造萌萌哒的新键盘/","link":"","permalink":"http://blog.valorachen.club/2017/04/10/亲手打造萌萌哒的新键盘/","excerpt":"","text":"前言这是一个完全不懂硬件的菜鸟一步一步组装GH60键盘的故事。 之前那个ThinkPad坏得不能再写代码了，于是我换了新电脑，但是不习惯战神的键盘，太硬了好难摁下去，还是ThinkPad的键盘爽，但是目前也只好再买一个键盘，于是去网上了解什么键盘好用。 知乎上有人推荐GH60，头一次知道还可以自己组装键盘，而且是开源的，感觉非常有意思啊，于是就下手了。 组件 PCB（ Printed Circuit Board），中文名称为印制电路板。这里是指键盘的主板，貌似有带底灯和无底灯两种PCB可选。 LED底灯。可选项，如果不需要底灯就不需要买。 轴。机械键盘之所以为机械键盘的原因。 定位板。没有这个的话，到时候焊轴会焊歪，别问我怎么知道的，文章后面会有详细反例。但是好像也有老司机不喜欢用定位板干脆去掉定位板的。 卫星轴一套。用于固定比较长的键，如空格键，enter键等，都需要卫星轴来支撑。 MiNi USB数据线一条。用于连接电脑和键盘。 键盘外壳。 键帽。真贵啊。 开始组装刷固件这一步卖家写得挺详细，就不多说了 https://mp.weixin.qq.com/s/N_kdfWUl1c_9EscuJ_nMoA 装卫星轴卫星轴塑料部分由两部分组成，暂且叫做A部分和B部分 首先，我们需要把B怼进A里边，然而B的两侧和A的两侧的构造都是不同的，应该朝什么方向呢？这里有一个辨别方法。 如下图，A的两端一端是圆型，一端是角型。画红框的那一端就是圆型。 如下图，B的一端是上面有横梁的。 将A的圆型那一端与B的有横梁端朝同一面套进去就行。然后，两个一个对穿上钢丝 最后，把卫星轴装到PCB上。圆型端对着大孔，角型端对着小孔。角型端会比小孔稍微大一点，需要用力摁下去。 一共有5对卫星轴需要装配 正确安装好的卫星轴，应该是紧贴PCB的。不然说明你没有将卫星轴紧摁进去。 PCB倒立时卫星轴的B部分应该是自然下垂的，不然就说明你A与B部分装反了方向，换方向重新安装即可。 装轴如果你不适用定位板，你可能会焊成这个样子。仔细一看，就能发现轴焊得歪歪扭扭。所以对于新手，还是用定位板的好。先把轴固定在定位板上，然后盖到PCB上，然后再焊。 需要注意的是，有些地方一个键位可以以有两种位置可以选择，这可不能随便瞎选一个，最好把键帽套在轴上试一试这个位置是否适合你的键帽然后再焊，不然可能会出现焊完后套键帽，几个键帽挤在一起根本没办法把键按下去的问题。 这是焊好所有的轴之后的样子 先别急着做下一步，赶紧插上键盘试试每个键是否好用吧。 装底灯，装键帽注意区分正负极，LED灯长的那一端是正极。 当你在PCB正面装好灯，准备翻去反面焊的时候，灯会往下掉，直到碰到桌面。千万不能这就开焊，由于PCB反面放置于桌面时，支撑它的是轴，那么现在灯的顶端和轴的顶端是在同一水平面的。而当键按下去的时候，键帽会忘下压，这轴时也忘下压，而灯不会和轴一样弹性，于是会阻止你按下这个键。 针对上面提到的问题，我有个可行方案。先把LED灯的正负极插在PCB上，然后装上键帽，拿焊锡的手把PCB压住，确保这个键是按下状态，然后开焊。一定要确保这个键是按下去的状态下才焊灯，这很重要，不然还是可能出现上面的状况。 装外壳如果你想刷配列，不必刷完配列再装外壳，装好外壳后，你会发现键盘背面有个的孔正好可以按到重置键。 刷配列刷配列可以说是开源键盘最让人心动的原因之一。想一想，输入默认账号密码，打开某个软件，或者某个键的功能让你不满，现在这些功能只需要你通过编程告诉键盘你想让哪个键做什么事，键盘就能如你所愿，这简直太棒了。 首先，打开这个网站http://yang.tkg.io/ydkb/ 点击【读取KeyMao】来读取你键盘现在的配列 点击【上放区域】中你想修改的键，然后到【下方区域】选择你希望这个键位达到的功能。 人如果你希望你的键盘有多个配列，点击【上方区域】中的Tab来切换到另一个配列并进行编辑。 现在你已经编辑了多个配列了。怎么告诉键盘你要使用哪个配列呢？当然是通过按键了。所以，下一步就是设置Fn键。 因为我的怠惰所以断更了额，等勤勉的再补回来……","categories":[],"tags":[{"name":"硬件","slug":"硬件","permalink":"http://blog.valorachen.club/tags/硬件/"}]},{"title":"如何将NetBeans中的Java程序导出可执行文件.exe","slug":"如何将NetBeans中的Java程序导出可执行文件-exe","date":"2017-03-12T15:47:45.000Z","updated":"2017-04-14T09:17:00.180Z","comments":true,"path":"2017/03/12/如何将NetBeans中的Java程序导出可执行文件-exe/","link":"","permalink":"http://blog.valorachen.club/2017/03/12/如何将NetBeans中的Java程序导出可执行文件-exe/","excerpt":"","text":"前言昨天刚刚给自己的Hexo主题增加了一个安利模块，把这个主题上传到Github了，链接在此：angui 没错，这个主题的名字是安轨，因为我是个前端小白，所以改这个主题让我的心情很爆炸，简直是m安轨，所以主题名叫angui 刚刚在博客上利用这个板块放了几首歌上去，并不是测试数据，我有很用心的写乐评的，有兴趣就听一听吧，吃我安利 效果预览 安利模块中的内容是由一个json文件生成的，每次要添加新内容，就需要手动编写json。当内容繁多的时候，这样的方式就特别不方便，而且还容易写错，于是寻思着做一个图形界面直接生成json，这样方便快捷，而且不容易出错。 这个程序放在Github了，链接在此：ReadingGenerator。也可以直接下载exe 效果预览 Json的处理方面我也算是半个老司机了，所以程序很快就写出来了。但是怎么导出exe我还是真不知道，以前一直都是直接在IDE里编译运行，总不能以后想添加个什么内容就打开编译器运行一遍呀，所以就开始找解决办法了，按照这篇文章完美解决了问题，但是我还是想在这里把步骤再过一遍 实际步骤下载并安装 Inno Setup走你 添加环境变量将你的Inno Setup安装路径添加到环境变量中 重启NetBeans这是为了使新的环境变量生效 在 IDE 中启用本机打包 鼠标停在项目上，右键-&gt;属性 点击【部署】面板，打勾 进行打包鼠标停在项目上，右键-&gt;属性 安装exe生成的exe文件在 你的项目\\dist\\bundles目录下，双击来安装这个程序吧。 如果安装失败，并且弹出的对话框提示找不到主类，可能你的程序没有设置主类，在NetBeans中，主类会有特殊标志，如图红框所示 后续 抽时间把安利页面完善一下吧，加点电影，书籍，番剧什么的 稍微拾起一点对Swing的映像了，趁热打铁，把作业做了吧 并没有在这周成功的找回人生方向。如果问我方向和努力那个重要，我会毫不犹地回答方向更重要。现在的我，再怎么努力都是南辕北辙，所以需要尽快回到人生的方向，可这偏偏是件欲速而不达的事情。虽然如此，我还是会加油的","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.valorachen.club/tags/教程/"},{"name":"Java，Swing","slug":"Java，Swing","permalink":"http://blog.valorachen.club/tags/Java，Swing/"}]},{"title":"哀家敲代码就是一把梭！","slug":"哀家敲代码就是一把梭！","date":"2017-03-11T06:53:00.000Z","updated":"2017-03-12T16:46:41.718Z","comments":true,"path":"2017/03/11/哀家敲代码就是一把梭！/","link":"","permalink":"http://blog.valorachen.club/2017/03/11/哀家敲代码就是一把梭！/","excerpt":"","text":"前言以个人的实际经历为例，分享一下当不会技术却需要研读源码时，可能会有所帮助的技巧。希望各位写代码都是一把梭，拿起键盘就是干！ 搞事这几天搞的大事就是自己把现在博客用的indigo主题自己折腾了一下，参考raytaylorism主题加了一个读书页面。raytaylorism主题确实有很多我非常中意的特性，但是依我个人的审美观还是觉得indigo主题更加美观，所以写了一篇文章分析了一下indigo主题没有的功能，自己研究研究源码改一下，就是这篇：indigo主题尚待完善的功能。我最想要的就是读书这个板块了，这个板块稍微改一下就能把看过的电影或番剧，听过的音乐都记上去，并不是要装文艺，但是有些东西如果忘了真的可惜 研究代码的第一步是使用它要了解代码的工作方式，就应该先使用它。我把我的主题切换成raytaylorism主题，发现想要改变如上图读书页面中的内容，只需要改变source/_data/reading.json中的内容就行了，json大概是这种结构，不用多解释，看到就一目了然的结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;define&quot;: &#123; &quot;readed&quot;: &quot;已读&quot;, &quot;reading&quot;: &quot;在读&quot;, &quot;wanted&quot;: &quot;想读&quot; &#125;, &quot;contents&quot;: &#123; &quot;readed&quot;: [&#123; &quot;title&quot;: &quot;众妙之门：网站UI设计之道&quot;, &quot;cover&quot;: &quot;https://img3.doubanio.com/lpic/s23139051.jpg&quot;, &quot;review&quot;: &quot;推荐非UI人士了解UI阅读。&quot;, &quot;score&quot;: &quot;7&quot;, &quot;doubanLink&quot;: &quot;http://book.douban.com/subject/20281463/&quot; &#125;, &#123; &quot;title&quot;: &quot;JavaScript模式&quot;, &quot;cover&quot;: &quot;https://img1.doubanio.com/lpic/s11337059.jpg&quot;, &quot;review&quot;: &quot;书很薄，但内容相当实用。&quot;, &quot;score&quot;: &quot;8.5&quot;, &quot;doubanLink&quot;: &quot;http://book.douban.com/subject/11506062/&quot; &#125;, &#123; &quot;title&quot;: &quot;JavaScript语言精粹&quot;, &quot;cover&quot;: &quot;https://img3.doubanio.com/lpic/s27993864.jpg&quot;, &quot;review&quot;: &quot;这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！&quot;, &quot;score&quot;: &quot;9.5&quot;, &quot;doubanLink&quot;: &quot;http://book.douban.com/subject/11874748/&quot; &#125;], &quot;reading&quot;: [&#123; &quot;title&quot;: &quot;网络游戏核心技术与实战&quot;, &quot;cover&quot;: &quot;https://img1.doubanio.com/lpic/s27881888.jpg&quot;, &quot;review&quot;: &quot;&quot;, &quot;score&quot;: null, &quot;doubanLink&quot;: &quot;http://book.douban.com/subject/25850090/&quot; &#125;], &quot;wanted&quot;: [&#123; &quot;title&quot;: &quot;计算机程序的构造和解释&quot;, &quot;cover&quot;: &quot;https://img5.doubanio.com/lpic/s1113106.jpg&quot;, &quot;review&quot;: &quot;&quot;, &quot;score&quot;: null, &quot;doubanLink&quot;: &quot;http://book.douban.com/subject/1148282/&quot; &#125;] &#125;&#125; 粗看源码但是单从使用的角度无法明白具体的实现方式。就算知道了这个页面由这个json文件控制，但是为什么是这个json文件，而且数据是怎么被抓取并生成静态页面的，并不知道，所以接下来要看源码了 全局查找，定位要看的源码源码中很多文件，我这里只需要了解读书页面，不需要理解所有的源码，所以需要定位哪一个部分才是需要看的源码 不管看什么代码，如果不知道要看什么部分，全局查找多半能定位到需要看的代码。这里我的具体做法如下： 在火狐浏览器中，鼠标停留在某一本书上，点击右键-&gt;查看元素。如图，可以看到，这个元素的class是book-item col s12 m6 在Atmo编辑器中全局查找关键字：book-item col s12 m6，如图，定位到reading.ejs这个文件，毫无疑问，看着名字就知道这个文件就是生成读书页面的文件 不惧怕陌生的代码，代码都是相通的笔者是一个基本不会前端技术的人，水平是属于上学校的Web课也就能及个格的那种。.ejs是什么东西我是完全不知道的，Node.js也只是听过名字而已。但是当我打开reading.ejs看到陌生的代码，却能把代码逻辑看懂个大概，因为不管是什么代码都有相似之处 下面是reading.ejs的代码。显然&lt;%……%&gt;中的都是逻辑代码，以var开头可以声明了一个变量，readingData这个变量名一看就知道是reading.json中的数据，tabCount是Tab的数量，其值为3，因为一共3个Tab，分别是“已读”，“在读”，“想读”.第二段和第三段，外层都有for循环，分别用来生成Tab和book-item 无论是什么代码，都有相似点，这里列举一下 var开头一看就是变量 有new关键字知道在创建对象 if else for switch，逻辑控制语句所有语言都得有 a.b.c 一看就知道在调用成员 a.b.c()是在调用函数 文件的名字，变量的名字，对象的名字，函数的名字描述了它的作用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;% var readingData = site.data.reading; var tabCount = Object.keys(readingData.define).length;%&gt;&lt;div class=&quot;container main-container&quot;&gt; &lt;% if (readingData) &#123; %&gt; &lt;div class=&quot;&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;ul class=&quot;tabs &quot;&gt; &lt;% for (var key in readingData.define) &#123; %&gt; &lt;li class=&quot;tab col s&lt;%= 12 / tabCount %&gt; &quot;&gt; &lt;a class=&quot;&lt;%= theme.color.tab %&gt;-text &quot; href=&quot;#&lt;%= key %&gt;&quot;&gt;&lt;%= readingData.define[key] + &apos;(&apos; + readingData.contents[key].length + &apos;)&apos;%&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; &lt;/div&gt; &lt;% for (var key in readingData.contents) &#123; %&gt; &lt;div id=&quot;&lt;%= key %&gt;&quot; class=&quot;row&quot; style=&quot;margin-top: 20px;&quot;&gt; &lt;% var bookList = readingData.contents[key]; %&gt; &lt;% for (var i in bookList) &#123; %&gt; &lt;div class=&quot;book-item col s12 m6&quot;&gt; &lt;div class=&quot;card small hoverable&quot;&gt; &lt;div class=&quot;card-image waves-effect waves-block waves-light&quot;&gt; &lt;img class=&quot;card-cover-image activator&quot; src=&quot;&lt;%= bookList[i].cover %&gt;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;card-content &lt;%= theme.color.link %&gt;-link-context&quot;&gt; &lt;span class=&quot;card-title truncate activator grey-text text-darken-4&quot;&gt;&lt;%= bookList[i].title %&gt; &lt;/span&gt; &lt;p&gt;&lt;%= __(&apos;reading.score&apos;) %&gt;: &lt;%= bookList[i].score || &apos;???&apos; %&gt; &lt;a class=&quot;external-link right&quot; href=&quot;&lt;%= bookList[i].doubanLink %&gt;&quot; target=&quot;_blank&quot;&gt; &lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;card-reveal&quot;&gt; &lt;span class=&quot;card-title grey-text text-darken-4&quot;&gt;&lt;%= __(&apos;reading.comment&apos;) %&gt; &lt;i class=&quot;fa fa-times-circle-o right&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;p&gt;&lt;%= bookList[i].review %&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;%- partial(&apos;_partial/plugin/comment&apos;, &#123;page_id: &apos;reading&apos;&#125;) %&gt; &lt;% &#125; else &#123; %&gt; &lt;%- partial(&apos;_partial/construction&apos;) %&gt; &lt;% &#125; %&gt;&lt;/div&gt; 自己写Demo当时试着直接把reading.ejs拷到indigo主题中，但是当我执行hexo -g时报一堆错误信息，果然事情不可能这么简单。应该是缺失了一些必要的文件，可是我不了解需要哪些页面才能构成一个页面，要了解这一点，就需要知道Hexo博客主题是怎么构成的，所以到网上找教程做个Demo，这是我找到的一个手把手教程：从零开始制作 Hexo 主题 按照教程走一遍后，大概知道了整个工作方式： 除了其子目录下的文件，/layout目录下的文件会生成Html页面 通过如下代码导入其他ejs文件（这里导入了header.ejs文件） 1&lt;%- partial(&apos;_partial/header&apos;) %&gt; /layout/layout.ejs，通过&lt;%- body %&gt;来引用/layout目录下的ejs文件，/layout目录下的子目录下的ejs文件除外 /source目录下的文件是Html页面中会用到的css,font,js 你的博客/source/_data下的yml文件和json文件中的内容会记录到你的博客/db.json文件中，并在ejs代码中可以引用其中的数据 那么现在我清楚为什么代码会报错了，因为显然读书页面导入了css和js，而这些文件并不能被找到 想知道代码的作用就删除它显然raytaylorism主题的作者不是在reading.ejs中引入css和js的，上面通过写Demo而得知决定读书页面生成的代码不止是reading.ejs，还有layout.ejs，下面是其代码123456789101112131415&lt;%- partial(&apos;_partial/head&apos;) %&gt;&lt;body&gt; &lt;img src=&quot;/weixin_favicon.png&quot; style=&quot;position: absolute; left: -9999px; opacity: 0; filter: alpha(opacity=0);&quot;&gt; &lt;%- partial(&apos;_partial/header&apos;) %&gt; &lt;main&gt; &lt;%- body %&gt; &lt;%- partial(&apos;_partial/float&apos;) %&gt; &lt;/main&gt; &lt;%- partial(&apos;_partial/footer&apos;) %&gt; &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;&lt;/body&gt;&lt;/html&gt; 可以看到layout.ejs中引用了一大堆文件，鬼才想一个一个去看引用文件的代码，我只关心什么代码会影响读书页面。最简单粗暴的弄懂代码的方式就是删除它，于是我依次删掉那些引用文件的代码，发现只有最后一项引用会让读书页面没有css和js。然后看after_footer.ejs，又是一堆引用，方法当然还是删除！删除！删除！ 复制，粘贴，拿起键盘就是干！上一步中已经提取到了所有与读书页面的相关代码，接下来要做的就是把它们插分到indigo主题中，indigo主题中有它自己的layout.ejs，而且头部布局需要在每个掌管页面的ejs中添加代码引用而不是在layout.ejs中直接引用，还有就是需要把引用css和js的代码直接写reading.ejs中。总之，需要稍微改造一把，然后就大功告成啦 感想这篇文章，对于我来说，叙事部分和方法部分都是有用的。但是对于其他读者，可能叙事部分会看得一脸懵逼，但是希望看文章的人能多少学到一些研读源码时可能会用到的方法，我以后研读源码时也会借鉴自己这次的经验 我认为自己拥有不错的阅读理解能力，不止是在研读代码方面。我能冷静下来阅读并理解晦涩难懂的书，或者是英文文章，我对此感到高兴。并不是炫耀我有多厉害，只是从很多事情中得出的结论。我既能以平常心对待自己的优点，也能以平常心对待自己的缺点 其实这个故事是精简版本，其实我并不能一下子就想到什么时候该怎么做才是对的，有时会因为选择了错误的方法卡在一些地方而产生负面情绪，然而情绪可以调整，方法可以不断去尝试和改变，所以最后还是成功啦 后续 我会把我改动后的主题传到github，链接会留在这里 手动写json一点都不优雅，写个代码自动生成吧，new一个对象多一本书的方式多么优雅 把看过的书、电影、，番剧还有听过的歌都搬到博客上吧 其实我在这一个星期再次失去了人生的方向，会研究Hexo博客主题的源码是因为我实在不知道什么才是有意义事情了。这是个大事，没有方向，谈何努力，我必须在下周之前找到人生的方向 补充后续中的1，2两条已经做到啦，具体看这篇吧，走你","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.valorachen.club/tags/hexo/"},{"name":"研读源码","slug":"研读源码","permalink":"http://blog.valorachen.club/tags/研读源码/"}]},{"title":"记一些临时链接","slug":"记一些临时链接","date":"2017-03-09T08:48:33.000Z","updated":"2017-03-11T09:55:36.693Z","comments":true,"path":"2017/03/09/记一些临时链接/","link":"","permalink":"http://blog.valorachen.club/2017/03/09/记一些临时链接/","excerpt":"","text":"关于网易云音乐爬虫的api接口？","categories":[],"tags":[]},{"title":"搞机，搞机，搞死这只机","slug":"搞机，搞机，搞死这只机","date":"2017-03-07T14:50:49.000Z","updated":"2017-03-07T15:04:10.786Z","comments":true,"path":"2017/03/07/搞机，搞机，搞死这只机/","link":"","permalink":"http://blog.valorachen.club/2017/03/07/搞机，搞机，搞死这只机/","excerpt":"","text":"起因想要root 想要Google服务 想要Xpose 权衡了EMUI5与EMUI4的优缺点，我选择EMUI4 流程去年就试过用KingRoot之类的软件了，可想而知是想不通的。百度搜出了一些root教程，刚开始看得我一脸懵逼，但是傻瓜教程不用懂为什么，跟着做就好了，当时没有多管。现在明白了整个流程是酱紫的： 1.去官网弄到解锁码 2.使用adb进fastboot，然后输入解锁指令，解锁指令的参数就是解锁码 3.然后这样就可以刷第三方recovery了，可能是因为原生recovery无法刷包吧 4.然后有了第三方recovery，就可以刷包了。可以单刷SuperSu包，也可以刷rom包 5.有了SuperSu，就可以装Google服务或Xpose了 解锁码听说华为手机需要解锁码才能搞机，于是去官网弄解锁码。网站上总是提示我的华为账号没有在手机上登陆超过14天，其实早就超过14天了。于是就一直卡在这块了，渐渐的就不去在意root的事了 后来偶然看到大家也有遇到同样状况的，有几个人说是官方故意限制用户开rooy，打客服就解决了 刚开学这几天，不知怎么地，又燃起了搞机的欲望，于是试着打客服了。客服记下了好几个难念的手机序列号之后，不知道为啥，我在网上又操作了一遍，就这么轻松地弄到了解锁码 解锁这个倒是没啥，咱搬来就是Android程序员，adb不至于不会用，3个指令搞定 123adb devicesadb reboot-bootloaderfastboot oem unlock &lt;解锁码&gt; 刷recovery这一步就是个大坑了,以前玩的是Android4.4手机，没有刷过recovery，因为原版的recovery够用，所以对这方面没有什么经验，鬼知道recovery与手机的系统存在兼容性问题，固定版本的EXUI必须刷固定版本的recovery。 然后我的手机就一直停在开机画面进不去了，当然也进不了recovery。以之前的搞机经验，只要硬件没事，recovery还在，无论发生什么事我都会处惊不变。但是这次我真的无法风轻云淡了，我明白搞机有变砖的风险，但是，当事情真的发生在我身上，啊不，我手机身上，我开始方了。 度娘再次拯救了我，原来华为有一种神奇的机制。开机时持续按音量+键3秒就可以联wifi下载官方系统恢复手机，这一点确实很良心。 这一恢复，没有还原成EMUI5，而是直接退回到了EMUI4.1，庆幸服务器上的系统还没有更新。我以为这下好了，不是EMUI5就不会有recovery不兼容的问题了，结果再一次重演悲剧 后来查询到怎么还原到以前版本的系统后，下载了华为的手机助手HiSuite，还原到了EMUI4.0，终于成功刷入了recovery 刷包本来下到了SuoerSU的包准备刷的，但是我的心脏经不起折腾了，觉得刷rom比较稳，于是刷了个第三方rom 狗带到此为止，终于root了，第一件事就是装上酷安，下载自己备份的应用集，有了root，装app终于可以不用一个一个点确定了。于是我又向往常一样刷起了排行，在排行上刷到了Xpose，想起自己还没装这个呢，于是点了下载。 打开Xpose，上来就是一个写着英文警告的提示框，翻译成中文就是不会搞机的别瞎tm刷Xpose，我错误的选择了相信自己 再次不能开机。这一次，recovery能进，但是不能联wifi恢复官方系统了，提示服务器连接失败什么的。关于这个提示，我在系统为官方EMUI4.1时也有发生过，所以可以排除因为是第三方ROM所以接口响应失败这个原因 这我就不明白了，按理来说，这个接口的传参应该是手机型号，而手机型号不会根据现在的系统而变化，如果真跟系统扯上关系，为什么EMUI5就能成功，而其他版本就不行呢？也许是我多想了，华为的技术还是很优秀的/，不至于写出这么没有鲁棒性的接口，可是硬说是WIFI原因也是说不通的，因为之前都成功刷入了，而且wifi不止我一个人在用。 当时是没有像这么多的，无法刷官方系统就刷第三方系统好了。可是重刷了一遍，一点改善都没有，还是死死的停在开机画面。 当时已经到了凌晨，我是记不住学校的事情的人，其中当然包括课表。而且，我也真没招了，如果再去问度娘，又不知道要试到第几个方法才能好。于是只好睡了，也不知怀着怎样的心情睡着了 大清早被吵醒，这是早上有课的凶兆，厕所被占无法洗漱，于是又开始折腾手机，能打开的就只有recovery，看到了一个格式化data分区的选项，以开发者的经验来看，所有的软件都安装在data里边，如果格式化data分区，Xpose作为一款软件应该也会被清除掉，于是就死马当活马医地点了下去，重启之后，还是卡在开机界面，死马只是被我又鞭尸了一次而已 反正已经鞭尸一次了，不如再鞭一次，可能是data里还有其他重要的东西带着一起删了所以无法重启，于是我再次刷包，手机神奇的复活了，开心得我恨不得马上下一堆我手机原来的软件，可惜一上午的课，想了想还是别逃了，不过能拯救我的手机我已经很开心了 感想其实这个故事已经是精简版本了，虽然是昨天才发生的事情，但是记不太清了，以上的每一步，其实都不是一遍成功的。 由于我的行为，整个过程中屡屡发生让人心惊的事情，刚开始一股后悔涌上心头，但是不一会儿我就看开了。咋一看发生那么多屁事都是因为我手贱，但是仔细一想，这并不是可以避免的事情 因为心理上不可避免，而心理决定行为。好奇与探索是从我一生下来就植根于基因的东西，以此惹过麻烦，也饱受折磨。这种心理并不会强烈到完全不受外界事物的影响，但是根深蒂固。我尊重他人隐私所以不好奇，我珍惜生命所以绝不探索与死亡有关的事物。但是我可以毫不在意千元手机的死活瞎折腾，也不顾老师的点名而逃课不折腾好不罢休。 补充一下，关于珍惜生命的理解。珍惜生命绝不等同于害怕死亡，生命是重要的，但对于我来说，却不是最重要的。虽然比生命重要的事物不多，但还是有一些的。个人觉得那种把生命放在第一位的人是可悲的人 后续嗨呀，Xpose还是没有安装上，好气哦，有时间还得再折腾手机。 话说寒假装ubuntu因为总是死机而告终，后来把电脑弄得不能启动了，差点被维修人员骗了70RMB，虽然最后还是成功自救了，但是没有装好ubuntu还是好气哦。最近听朋友说他也遇到这个问题，说是当前linux内核对skylake架构的cpu支持不是很好，要翻墙下驱动貌似。 如果不出意外，明天去泡咖啡厅蹭网吧。解决方案留在这里方便明天用 http://blog.csdn.net/xjz18298268521/article/details/52788133 http://www.jianshu.com/p/34236a9c4a2f?winzoom=1","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.valorachen.club/tags/教程/"},{"name":"mate8","slug":"mate8","permalink":"http://blog.valorachen.club/tags/mate8/"},{"name":"日常作死","slug":"日常作死","permalink":"http://blog.valorachen.club/tags/日常作死/"}]},{"title":"indigo主题尚待完善的功能","slug":"indigo主题尚待完善的功能","date":"2017-03-05T08:50:06.000Z","updated":"2017-03-05T09:33:32.866Z","comments":true,"path":"2017/03/05/indigo主题尚待完善的功能/","link":"","permalink":"http://blog.valorachen.club/2017/03/05/indigo主题尚待完善的功能/","excerpt":"","text":"我的博客现在是indigo主题，个人感觉这个主题非常美观，但是也有美中不足的地方。并不想要求作者去写代码来满足自己，对于很多事情是不能总是当伸手党，虽然现在对于web前段的知识是新手水平，但是我希望我有时间多琢磨琢磨怎么实现这些功能。下列很多提议都参考了(参考raytaylorism主题)，到时候我会下载这两个主题的源码，把它们的优点综合起来 阅读下一篇或上一篇文章(参考raytaylorism主题)每个文章的末尾，添加一个跳转到下一篇文章的Link 带封面的文章在markdown里定义一张图片，博客首页中的文章列表中，此文章不仅展示标题，并且展示这张图片 顶置文章首页文章列表的第一片文章为此文章 滚动Banner(参考raytaylorism主题)首页的上方部分变为ToolBar那么窄，长度能hold住搜索和分享按钮就行，多出来的部分变成Banner 多级目录(参考raytaylorism主题) 每个文章的标题上部显示文章所在目录的位置，点击目录可跳转到此目录的文章列表或下一级目录列表（raytaylorism主题没有做下一级目录列表功能） 书评，乐评，影评(参考raytaylorism主题)书评参考下图 点击之后能出现评论内容，可以点击按钮查看附件（对于书是阅读，对于音乐和电影是播放）","categories":[{"name":"hexo","slug":"hexo","permalink":"http://blog.valorachen.club/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.valorachen.club/tags/hexo/"},{"name":"产品思维","slug":"产品思维","permalink":"http://blog.valorachen.club/tags/产品思维/"}]},{"title":"Hexo博客，我新的纪录方式","slug":"Hexo博客，我新的纪录方式","date":"2017-03-02T13:46:23.000Z","updated":"2017-03-05T07:30:18.347Z","comments":true,"path":"2017/03/02/Hexo博客，我新的纪录方式/","link":"","permalink":"http://blog.valorachen.club/2017/03/02/Hexo博客，我新的纪录方式/","excerpt":"","text":"小本本作为一个从小到大总是被各种人诟病字写得吃藕的人。自写多好人长多美的理论是从来不信的，对每个认为自写的不好的学生就是态度不端正的老师表示强烈谴责。课堂笔记从来就是能不记就不记，以同桌的笔记为生，虽然懒也是主要原因，但是就算我不懒，写下的笔记也是无人能懂的天书，还不如不记呢 大家都记的东西我还可以蹭一蹭，但是没有人帮忙记录的东西也是有的。总不能日记都要别人写，歌词都要别人抄吧。记得那个时候，我最大的爱好之一就是在每天的朝读时偷偷唱歌，中文歌到还好，很快就能记住词，但是我会经常学一些新的英文歌，于是就开始买漂亮的小本本抄歌词。我的字写在这么漂亮的小本本上简直就是鲜花插在牛粪上，所以刚买小本本的时候写字会特别认真，但是也就能坚持那么一会儿，也许这就是鲜花逃脱不了的宿命（才怪惹！都是因为我字写得丑惹） 写作软件上大学有电脑和手机之后我就打开了新世界的大门，电子文档实在是太好了，再也不用愁字写得丑的问题了，公平而且自由，而且方便分享，永不丢失。现在在用的有： 【有道云笔记】支持N多格式，应该是笔记这块做得最大的一家了，后来逐渐开始有广告和会员等盈利业务 【印象云笔记】有道云笔记对标签的支持不是很好，所以才用这个软件。我主要在这里写一些天马行空的小想法 活页本电子文档再怎么样也不如纸质的看着舒爽，但是我又不想再手写，后来在淘宝上逛到了活页本这个东西，牛皮家伙，看着高端大气上档次。一个机灵就想到了既然活页本可拆卸，那么可以把电子文档打印在上面看呀，于是我就这么做了，效果如下图，个人感觉还不错，以后要是学新歌还会继续使用这种方式 我的假博客大三上学期上Html课那会儿嫌上课没意思，于是琢磨着弄个博客，可是我不想一步一步认真学建站技术，属于好吃懒做那种人。在网上下载了几个不错的模板，上课的时候鼓捣了一阵子终于把几个模板拼好了，大概是这个样子的 图1：目录 图2：文章 做法特别原始，需要写完md后自己生成Html，然后把这段Html的body部分的代码插分到模板的一个固定的div中，这还没完，为了图2中侧栏能顺利的跳转到相应文章，所有文章对应的侧栏的超链接需要再编辑一遍，如果需要新建目录，就需要在图1中新增一个按钮。总之，这是一种蠢到家的做法，但是就算如此，我在服务器上打开自己的博客的那一刻真的感觉特开心 开心也就开心了那么一阵子，这种糟心的写博客方式，能坚持下来就见鬼了。期末复习那会倒是写了一点笔记抱佛脚，然后就没有然后了 Hexo今天刚从张哥的小密圈里了解了几种搭建博客的方法，其中就有Hexo。去网上搜到教程，这个教程就是用Hexo写的，（在这里）但是翻到搭好时的效果图的时候，我就想放弃了。嗨呀，这还不如我之前用模板拼的博客好看，看来这画风怎么会有些博客的动力嘛。后来一眼瞟到教程中写的主题那块了，既然可以换主题，那我就放心了 教程中的步骤很全，很快就搭好了，但是稍有不足的是，没有放上每一步的截图。那么我这里再写一遍吧，趁热…打铁 准备工作安装Node.js走你 作用：用来生成静态页面的 安装Git走你 作用：把本地的hexo内容提交到github上去 申请Github账号并建立代码仓库走你 作用：这里是准备把博客托管到github上 注册登录就不说了，这里讲讲怎么建立代码仓库。Github老鸟只需要知道，这个仓库的名称的格式必循是是your_user_name.github.io就可以自己弄好然后进入下一步了。 如果没用过github，跟着下面图中的红框一路走吧 仓库名必须为your_user_name.github.io，比如我的用户名是ChenViVi，那么仓库名称为ChenViVi.github.io 安装Hexowin键+r键打开终端，输入如下指令 1npm install -g hexo npm是安装了Node.js才能使用的指令，然后安装了hexo咱们就能使用hexo命令了 初始化创建一个文件夹，这里我创建的文件夹的名字是hexo，然后用cd命令进入这个文件夹。不懂cd命令的童鞋看图 然后执行如下命令 1hexo init 生成静态页面执行如下命令 1hexo g 本地启动启动本地服务，进行文章预览调试，执行如下命令 1hexo server 浏览器输入http://localhost:4000，即可看到你的博客 然后终端中按下Ctrl+C退出服务吧 与Github建立关联1.Win+R打开终端，输入如下命令 12git config --global user.name &quot;此处替换为你的Github用户名&quot;git config --global user.email &quot;此处替换为你的Github绑定邮箱&quot; 2.用记事本打开_config.yml，翻到文本最末尾，将deploy:后面的内容修改如下，其中repository: 后写你的仓库地址 1234deploy: type: git repository: https://github.com/ChenViVi/ChenViVi.github.io.git branch: master : 后面要有一个空格 执行如下命令来安装hexo-deployer，这样才能使用hexo来执行git部署 1npm install hexo-deployer-git --save 将代码部署到Github1hexo deploy 如果你在第6步中没有正确的写好_config.yml文件，此时将出现YAMLException 新建并上传文章1.执行如下命令来新建文章 1hexo new &quot;new article&quot; 2.打开你当前网站目录下的source_posts路径，里边会有一个new-aritcle.md文件，打开它开始写文档吧，不懂MarkDown的童鞋戳这里 3.执行如下3条命令来上传文章 清除现在的静态网页1hexo clean 重新生成静态网页1hexo g 上传到Github1hexo deploy 以后写文章就是无限循环这几步 其他常用命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 博客主题博客的画风好不好会直接影响到一个人阅读与写作的心情，所以为了改善博客的画风，可以配置博客主题，可以直接百度一下hexo主题 这里推荐http://hexo.io/themes这个网站，里边有很多主题，还可以直接预览效果 下面介绍一下最常见的主题安装步骤，以hueman主题为例。一般来说，github里会介绍主题安装与额配置的步骤的，或许会稍有不同 打开hueman主题的主页下载主题在你的hexo博客根目录下,在终端执行如下命令 1git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 这行命令后面的第一个参数是主题的地址，如果希望使用其他主题，更改此参数即可，查看参数的方法如图所示 第二个参数是主题存放的文件夹，这里把下载的主题保存在根目录下的 themes/hueman文件夹 设置配置文件1.打开根目录下的_config.yml文件，将语言设置为中文 2.翻到_config.yml文件的文本末尾，将主题设置为hueman 这里 theme: hueman 中的hueman对应着你刚才的主题的下载目录，也就是根目录下的 themes/hueman文件夹，如果需要使用其他主题，把hueman改成其他themes目录中的文件夹即可 3.设置主题配置 将根目录下的 themes/hueman文件夹中的_config.yml.example文件重命名为_config.yml 每一个主题的配置文件都叫做_config.yml，这里是直接把默认的示例配置文件作为配置文件直接使用，如果需要自定义主题，可以打开配置文件自行修改，修改的方法每一个主题的说明文档里都有介绍 安装搜索功能(可选，如果不执行这一步，将无法使用博客搜索功能)在终端执行如下命令 1npm install -S hexo-generator-json-content 完成以上步骤，你的博客主题就配置完成了，执行以下命令，查看效果吧 123hexo cleanhexo ghexo server 打开http://localhost:4000/","categories":[{"name":"hexo","slug":"hexo","permalink":"http://blog.valorachen.club/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.valorachen.club/tags/hexo/"},{"name":"教程","slug":"教程","permalink":"http://blog.valorachen.club/tags/教程/"}]}]}